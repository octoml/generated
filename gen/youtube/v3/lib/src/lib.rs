#![doc = "# Resources and Methods\n    * [activities](resources/activities/struct.ActivitiesActions.html)\n      * [*list*](resources/activities/struct.ListRequestBuilder.html)\n    * [captions](resources/captions/struct.CaptionsActions.html)\n      * [*delete*](resources/captions/struct.DeleteRequestBuilder.html), [*download*](resources/captions/struct.DownloadRequestBuilder.html), [*insert*](resources/captions/struct.InsertRequestBuilder.html), [*list*](resources/captions/struct.ListRequestBuilder.html), [*update*](resources/captions/struct.UpdateRequestBuilder.html)\n    * [channel_banners](resources/channel_banners/struct.ChannelBannersActions.html)\n      * [*insert*](resources/channel_banners/struct.InsertRequestBuilder.html)\n    * [channel_sections](resources/channel_sections/struct.ChannelSectionsActions.html)\n      * [*delete*](resources/channel_sections/struct.DeleteRequestBuilder.html), [*insert*](resources/channel_sections/struct.InsertRequestBuilder.html), [*list*](resources/channel_sections/struct.ListRequestBuilder.html), [*update*](resources/channel_sections/struct.UpdateRequestBuilder.html)\n    * [channels](resources/channels/struct.ChannelsActions.html)\n      * [*list*](resources/channels/struct.ListRequestBuilder.html), [*update*](resources/channels/struct.UpdateRequestBuilder.html)\n    * [comment_threads](resources/comment_threads/struct.CommentThreadsActions.html)\n      * [*insert*](resources/comment_threads/struct.InsertRequestBuilder.html), [*list*](resources/comment_threads/struct.ListRequestBuilder.html), [*update*](resources/comment_threads/struct.UpdateRequestBuilder.html)\n    * [comments](resources/comments/struct.CommentsActions.html)\n      * [*delete*](resources/comments/struct.DeleteRequestBuilder.html), [*insert*](resources/comments/struct.InsertRequestBuilder.html), [*list*](resources/comments/struct.ListRequestBuilder.html), [*markAsSpam*](resources/comments/struct.MarkAsSpamRequestBuilder.html), [*setModerationStatus*](resources/comments/struct.SetModerationStatusRequestBuilder.html), [*update*](resources/comments/struct.UpdateRequestBuilder.html)\n    * [guide_categories](resources/guide_categories/struct.GuideCategoriesActions.html)\n      * [*list*](resources/guide_categories/struct.ListRequestBuilder.html)\n    * [i_1_8n_languages](resources/i_1_8n_languages/struct.I18NLanguagesActions.html)\n      * [*list*](resources/i_1_8n_languages/struct.ListRequestBuilder.html)\n    * [i_1_8n_regions](resources/i_1_8n_regions/struct.I18NRegionsActions.html)\n      * [*list*](resources/i_1_8n_regions/struct.ListRequestBuilder.html)\n    * [live_broadcasts](resources/live_broadcasts/struct.LiveBroadcastsActions.html)\n      * [*bind*](resources/live_broadcasts/struct.BindRequestBuilder.html), [*control*](resources/live_broadcasts/struct.ControlRequestBuilder.html), [*delete*](resources/live_broadcasts/struct.DeleteRequestBuilder.html), [*insert*](resources/live_broadcasts/struct.InsertRequestBuilder.html), [*list*](resources/live_broadcasts/struct.ListRequestBuilder.html), [*transition*](resources/live_broadcasts/struct.TransitionRequestBuilder.html), [*update*](resources/live_broadcasts/struct.UpdateRequestBuilder.html)\n    * [live_chat_bans](resources/live_chat_bans/struct.LiveChatBansActions.html)\n      * [*delete*](resources/live_chat_bans/struct.DeleteRequestBuilder.html), [*insert*](resources/live_chat_bans/struct.InsertRequestBuilder.html)\n    * [live_chat_messages](resources/live_chat_messages/struct.LiveChatMessagesActions.html)\n      * [*delete*](resources/live_chat_messages/struct.DeleteRequestBuilder.html), [*insert*](resources/live_chat_messages/struct.InsertRequestBuilder.html), [*list*](resources/live_chat_messages/struct.ListRequestBuilder.html)\n    * [live_chat_moderators](resources/live_chat_moderators/struct.LiveChatModeratorsActions.html)\n      * [*delete*](resources/live_chat_moderators/struct.DeleteRequestBuilder.html), [*insert*](resources/live_chat_moderators/struct.InsertRequestBuilder.html), [*list*](resources/live_chat_moderators/struct.ListRequestBuilder.html)\n    * [live_streams](resources/live_streams/struct.LiveStreamsActions.html)\n      * [*delete*](resources/live_streams/struct.DeleteRequestBuilder.html), [*insert*](resources/live_streams/struct.InsertRequestBuilder.html), [*list*](resources/live_streams/struct.ListRequestBuilder.html), [*update*](resources/live_streams/struct.UpdateRequestBuilder.html)\n    * [members](resources/members/struct.MembersActions.html)\n      * [*list*](resources/members/struct.ListRequestBuilder.html)\n    * [memberships_levels](resources/memberships_levels/struct.MembershipsLevelsActions.html)\n      * [*list*](resources/memberships_levels/struct.ListRequestBuilder.html)\n    * [playlist_items](resources/playlist_items/struct.PlaylistItemsActions.html)\n      * [*delete*](resources/playlist_items/struct.DeleteRequestBuilder.html), [*insert*](resources/playlist_items/struct.InsertRequestBuilder.html), [*list*](resources/playlist_items/struct.ListRequestBuilder.html), [*update*](resources/playlist_items/struct.UpdateRequestBuilder.html)\n    * [playlists](resources/playlists/struct.PlaylistsActions.html)\n      * [*delete*](resources/playlists/struct.DeleteRequestBuilder.html), [*insert*](resources/playlists/struct.InsertRequestBuilder.html), [*list*](resources/playlists/struct.ListRequestBuilder.html), [*update*](resources/playlists/struct.UpdateRequestBuilder.html)\n    * [search](resources/search/struct.SearchActions.html)\n      * [*list*](resources/search/struct.ListRequestBuilder.html)\n    * [sponsors](resources/sponsors/struct.SponsorsActions.html)\n      * [*list*](resources/sponsors/struct.ListRequestBuilder.html)\n    * [subscriptions](resources/subscriptions/struct.SubscriptionsActions.html)\n      * [*delete*](resources/subscriptions/struct.DeleteRequestBuilder.html), [*insert*](resources/subscriptions/struct.InsertRequestBuilder.html), [*list*](resources/subscriptions/struct.ListRequestBuilder.html)\n    * [super_chat_events](resources/super_chat_events/struct.SuperChatEventsActions.html)\n      * [*list*](resources/super_chat_events/struct.ListRequestBuilder.html)\n    * [thumbnails](resources/thumbnails/struct.ThumbnailsActions.html)\n      * [*set*](resources/thumbnails/struct.SetRequestBuilder.html)\n    * [video_abuse_report_reasons](resources/video_abuse_report_reasons/struct.VideoAbuseReportReasonsActions.html)\n      * [*list*](resources/video_abuse_report_reasons/struct.ListRequestBuilder.html)\n    * [video_categories](resources/video_categories/struct.VideoCategoriesActions.html)\n      * [*list*](resources/video_categories/struct.ListRequestBuilder.html)\n    * [videos](resources/videos/struct.VideosActions.html)\n      * [*delete*](resources/videos/struct.DeleteRequestBuilder.html), [*getRating*](resources/videos/struct.GetRatingRequestBuilder.html), [*insert*](resources/videos/struct.InsertRequestBuilder.html), [*list*](resources/videos/struct.ListRequestBuilder.html), [*rate*](resources/videos/struct.RateRequestBuilder.html), [*reportAbuse*](resources/videos/struct.ReportAbuseRequestBuilder.html), [*update*](resources/videos/struct.UpdateRequestBuilder.html)\n    * [watermarks](resources/watermarks/struct.WatermarksActions.html)\n      * [*set*](resources/watermarks/struct.SetRequestBuilder.html), [*unset*](resources/watermarks/struct.UnsetRequestBuilder.html)\n"]
pub mod scopes {
    #[doc = "Manage your YouTube account\n\n`https://www.googleapis.com/auth/youtube`"]
    pub const YOUTUBE: &str = "https://www.googleapis.com/auth/youtube";
    #[doc = "See a list of your current active channel members, their current level, and when they became a member\n\n`https://www.googleapis.com/auth/youtube.channel-memberships.creator`"]
    pub const YOUTUBE_CHANNEL_MEMBERSHIPS_CREATOR: &str =
        "https://www.googleapis.com/auth/youtube.channel-memberships.creator";
    #[doc = "See, edit, and permanently delete your YouTube videos, ratings, comments and captions\n\n`https://www.googleapis.com/auth/youtube.force-ssl`"]
    pub const YOUTUBE_FORCE_SSL: &str = "https://www.googleapis.com/auth/youtube.force-ssl";
    #[doc = "View your YouTube account\n\n`https://www.googleapis.com/auth/youtube.readonly`"]
    pub const YOUTUBE_READONLY: &str = "https://www.googleapis.com/auth/youtube.readonly";
    #[doc = "Manage your YouTube videos\n\n`https://www.googleapis.com/auth/youtube.upload`"]
    pub const YOUTUBE_UPLOAD: &str = "https://www.googleapis.com/auth/youtube.upload";
    #[doc = "View and manage your assets and associated content on YouTube\n\n`https://www.googleapis.com/auth/youtubepartner`"]
    pub const YOUTUBEPARTNER: &str = "https://www.googleapis.com/auth/youtubepartner";
    #[doc = "View private information of your YouTube channel relevant during the audit process with a YouTube partner\n\n`https://www.googleapis.com/auth/youtubepartner-channel-audit`"]
    pub const YOUTUBEPARTNER_CHANNEL_AUDIT: &str =
        "https://www.googleapis.com/auth/youtubepartner-channel-audit";
}
pub mod schemas {
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct AccessPolicy {
        #[doc = "The value of <code>allowed</code> indicates whether the access to the\npolicy is allowed or denied by default."]
        #[serde(
            rename = "allowed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub allowed: ::std::option::Option<bool>,
        #[doc = "A list of region codes that identify countries where the default policy do\nnot apply."]
        #[serde(
            rename = "exception",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub exception: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for AccessPolicy {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for AccessPolicy {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Activity {
        #[doc = "The <code>contentDetails</code> object contains information about the\ncontent associated with the activity. For example, if the\n<code>snippet.type</code> value is <code>videoRated</code>, then the\n<code>contentDetails</code> object's content identifies the rated video."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::ActivityContentDetails>,
        #[doc = "Etag of this resource"]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the activity."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#activity\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the\nactivity, including the activity's type and group ID."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::ActivitySnippet>,
    }
    impl ::google_field_selector::FieldSelector for Activity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Activity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetails {
        #[doc = "The <code>bulletin</code> object contains details about a channel\nbulletin post. This object is only present if the\n<code>snippet.type</code> is <code>bulletin</code>."]
        #[serde(
            rename = "bulletin",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bulletin: ::std::option::Option<crate::schemas::ActivityContentDetailsBulletin>,
        #[doc = "The <code>channelItem</code> object contains details about a resource\nwhich was added to a channel. This property is only present if the\n<code>snippet.type</code> is <code>channelItem</code>."]
        #[serde(
            rename = "channelItem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_item: ::std::option::Option<crate::schemas::ActivityContentDetailsChannelItem>,
        #[doc = "The <code>comment</code> object contains information about a resource\nthat received a comment. This property is only present if the\n<code>snippet.type</code> is <code>comment</code>."]
        #[serde(
            rename = "comment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment: ::std::option::Option<crate::schemas::ActivityContentDetailsComment>,
        #[doc = "The <code>favorite</code> object contains information about a video that\nwas marked as a favorite video. This property is only present if the\n<code>snippet.type</code> is <code>favorite</code>."]
        #[serde(
            rename = "favorite",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub favorite: ::std::option::Option<crate::schemas::ActivityContentDetailsFavorite>,
        #[doc = "The <code>like</code> object contains information about a resource that\nreceived a positive (like) rating. This property is only present if\nthe <code>snippet.type</code> is <code>like</code>."]
        #[serde(
            rename = "like",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub like: ::std::option::Option<crate::schemas::ActivityContentDetailsLike>,
        #[doc = "The <code>playlistItem</code> object contains information about a\nnew playlist item. This property is only present if the\n<code>snippet.type</code> is <code>playlistItem</code>."]
        #[serde(
            rename = "playlistItem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_item:
            ::std::option::Option<crate::schemas::ActivityContentDetailsPlaylistItem>,
        #[doc = "The <code>promotedItem</code> object contains details about a resource\nwhich is being promoted. This property is only present if the\n<code>snippet.type</code> is <code>promotedItem</code>."]
        #[serde(
            rename = "promotedItem",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub promoted_item:
            ::std::option::Option<crate::schemas::ActivityContentDetailsPromotedItem>,
        #[doc = "The <code>recommendation</code> object contains information about a\nrecommended resource. This property is only present if the\n<code>snippet.type</code> is <code>recommendation</code>."]
        #[serde(
            rename = "recommendation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recommendation:
            ::std::option::Option<crate::schemas::ActivityContentDetailsRecommendation>,
        #[doc = "The <code>social</code> object contains details about a social network\npost. This property is only present if the <code>snippet.type</code>\nis <code>social</code>."]
        #[serde(
            rename = "social",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub social: ::std::option::Option<crate::schemas::ActivityContentDetailsSocial>,
        #[doc = "The <code>subscription</code> object contains information about a\nchannel that a user subscribed to. This property is only\npresent if the <code>snippet.type</code> is <code>subscription</code>."]
        #[serde(
            rename = "subscription",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub subscription: ::std::option::Option<crate::schemas::ActivityContentDetailsSubscription>,
        #[doc = "The <code>upload</code> object contains information about the uploaded\nvideo. This property is only present if the <code>snippet.type</code>\nis <code>upload</code>."]
        #[serde(
            rename = "upload",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub upload: ::std::option::Option<crate::schemas::ActivityContentDetailsUpload>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsBulletin {
        #[doc = "The <code>resourceId</code> object contains information that\nidentifies the resource associated with a bulletin post.\n@mutable youtube.activities.insert"]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsBulletin {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsBulletin {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsChannelItem {
        #[doc = "The <code>resourceId</code> object contains information that\nidentifies the resource that was added to the channel."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsChannelItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsChannelItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsComment {
        #[doc = "The <code>resourceId</code> object contains information that\nidentifies the resource associated with the comment."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsComment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsComment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsFavorite {
        #[doc = "The <code>resourceId</code> object contains information that\nidentifies the resource that was marked as a favorite."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsFavorite {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsFavorite {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsLike {
        #[doc = "The <code>resourceId</code> object contains information that identifies\nthe rated resource."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsLike {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsLike {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsPlaylistItem {
        #[doc = "The value that YouTube uses to uniquely identify the playlist."]
        #[serde(
            rename = "playlistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_id: ::std::option::Option<String>,
        #[doc = "ID of the item within the playlist."]
        #[serde(
            rename = "playlistItemId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_item_id: ::std::option::Option<String>,
        #[doc = "The <code>resourceId</code> object contains information about the\nresource that was added to the playlist."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsPlaylistItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsPlaylistItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsPromotedItem {
        #[doc = "The URL the client should fetch to request a promoted item."]
        #[serde(
            rename = "adTag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ad_tag: ::std::option::Option<String>,
        #[doc = "The URL the client should ping to indicate that the user clicked through\non this promoted item."]
        #[serde(
            rename = "clickTrackingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub click_tracking_url: ::std::option::Option<String>,
        #[doc = "The URL the client should ping to indicate that the user was shown this\npromoted item."]
        #[serde(
            rename = "creativeViewUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creative_view_url: ::std::option::Option<String>,
        #[doc = "The type of call-to-action, a message to the user indicating action that\ncan be taken."]
        #[serde(
            rename = "ctaType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cta_type:
            ::std::option::Option<crate::schemas::ActivityContentDetailsPromotedItemCtaType>,
        #[doc = "The custom call-to-action button text. If specified, it will override\nthe default button text for the cta_type."]
        #[serde(
            rename = "customCtaButtonText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_cta_button_text: ::std::option::Option<String>,
        #[doc = "The text description to accompany the promoted item."]
        #[serde(
            rename = "descriptionText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description_text: ::std::option::Option<String>,
        #[doc = "The URL the client should direct the user to, if the user chooses to\nvisit the advertiser's website."]
        #[serde(
            rename = "destinationUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub destination_url: ::std::option::Option<String>,
        #[doc = "The list of forecasting URLs. The client should ping all of these URLs\nwhen a promoted item is not available, to indicate that a promoted item\ncould have been shown."]
        #[serde(
            rename = "forecastingUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub forecasting_url: ::std::option::Option<Vec<String>>,
        #[doc = "The list of impression URLs. The client should ping all of these URLs to\nindicate that the user was shown this promoted item."]
        #[serde(
            rename = "impressionUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub impression_url: ::std::option::Option<Vec<String>>,
        #[doc = "The ID that YouTube uses to uniquely identify the promoted video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsPromotedItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsPromotedItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivityContentDetailsPromotedItemCtaType {
        CtaTypeUnspecified,
        VisitAdvertiserSite,
    }
    impl ActivityContentDetailsPromotedItemCtaType {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivityContentDetailsPromotedItemCtaType::CtaTypeUnspecified => {
                    "ctaTypeUnspecified"
                }
                ActivityContentDetailsPromotedItemCtaType::VisitAdvertiserSite => {
                    "visitAdvertiserSite"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivityContentDetailsPromotedItemCtaType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivityContentDetailsPromotedItemCtaType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActivityContentDetailsPromotedItemCtaType, ()> {
            Ok(match s {
                "ctaTypeUnspecified" => {
                    ActivityContentDetailsPromotedItemCtaType::CtaTypeUnspecified
                }
                "visitAdvertiserSite" => {
                    ActivityContentDetailsPromotedItemCtaType::VisitAdvertiserSite
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivityContentDetailsPromotedItemCtaType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivityContentDetailsPromotedItemCtaType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivityContentDetailsPromotedItemCtaType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ctaTypeUnspecified" => {
                    ActivityContentDetailsPromotedItemCtaType::CtaTypeUnspecified
                }
                "visitAdvertiserSite" => {
                    ActivityContentDetailsPromotedItemCtaType::VisitAdvertiserSite
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsPromotedItemCtaType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsPromotedItemCtaType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsRecommendation {
        #[doc = "The reason that the resource is recommended to the user."]
        #[serde(
            rename = "reason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reason:
            ::std::option::Option<crate::schemas::ActivityContentDetailsRecommendationReason>,
        #[doc = "The <code>resourceId</code> object contains information that\nidentifies the recommended resource."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "The <code>seedResourceId</code> object contains information about\nthe resource that caused the recommendation."]
        #[serde(
            rename = "seedResourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub seed_resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsRecommendation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsRecommendation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivityContentDetailsRecommendationReason {
        ReasonUnspecified,
        VideoFavorited,
        VideoLiked,
        VideoWatched,
    }
    impl ActivityContentDetailsRecommendationReason {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivityContentDetailsRecommendationReason::ReasonUnspecified => {
                    "reasonUnspecified"
                }
                ActivityContentDetailsRecommendationReason::VideoFavorited => "videoFavorited",
                ActivityContentDetailsRecommendationReason::VideoLiked => "videoLiked",
                ActivityContentDetailsRecommendationReason::VideoWatched => "videoWatched",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivityContentDetailsRecommendationReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivityContentDetailsRecommendationReason {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<ActivityContentDetailsRecommendationReason, ()> {
            Ok(match s {
                "reasonUnspecified" => {
                    ActivityContentDetailsRecommendationReason::ReasonUnspecified
                }
                "videoFavorited" => ActivityContentDetailsRecommendationReason::VideoFavorited,
                "videoLiked" => ActivityContentDetailsRecommendationReason::VideoLiked,
                "videoWatched" => ActivityContentDetailsRecommendationReason::VideoWatched,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivityContentDetailsRecommendationReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivityContentDetailsRecommendationReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivityContentDetailsRecommendationReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "reasonUnspecified" => {
                    ActivityContentDetailsRecommendationReason::ReasonUnspecified
                }
                "videoFavorited" => ActivityContentDetailsRecommendationReason::VideoFavorited,
                "videoLiked" => ActivityContentDetailsRecommendationReason::VideoLiked,
                "videoWatched" => ActivityContentDetailsRecommendationReason::VideoWatched,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsRecommendationReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsRecommendationReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsSocial {
        #[doc = "The author of the social network post."]
        #[serde(
            rename = "author",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author: ::std::option::Option<String>,
        #[doc = "An image of the post's author."]
        #[serde(
            rename = "imageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_url: ::std::option::Option<String>,
        #[doc = "The name of the social network."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ActivityContentDetailsSocialType>,
        #[doc = "The URL of the social network post."]
        #[serde(
            rename = "referenceUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reference_url: ::std::option::Option<String>,
        #[doc = "The <code>resourceId</code> object encapsulates information that\nidentifies the resource associated with a social network post."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsSocial {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsSocial {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivityContentDetailsSocialType {
        Facebook,
        GooglePlus,
        Twitter,
        TypeUnspecified,
    }
    impl ActivityContentDetailsSocialType {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivityContentDetailsSocialType::Facebook => "facebook",
                ActivityContentDetailsSocialType::GooglePlus => "googlePlus",
                ActivityContentDetailsSocialType::Twitter => "twitter",
                ActivityContentDetailsSocialType::TypeUnspecified => "typeUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivityContentDetailsSocialType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivityContentDetailsSocialType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ActivityContentDetailsSocialType, ()> {
            Ok(match s {
                "facebook" => ActivityContentDetailsSocialType::Facebook,
                "googlePlus" => ActivityContentDetailsSocialType::GooglePlus,
                "twitter" => ActivityContentDetailsSocialType::Twitter,
                "typeUnspecified" => ActivityContentDetailsSocialType::TypeUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivityContentDetailsSocialType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivityContentDetailsSocialType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivityContentDetailsSocialType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "facebook" => ActivityContentDetailsSocialType::Facebook,
                "googlePlus" => ActivityContentDetailsSocialType::GooglePlus,
                "twitter" => ActivityContentDetailsSocialType::Twitter,
                "typeUnspecified" => ActivityContentDetailsSocialType::TypeUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsSocialType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsSocialType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsSubscription {
        #[doc = "The <code>resourceId</code> object contains information that\nidentifies the resource that the user subscribed to."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsSubscription {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsSubscription {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityContentDetailsUpload {
        #[doc = "The ID that YouTube uses to uniquely identify the uploaded video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivityContentDetailsUpload {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityContentDetailsUpload {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivityListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Activity>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#activityListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivityListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivityListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ActivitySnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel associated\nwith the activity."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel responsible for this activity"]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The description of the resource primarily associated with the activity.\n@mutable youtube.activities.insert"]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The group ID associated with the activity. A group ID identifies user\nevents that are associated with the same user and resource. For example,\nif a user rates a video and marks the same video as a favorite, the\nentries for those events would have the same group ID in the user's\nactivity feed. In your user interface, you can avoid repetition by\ngrouping events with the same <code>groupId</code> value."]
        #[serde(
            rename = "groupId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub group_id: ::std::option::Option<String>,
        #[doc = "The date and time that the video was uploaded. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The type of activity that the resource describes."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ActivitySnippetType>,
        #[doc = "A map of thumbnail images associated with the resource that is primarily\nassociated with the activity. For each object in the map, the key is the\nname of the thumbnail image, and the value is an object that contains\nother information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The title of the resource primarily associated with the activity."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ActivitySnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivitySnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ActivitySnippetType {
        Bulletin,
        ChannelItem,
        Comment,
        Favorite,
        Like,
        PlaylistItem,
        PromotedItem,
        Recommendation,
        Social,
        Subscription,
        TypeUnspecified,
        Upload,
    }
    impl ActivitySnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                ActivitySnippetType::Bulletin => "bulletin",
                ActivitySnippetType::ChannelItem => "channelItem",
                ActivitySnippetType::Comment => "comment",
                ActivitySnippetType::Favorite => "favorite",
                ActivitySnippetType::Like => "like",
                ActivitySnippetType::PlaylistItem => "playlistItem",
                ActivitySnippetType::PromotedItem => "promotedItem",
                ActivitySnippetType::Recommendation => "recommendation",
                ActivitySnippetType::Social => "social",
                ActivitySnippetType::Subscription => "subscription",
                ActivitySnippetType::TypeUnspecified => "typeUnspecified",
                ActivitySnippetType::Upload => "upload",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ActivitySnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ActivitySnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ActivitySnippetType, ()> {
            Ok(match s {
                "bulletin" => ActivitySnippetType::Bulletin,
                "channelItem" => ActivitySnippetType::ChannelItem,
                "comment" => ActivitySnippetType::Comment,
                "favorite" => ActivitySnippetType::Favorite,
                "like" => ActivitySnippetType::Like,
                "playlistItem" => ActivitySnippetType::PlaylistItem,
                "promotedItem" => ActivitySnippetType::PromotedItem,
                "recommendation" => ActivitySnippetType::Recommendation,
                "social" => ActivitySnippetType::Social,
                "subscription" => ActivitySnippetType::Subscription,
                "typeUnspecified" => ActivitySnippetType::TypeUnspecified,
                "upload" => ActivitySnippetType::Upload,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ActivitySnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ActivitySnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ActivitySnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bulletin" => ActivitySnippetType::Bulletin,
                "channelItem" => ActivitySnippetType::ChannelItem,
                "comment" => ActivitySnippetType::Comment,
                "favorite" => ActivitySnippetType::Favorite,
                "like" => ActivitySnippetType::Like,
                "playlistItem" => ActivitySnippetType::PlaylistItem,
                "promotedItem" => ActivitySnippetType::PromotedItem,
                "recommendation" => ActivitySnippetType::Recommendation,
                "social" => ActivitySnippetType::Social,
                "subscription" => ActivitySnippetType::Subscription,
                "typeUnspecified" => ActivitySnippetType::TypeUnspecified,
                "upload" => ActivitySnippetType::Upload,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ActivitySnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ActivitySnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Caption {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the caption track."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#caption\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the caption."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::CaptionSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Caption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Caption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CaptionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of captions that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Caption>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#captionListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CaptionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CaptionSnippet {
        #[doc = "The type of audio track associated with the caption track."]
        #[serde(
            rename = "audioTrackType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audio_track_type: ::std::option::Option<crate::schemas::CaptionSnippetAudioTrackType>,
        #[doc = "The reason that YouTube failed to process the caption track. This\nproperty is only present if the <code><a href=\"#state\">state</a></code>\nproperty's value is <code>failed</code>."]
        #[serde(
            rename = "failureReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub failure_reason: ::std::option::Option<crate::schemas::CaptionSnippetFailureReason>,
        #[doc = "Indicates whether YouTube synchronized the caption track to the audio\ntrack in the video. The value will be <code>true</code> if a sync was\nexplicitly requested when the caption track was uploaded. For example,\nwhen calling the <code>captions.insert</code> or\n<code>captions.update</code> methods, you can set the <code>sync</code>\nparameter to <code>true</code> to instruct YouTube to sync the uploaded\ntrack to the video. If the value is <code>false</code>, YouTube uses\nthe time codes in the uploaded caption track to determine when to display\ncaptions."]
        #[serde(
            rename = "isAutoSynced",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_auto_synced: ::std::option::Option<bool>,
        #[doc = "Indicates whether the track contains closed captions for the deaf\nand hard of hearing. The default value is <code>false</code>."]
        #[serde(
            rename = "isCC",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_cc: ::std::option::Option<bool>,
        #[doc = "Indicates whether the caption track is a draft. If the value is\n<code>true</code>, then the track is not publicly visible.\nThe default value is <code>false</code>.\n@mutable youtube.captions.insert youtube.captions.update"]
        #[serde(
            rename = "isDraft",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_draft: ::std::option::Option<bool>,
        #[doc = "Indicates whether caption track is formatted for \"easy reader,\"\nmeaning it is at a third-grade level for language learners.\nThe default value is <code>false</code>."]
        #[serde(
            rename = "isEasyReader",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_easy_reader: ::std::option::Option<bool>,
        #[doc = "Indicates whether the caption track uses large text for the\nvision-impaired. The default value is <code>false</code>."]
        #[serde(
            rename = "isLarge",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_large: ::std::option::Option<bool>,
        #[doc = "The language of the caption track. The property value is a\n<a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">BCP-47</a>\nlanguage tag."]
        #[serde(
            rename = "language",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language: ::std::option::Option<String>,
        #[doc = "The date and time when the caption track was last updated. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "lastUpdated",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub last_updated: ::std::option::Option<String>,
        #[doc = "The name of the caption track. The name is intended to be visible\nto the user as an option during playback."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
        #[doc = "The caption track's status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::CaptionSnippetStatus>,
        #[doc = "The caption track's type."]
        #[serde(
            rename = "trackKind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub track_kind: ::std::option::Option<crate::schemas::CaptionSnippetTrackKind>,
        #[doc = "The ID that YouTube uses to uniquely identify the video associated\nwith the caption track.\n@mutable youtube.captions.insert"]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetAudioTrackType {
        Commentary,
        Descriptive,
        Primary,
        Unknown,
    }
    impl CaptionSnippetAudioTrackType {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetAudioTrackType::Commentary => "commentary",
                CaptionSnippetAudioTrackType::Descriptive => "descriptive",
                CaptionSnippetAudioTrackType::Primary => "primary",
                CaptionSnippetAudioTrackType::Unknown => "unknown",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetAudioTrackType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetAudioTrackType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetAudioTrackType, ()> {
            Ok(match s {
                "commentary" => CaptionSnippetAudioTrackType::Commentary,
                "descriptive" => CaptionSnippetAudioTrackType::Descriptive,
                "primary" => CaptionSnippetAudioTrackType::Primary,
                "unknown" => CaptionSnippetAudioTrackType::Unknown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetAudioTrackType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetAudioTrackType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetAudioTrackType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "commentary" => CaptionSnippetAudioTrackType::Commentary,
                "descriptive" => CaptionSnippetAudioTrackType::Descriptive,
                "primary" => CaptionSnippetAudioTrackType::Primary,
                "unknown" => CaptionSnippetAudioTrackType::Unknown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetAudioTrackType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetAudioTrackType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetFailureReason {
        ProcessingFailed,
        UnknownFormat,
        UnsupportedFormat,
    }
    impl CaptionSnippetFailureReason {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetFailureReason::ProcessingFailed => "processingFailed",
                CaptionSnippetFailureReason::UnknownFormat => "unknownFormat",
                CaptionSnippetFailureReason::UnsupportedFormat => "unsupportedFormat",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetFailureReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetFailureReason {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetFailureReason, ()> {
            Ok(match s {
                "processingFailed" => CaptionSnippetFailureReason::ProcessingFailed,
                "unknownFormat" => CaptionSnippetFailureReason::UnknownFormat,
                "unsupportedFormat" => CaptionSnippetFailureReason::UnsupportedFormat,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetFailureReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetFailureReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetFailureReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "processingFailed" => CaptionSnippetFailureReason::ProcessingFailed,
                "unknownFormat" => CaptionSnippetFailureReason::UnknownFormat,
                "unsupportedFormat" => CaptionSnippetFailureReason::UnsupportedFormat,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetFailureReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetFailureReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetStatus {
        Failed,
        Serving,
        Syncing,
    }
    impl CaptionSnippetStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetStatus::Failed => "failed",
                CaptionSnippetStatus::Serving => "serving",
                CaptionSnippetStatus::Syncing => "syncing",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetStatus, ()> {
            Ok(match s {
                "failed" => CaptionSnippetStatus::Failed,
                "serving" => CaptionSnippetStatus::Serving,
                "syncing" => CaptionSnippetStatus::Syncing,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "failed" => CaptionSnippetStatus::Failed,
                "serving" => CaptionSnippetStatus::Serving,
                "syncing" => CaptionSnippetStatus::Syncing,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CaptionSnippetTrackKind {
        Asr,
        Forced,
        Standard,
    }
    impl CaptionSnippetTrackKind {
        pub fn as_str(self) -> &'static str {
            match self {
                CaptionSnippetTrackKind::Asr => "ASR",
                CaptionSnippetTrackKind::Forced => "forced",
                CaptionSnippetTrackKind::Standard => "standard",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CaptionSnippetTrackKind {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CaptionSnippetTrackKind {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CaptionSnippetTrackKind, ()> {
            Ok(match s {
                "ASR" => CaptionSnippetTrackKind::Asr,
                "forced" => CaptionSnippetTrackKind::Forced,
                "standard" => CaptionSnippetTrackKind::Standard,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CaptionSnippetTrackKind {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CaptionSnippetTrackKind {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CaptionSnippetTrackKind {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ASR" => CaptionSnippetTrackKind::Asr,
                "forced" => CaptionSnippetTrackKind::Forced,
                "standard" => CaptionSnippetTrackKind::Standard,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CaptionSnippetTrackKind {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CaptionSnippetTrackKind {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CdnSettings {
        #[doc = "The format of the video stream that you are sending to Youtube. <br><br>"]
        #[serde(
            rename = "format",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub format: ::std::option::Option<String>,
        #[doc = "The frame rate of the inbound video data."]
        #[serde(
            rename = "frameRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frame_rate: ::std::option::Option<crate::schemas::CdnSettingsFrameRate>,
        #[doc = "The <code>ingestionInfo</code> object contains information that YouTube\nprovides that you need to transmit your RTMP or HTTP stream to YouTube."]
        #[serde(
            rename = "ingestionInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ingestion_info: ::std::option::Option<crate::schemas::IngestionInfo>,
        #[doc = "The method or protocol used to transmit the video stream."]
        #[serde(
            rename = "ingestionType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ingestion_type: ::std::option::Option<crate::schemas::CdnSettingsIngestionType>,
        #[doc = "The resolution of the inbound video data."]
        #[serde(
            rename = "resolution",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resolution: ::std::option::Option<crate::schemas::CdnSettingsResolution>,
    }
    impl ::google_field_selector::FieldSelector for CdnSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CdnSettingsFrameRate {
        Variable,
        _30Fps,
        _60Fps,
    }
    impl CdnSettingsFrameRate {
        pub fn as_str(self) -> &'static str {
            match self {
                CdnSettingsFrameRate::Variable => "variable",
                CdnSettingsFrameRate::_30Fps => "30fps",
                CdnSettingsFrameRate::_60Fps => "60fps",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CdnSettingsFrameRate {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CdnSettingsFrameRate {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CdnSettingsFrameRate, ()> {
            Ok(match s {
                "variable" => CdnSettingsFrameRate::Variable,
                "30fps" => CdnSettingsFrameRate::_30Fps,
                "60fps" => CdnSettingsFrameRate::_60Fps,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CdnSettingsFrameRate {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CdnSettingsFrameRate {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CdnSettingsFrameRate {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "variable" => CdnSettingsFrameRate::Variable,
                "30fps" => CdnSettingsFrameRate::_30Fps,
                "60fps" => CdnSettingsFrameRate::_60Fps,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CdnSettingsFrameRate {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettingsFrameRate {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CdnSettingsIngestionType {
        Dash,
        Hls,
        Rtmp,
        Webrtc,
    }
    impl CdnSettingsIngestionType {
        pub fn as_str(self) -> &'static str {
            match self {
                CdnSettingsIngestionType::Dash => "dash",
                CdnSettingsIngestionType::Hls => "hls",
                CdnSettingsIngestionType::Rtmp => "rtmp",
                CdnSettingsIngestionType::Webrtc => "webrtc",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CdnSettingsIngestionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CdnSettingsIngestionType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CdnSettingsIngestionType, ()> {
            Ok(match s {
                "dash" => CdnSettingsIngestionType::Dash,
                "hls" => CdnSettingsIngestionType::Hls,
                "rtmp" => CdnSettingsIngestionType::Rtmp,
                "webrtc" => CdnSettingsIngestionType::Webrtc,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CdnSettingsIngestionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CdnSettingsIngestionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CdnSettingsIngestionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "dash" => CdnSettingsIngestionType::Dash,
                "hls" => CdnSettingsIngestionType::Hls,
                "rtmp" => CdnSettingsIngestionType::Rtmp,
                "webrtc" => CdnSettingsIngestionType::Webrtc,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CdnSettingsIngestionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettingsIngestionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CdnSettingsResolution {
        Variable,
        _1080P,
        _1440P,
        _2160P,
        _240P,
        _360P,
        _480P,
        _720P,
    }
    impl CdnSettingsResolution {
        pub fn as_str(self) -> &'static str {
            match self {
                CdnSettingsResolution::Variable => "variable",
                CdnSettingsResolution::_1080P => "1080p",
                CdnSettingsResolution::_1440P => "1440p",
                CdnSettingsResolution::_2160P => "2160p",
                CdnSettingsResolution::_240P => "240p",
                CdnSettingsResolution::_360P => "360p",
                CdnSettingsResolution::_480P => "480p",
                CdnSettingsResolution::_720P => "720p",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CdnSettingsResolution {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CdnSettingsResolution {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CdnSettingsResolution, ()> {
            Ok(match s {
                "variable" => CdnSettingsResolution::Variable,
                "1080p" => CdnSettingsResolution::_1080P,
                "1440p" => CdnSettingsResolution::_1440P,
                "2160p" => CdnSettingsResolution::_2160P,
                "240p" => CdnSettingsResolution::_240P,
                "360p" => CdnSettingsResolution::_360P,
                "480p" => CdnSettingsResolution::_480P,
                "720p" => CdnSettingsResolution::_720P,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CdnSettingsResolution {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CdnSettingsResolution {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CdnSettingsResolution {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "variable" => CdnSettingsResolution::Variable,
                "1080p" => CdnSettingsResolution::_1080P,
                "1440p" => CdnSettingsResolution::_1440P,
                "2160p" => CdnSettingsResolution::_2160P,
                "240p" => CdnSettingsResolution::_240P,
                "360p" => CdnSettingsResolution::_360P,
                "480p" => CdnSettingsResolution::_480P,
                "720p" => CdnSettingsResolution::_720P,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CdnSettingsResolution {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CdnSettingsResolution {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Channel {
        #[doc = "The <code>auditionDetails</code> object encapsulates channel data\nthat is relevant for YouTube Partners during the audition process."]
        #[serde(
            rename = "auditDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audit_details: ::std::option::Option<crate::schemas::ChannelAuditDetails>,
        #[doc = "The <code>brandingSettings</code> object encapsulates information about\nthe branding of the channel."]
        #[serde(
            rename = "brandingSettings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub branding_settings: ::std::option::Option<crate::schemas::ChannelBrandingSettings>,
        #[doc = "The <code>contentDetails</code> object encapsulates information about the\nchannel's content."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::ChannelContentDetails>,
        #[doc = "The <code>contentOwnerDetails</code> object encapsulates channel data\nthat is relevant for YouTube Partners linked with the channel."]
        #[serde(
            rename = "contentOwnerDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_owner_details:
            ::std::option::Option<crate::schemas::ChannelContentOwnerDetails>,
        #[doc = "The <code>conversionPings</code> object encapsulates information about\nconversion pings that need to be respected by the channel."]
        #[serde(
            rename = "conversionPings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_pings: ::std::option::Option<crate::schemas::ChannelConversionPings>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "The <code>invideoPromotion</code> object encapsulates information about\npromotion campaign associated with the channel."]
        #[serde(
            rename = "invideoPromotion",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub invideo_promotion: ::std::option::Option<crate::schemas::InvideoPromotion>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#channel\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Localizations for different languages"]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::ChannelLocalization>,
        >,
        #[doc = "The <code>snippet</code> object contains basic details about the channel,\nsuch as its title, description, and thumbnail images."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::ChannelSnippet>,
        #[doc = "The <code>statistics</code> object encapsulates statistics for the channel."]
        #[serde(
            rename = "statistics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statistics: ::std::option::Option<crate::schemas::ChannelStatistics>,
        #[doc = "The <code>status</code> object encapsulates information about the privacy\nstatus of the channel."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::ChannelStatus>,
        #[doc = "The <code>topicDetails</code> object encapsulates information about\n<a href=\"http://www.freebase.com\">Freebase</a> topics associated with the\nchannel."]
        #[serde(
            rename = "topicDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_details: ::std::option::Option<crate::schemas::ChannelTopicDetails>,
    }
    impl ::google_field_selector::FieldSelector for Channel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Channel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelAuditDetails {
        #[doc = "Whether or not the channel respects the community guidelines."]
        #[serde(
            rename = "communityGuidelinesGoodStanding",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub community_guidelines_good_standing: ::std::option::Option<bool>,
        #[doc = "Whether or not the channel has any unresolved claims."]
        #[serde(
            rename = "contentIdClaimsGoodStanding",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_id_claims_good_standing: ::std::option::Option<bool>,
        #[doc = "Whether or not the channel has any copyright strikes."]
        #[serde(
            rename = "copyrightStrikesGoodStanding",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub copyright_strikes_good_standing: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ChannelAuditDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelAuditDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelBannerResource {
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#channelBannerResource\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The URL of this banner image."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelBannerResource {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelBannerResource {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelBrandingSettings {
        #[doc = "Branding properties for the channel view."]
        #[serde(
            rename = "channel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel: ::std::option::Option<crate::schemas::ChannelSettings>,
        #[doc = "Additional experimental branding properties."]
        #[serde(
            rename = "hints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hints: ::std::option::Option<Vec<crate::schemas::PropertyValue>>,
        #[doc = "Branding properties for branding images."]
        #[serde(
            rename = "image",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image: ::std::option::Option<crate::schemas::ImageSettings>,
        #[doc = "Branding properties for the watch page."]
        #[serde(
            rename = "watch",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch: ::std::option::Option<crate::schemas::WatchSettings>,
    }
    impl ::google_field_selector::FieldSelector for ChannelBrandingSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelBrandingSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelContentDetails {
        #[serde(
            rename = "relatedPlaylists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub related_playlists:
            ::std::option::Option<crate::schemas::ChannelContentDetailsRelatedPlaylists>,
    }
    impl ::google_field_selector::FieldSelector for ChannelContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelContentDetailsRelatedPlaylists {
        #[doc = "The ID of the playlist that contains the channel\"s favorite videos. Use\nthe <code> <a\nhref=\"/youtube/v3/docs/playlistItems/insert\">playlistItems.insert</a></code>\nand <code> <a\nhref=\"/youtube/v3/docs/playlistItems/delete\">playlistItems.delete</a></code>\nto add or remove items from that list."]
        #[serde(
            rename = "favorites",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub favorites: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s liked videos. Use the\n<code> <a href=\"/youtube/v3/docs/playlistItems/insert\">\nplaylistItems.insert</a></code> and <code> <a\nhref=\"/youtube/v3/docs/playlistItems/delete\">playlistItems.delete</a></code>\nto add or remove items from that list."]
        #[serde(
            rename = "likes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub likes: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s uploaded videos. Use\nthe <code> <a\nhref=\"/youtube/v3/docs/videos/insert\">videos.insert</a></code> method to\nupload new videos and the <code><a\nhref=\"/youtube/v3/docs/videos/delete\">videos.delete</a></code> method to\ndelete previously uploaded videos."]
        #[serde(
            rename = "uploads",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub uploads: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s watch history. Use the\n<code> <a\nhref=\"/youtube/v3/docs/playlistItems/insert\">playlistItems.insert</a></code>\nand <code> <a\nhref=\"/youtube/v3/docs/playlistItems/delete\">playlistItems.delete</a></code>\nto add or remove items from that list."]
        #[serde(
            rename = "watchHistory",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch_history: ::std::option::Option<String>,
        #[doc = "The ID of the playlist that contains the channel\"s watch later playlist.\nUse the <code><a\nhref=\"/youtube/v3/docs/playlistItems/insert\">playlistItems.insert</a></code>\nand <code> <a\nhref=\"/youtube/v3/docs/playlistItems/delete\">playlistItems.delete</a></code>\nto add or remove items from that list."]
        #[serde(
            rename = "watchLater",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch_later: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelContentDetailsRelatedPlaylists {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelContentDetailsRelatedPlaylists {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelContentOwnerDetails {
        #[doc = "The ID of the content owner linked to the channel."]
        #[serde(
            rename = "contentOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_owner: ::std::option::Option<String>,
        #[doc = "The date and time of when the channel was linked to the content owner.\nThe value is specified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO\n8601</a>\nformat."]
        #[serde(
            rename = "timeLinked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub time_linked: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelContentOwnerDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelContentOwnerDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelConversionPing {
        #[doc = "Defines the context of the ping."]
        #[serde(
            rename = "context",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub context: ::std::option::Option<crate::schemas::ChannelConversionPingContext>,
        #[doc = "The url (without the schema) that the player shall send the ping to.\nIt's at caller's descretion to decide which schema to use (http vs https)\nExample of a returned url: //googleads.g.doubleclick.net/pagead/\nviewthroughconversion/962985656/?data=path%3DtHe_path%3Btype%3D\ncview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&labe=default\nThe caller must append biscotti authentication (ms param in case of\nmobile, for example) to this ping."]
        #[serde(
            rename = "conversionUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub conversion_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelConversionPing {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelConversionPing {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelConversionPingContext {
        Cview,
        Subscribe,
        Unsubscribe,
    }
    impl ChannelConversionPingContext {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelConversionPingContext::Cview => "cview",
                ChannelConversionPingContext::Subscribe => "subscribe",
                ChannelConversionPingContext::Unsubscribe => "unsubscribe",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelConversionPingContext {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelConversionPingContext {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelConversionPingContext, ()> {
            Ok(match s {
                "cview" => ChannelConversionPingContext::Cview,
                "subscribe" => ChannelConversionPingContext::Subscribe,
                "unsubscribe" => ChannelConversionPingContext::Unsubscribe,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelConversionPingContext {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelConversionPingContext {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelConversionPingContext {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cview" => ChannelConversionPingContext::Cview,
                "subscribe" => ChannelConversionPingContext::Subscribe,
                "unsubscribe" => ChannelConversionPingContext::Unsubscribe,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelConversionPingContext {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelConversionPingContext {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelConversionPings {
        #[doc = "Pings that the app shall fire (authenticated by biscotti cookie). Each ping\nhas a context, in which the app must fire the ping, and a url identifying\nthe ping."]
        #[serde(
            rename = "pings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pings: ::std::option::Option<Vec<crate::schemas::ChannelConversionPing>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelConversionPings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelConversionPings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Channel>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#channelListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelLocalization {
        #[doc = "The localized strings for channel's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The localized strings for channel's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelProfileDetails {
        #[doc = "The YouTube channel ID."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The channel's URL."]
        #[serde(
            rename = "channelUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_url: ::std::option::Option<String>,
        #[doc = "The channel's display name."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "The channels's avatar URL."]
        #[serde(
            rename = "profileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub profile_image_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelProfileDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelProfileDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSection {
        #[doc = "The <code>contentDetails</code> object contains details about the channel\nsection content, such as a list of playlists or channels featured in the\nsection."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::ChannelSectionContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel section."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#channelSection\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Localizations for different languages"]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::ChannelSectionLocalization>,
        >,
        #[doc = "The <code>snippet</code> object contains basic details about the channel\nsection, such as its type, style and title."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::ChannelSectionSnippet>,
        #[doc = "The <code>targeting</code> object contains basic targeting settings about\nthe channel section."]
        #[serde(
            rename = "targeting",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub targeting: ::std::option::Option<crate::schemas::ChannelSectionTargeting>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionContentDetails {
        #[doc = "The channel ids for type multiple_channels."]
        #[serde(
            rename = "channels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channels: ::std::option::Option<Vec<String>>,
        #[doc = "The playlist ids for type single_playlist and multiple_playlists. For\nsinglePlaylist, only one playlistId is allowed."]
        #[serde(
            rename = "playlists",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlists: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of ChannelSections that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::ChannelSection>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#channelSectionListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionLocalization {
        #[doc = "The localized strings for channel section's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel that published\nthe channel section."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The language of the channel section's default title and description."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "Localized title, read-only."]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::ChannelSectionLocalization>,
        #[doc = "The position of the channel section in the channel."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<u32>,
        #[doc = "The type of the channel section."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::ChannelSectionSnippetType>,
        #[doc = "The style of the channel section."]
        #[serde(
            rename = "style",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub style: ::std::option::Option<crate::schemas::ChannelSectionSnippetStyle>,
        #[doc = "The channel section's title for multiple_playlists and multiple_channels."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelSectionSnippetType {
        AllPlaylists,
        ChannelsectionTypeUnspecified,
        CompletedEvents,
        LikedPlaylists,
        Likes,
        LiveEvents,
        MultipleChannels,
        MultiplePlaylists,
        PopularUploads,
        PostedPlaylists,
        PostedVideos,
        RecentActivity,
        RecentPosts,
        RecentUploads,
        SinglePlaylist,
        Subscriptions,
        UpcomingEvents,
    }
    impl ChannelSectionSnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelSectionSnippetType::AllPlaylists => "allPlaylists",
                ChannelSectionSnippetType::ChannelsectionTypeUnspecified => {
                    "channelsectionTypeUnspecified"
                }
                ChannelSectionSnippetType::CompletedEvents => "completedEvents",
                ChannelSectionSnippetType::LikedPlaylists => "likedPlaylists",
                ChannelSectionSnippetType::Likes => "likes",
                ChannelSectionSnippetType::LiveEvents => "liveEvents",
                ChannelSectionSnippetType::MultipleChannels => "multipleChannels",
                ChannelSectionSnippetType::MultiplePlaylists => "multiplePlaylists",
                ChannelSectionSnippetType::PopularUploads => "popularUploads",
                ChannelSectionSnippetType::PostedPlaylists => "postedPlaylists",
                ChannelSectionSnippetType::PostedVideos => "postedVideos",
                ChannelSectionSnippetType::RecentActivity => "recentActivity",
                ChannelSectionSnippetType::RecentPosts => "recentPosts",
                ChannelSectionSnippetType::RecentUploads => "recentUploads",
                ChannelSectionSnippetType::SinglePlaylist => "singlePlaylist",
                ChannelSectionSnippetType::Subscriptions => "subscriptions",
                ChannelSectionSnippetType::UpcomingEvents => "upcomingEvents",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelSectionSnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelSectionSnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelSectionSnippetType, ()> {
            Ok(match s {
                "allPlaylists" => ChannelSectionSnippetType::AllPlaylists,
                "channelsectionTypeUnspecified" => {
                    ChannelSectionSnippetType::ChannelsectionTypeUnspecified
                }
                "completedEvents" => ChannelSectionSnippetType::CompletedEvents,
                "likedPlaylists" => ChannelSectionSnippetType::LikedPlaylists,
                "likes" => ChannelSectionSnippetType::Likes,
                "liveEvents" => ChannelSectionSnippetType::LiveEvents,
                "multipleChannels" => ChannelSectionSnippetType::MultipleChannels,
                "multiplePlaylists" => ChannelSectionSnippetType::MultiplePlaylists,
                "popularUploads" => ChannelSectionSnippetType::PopularUploads,
                "postedPlaylists" => ChannelSectionSnippetType::PostedPlaylists,
                "postedVideos" => ChannelSectionSnippetType::PostedVideos,
                "recentActivity" => ChannelSectionSnippetType::RecentActivity,
                "recentPosts" => ChannelSectionSnippetType::RecentPosts,
                "recentUploads" => ChannelSectionSnippetType::RecentUploads,
                "singlePlaylist" => ChannelSectionSnippetType::SinglePlaylist,
                "subscriptions" => ChannelSectionSnippetType::Subscriptions,
                "upcomingEvents" => ChannelSectionSnippetType::UpcomingEvents,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelSectionSnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelSectionSnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelSectionSnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "allPlaylists" => ChannelSectionSnippetType::AllPlaylists,
                "channelsectionTypeUnspecified" => {
                    ChannelSectionSnippetType::ChannelsectionTypeUnspecified
                }
                "completedEvents" => ChannelSectionSnippetType::CompletedEvents,
                "likedPlaylists" => ChannelSectionSnippetType::LikedPlaylists,
                "likes" => ChannelSectionSnippetType::Likes,
                "liveEvents" => ChannelSectionSnippetType::LiveEvents,
                "multipleChannels" => ChannelSectionSnippetType::MultipleChannels,
                "multiplePlaylists" => ChannelSectionSnippetType::MultiplePlaylists,
                "popularUploads" => ChannelSectionSnippetType::PopularUploads,
                "postedPlaylists" => ChannelSectionSnippetType::PostedPlaylists,
                "postedVideos" => ChannelSectionSnippetType::PostedVideos,
                "recentActivity" => ChannelSectionSnippetType::RecentActivity,
                "recentPosts" => ChannelSectionSnippetType::RecentPosts,
                "recentUploads" => ChannelSectionSnippetType::RecentUploads,
                "singlePlaylist" => ChannelSectionSnippetType::SinglePlaylist,
                "subscriptions" => ChannelSectionSnippetType::Subscriptions,
                "upcomingEvents" => ChannelSectionSnippetType::UpcomingEvents,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionSnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionSnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelSectionSnippetStyle {
        ChannelsectionStyleUnspecified,
        HorizontalRow,
        VerticalList,
    }
    impl ChannelSectionSnippetStyle {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelSectionSnippetStyle::ChannelsectionStyleUnspecified => {
                    "channelsectionStyleUnspecified"
                }
                ChannelSectionSnippetStyle::HorizontalRow => "horizontalRow",
                ChannelSectionSnippetStyle::VerticalList => "verticalList",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelSectionSnippetStyle {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelSectionSnippetStyle {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelSectionSnippetStyle, ()> {
            Ok(match s {
                "channelsectionStyleUnspecified" => {
                    ChannelSectionSnippetStyle::ChannelsectionStyleUnspecified
                }
                "horizontalRow" => ChannelSectionSnippetStyle::HorizontalRow,
                "verticalList" => ChannelSectionSnippetStyle::VerticalList,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelSectionSnippetStyle {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelSectionSnippetStyle {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelSectionSnippetStyle {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "channelsectionStyleUnspecified" => {
                    ChannelSectionSnippetStyle::ChannelsectionStyleUnspecified
                }
                "horizontalRow" => ChannelSectionSnippetStyle::HorizontalRow,
                "verticalList" => ChannelSectionSnippetStyle::VerticalList,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionSnippetStyle {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionSnippetStyle {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSectionTargeting {
        #[doc = "The country the channel section is targeting."]
        #[serde(
            rename = "countries",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub countries: ::std::option::Option<Vec<String>>,
        #[doc = "The language the channel section is targeting."]
        #[serde(
            rename = "languages",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub languages: ::std::option::Option<Vec<String>>,
        #[doc = "The region the channel section is targeting."]
        #[serde(
            rename = "regions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub regions: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSectionTargeting {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSectionTargeting {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSettings {
        #[doc = "The country of the channel."]
        #[serde(
            rename = "country",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country: ::std::option::Option<String>,
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "Which content tab users should see when viewing the channel."]
        #[serde(
            rename = "defaultTab",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_tab: ::std::option::Option<String>,
        #[doc = "Specifies the channel description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Title for the featured channels tab."]
        #[serde(
            rename = "featuredChannelsTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub featured_channels_title: ::std::option::Option<String>,
        #[doc = "The list of featured channels."]
        #[serde(
            rename = "featuredChannelsUrls",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub featured_channels_urls: ::std::option::Option<Vec<String>>,
        #[doc = "Lists keywords associated with the channel, comma-separated."]
        #[serde(
            rename = "keywords",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub keywords: ::std::option::Option<String>,
        #[doc = "Whether user-submitted comments left on the channel page need to be\napproved by the channel owner to be publicly visible."]
        #[serde(
            rename = "moderateComments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moderate_comments: ::std::option::Option<bool>,
        #[doc = "A prominent color that can be rendered on this channel page."]
        #[serde(
            rename = "profileColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub profile_color: ::std::option::Option<String>,
        #[doc = "Whether the tab to browse the videos should be displayed."]
        #[serde(
            rename = "showBrowseView",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_browse_view: ::std::option::Option<bool>,
        #[doc = "Whether related channels should be proposed."]
        #[serde(
            rename = "showRelatedChannels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub show_related_channels: ::std::option::Option<bool>,
        #[doc = "Specifies the channel title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
        #[doc = "The ID for a Google Analytics account to track and measure traffic to the\nchannels."]
        #[serde(
            rename = "trackingAnalyticsAccountId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tracking_analytics_account_id: ::std::option::Option<String>,
        #[doc = "The trailer of the channel, for users that are not subscribers."]
        #[serde(
            rename = "unsubscribedTrailer",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub unsubscribed_trailer: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelSnippet {
        #[doc = "The country of the channel."]
        #[serde(
            rename = "country",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country: ::std::option::Option<String>,
        #[doc = "The custom url of the channel."]
        #[serde(
            rename = "customUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_url: ::std::option::Option<String>,
        #[doc = "The language of the channel's default title and description."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "The description of the channel."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Localized title and description, read-only."]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::ChannelLocalization>,
        #[doc = "The date and time that the channel was created. The value is specified in\n< a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "A map of thumbnail images associated with the channel. For each object in\nthe map, the key is the name of the thumbnail image, and the value is an\nobject that contains other information about the thumbnail.<br><br> When\ndisplaying thumbnails in your application, make sure that your code uses\nthe image URLs exactly as they are returned in API responses. For example,\nyour application should not use the <code>http</code> domain instead of the\n<code>https</code> domain in a URL returned in an API response.<br><br>\nBeginning in July 2018, channel thumbnail URLs will only be available in\nthe <code>https</code> domain, which is how the URLs appear in API\nresponses. After that time, you might see broken images in your application\nif it tries to load YouTube images from the <code>http</code> domain."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The channel's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ChannelSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelStatistics {
        #[doc = "The number of comments for the channel."]
        #[serde(
            rename = "commentCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub comment_count: ::std::option::Option<u64>,
        #[doc = "Whether or not the number of subscribers is shown for this user."]
        #[serde(
            rename = "hiddenSubscriberCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hidden_subscriber_count: ::std::option::Option<bool>,
        #[doc = "The number of subscribers that the channel has."]
        #[serde(
            rename = "subscriberCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub subscriber_count: ::std::option::Option<u64>,
        #[doc = "The number of videos uploaded to the channel."]
        #[serde(
            rename = "videoCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub video_count: ::std::option::Option<u64>,
        #[doc = "The number of times the channel has been viewed."]
        #[serde(
            rename = "viewCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub view_count: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for ChannelStatistics {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatistics {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelStatus {
        #[doc = "If true, then the user is linked to either a YouTube username or G+\naccount. Otherwise, the user doesn't have a public YouTube identity."]
        #[serde(
            rename = "isLinked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_linked: ::std::option::Option<bool>,
        #[doc = "The long uploads status of this channel. See\nhttps://support.google.com/youtube/answer/71673 for more information."]
        #[serde(
            rename = "longUploadsStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub long_uploads_status:
            ::std::option::Option<crate::schemas::ChannelStatusLongUploadsStatus>,
        #[serde(
            rename = "madeForKids",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub made_for_kids: ::std::option::Option<bool>,
        #[doc = "Privacy status of the channel."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::ChannelStatusPrivacyStatus>,
        #[serde(
            rename = "selfDeclaredMadeForKids",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub self_declared_made_for_kids: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for ChannelStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelStatusLongUploadsStatus {
        Allowed,
        Disallowed,
        Eligible,
        LongUploadsUnspecified,
    }
    impl ChannelStatusLongUploadsStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelStatusLongUploadsStatus::Allowed => "allowed",
                ChannelStatusLongUploadsStatus::Disallowed => "disallowed",
                ChannelStatusLongUploadsStatus::Eligible => "eligible",
                ChannelStatusLongUploadsStatus::LongUploadsUnspecified => "longUploadsUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelStatusLongUploadsStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelStatusLongUploadsStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelStatusLongUploadsStatus, ()> {
            Ok(match s {
                "allowed" => ChannelStatusLongUploadsStatus::Allowed,
                "disallowed" => ChannelStatusLongUploadsStatus::Disallowed,
                "eligible" => ChannelStatusLongUploadsStatus::Eligible,
                "longUploadsUnspecified" => ChannelStatusLongUploadsStatus::LongUploadsUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelStatusLongUploadsStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelStatusLongUploadsStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelStatusLongUploadsStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "allowed" => ChannelStatusLongUploadsStatus::Allowed,
                "disallowed" => ChannelStatusLongUploadsStatus::Disallowed,
                "eligible" => ChannelStatusLongUploadsStatus::Eligible,
                "longUploadsUnspecified" => ChannelStatusLongUploadsStatus::LongUploadsUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelStatusLongUploadsStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatusLongUploadsStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ChannelStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl ChannelStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                ChannelStatusPrivacyStatus::Private => "private",
                ChannelStatusPrivacyStatus::Public => "public",
                ChannelStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ChannelStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ChannelStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ChannelStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => ChannelStatusPrivacyStatus::Private,
                "public" => ChannelStatusPrivacyStatus::Public,
                "unlisted" => ChannelStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ChannelStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ChannelStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ChannelStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => ChannelStatusPrivacyStatus::Private,
                "public" => ChannelStatusPrivacyStatus::Public,
                "unlisted" => ChannelStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ChannelStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ChannelTopicDetails {
        #[doc = "A list of Wikipedia URLs that describe the channel's content."]
        #[serde(
            rename = "topicCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_categories: ::std::option::Option<Vec<String>>,
        #[doc = "A list of Freebase topic IDs associated with the channel. You can retrieve\ninformation about each topic using the <a\nhref=\"http://wiki.freebase.com/wiki/Topic_API\">Freebase Topic API</a>."]
        #[serde(
            rename = "topicIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_ids: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for ChannelTopicDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ChannelTopicDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Comment {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the comment."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#comment\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the comment."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::CommentSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Comment {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Comment {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of comments that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Comment>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#commentListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentSnippet {
        #[serde(
            rename = "authorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_channel_id: ::std::option::Option<crate::schemas::CommentSnippetAuthorChannelId>,
        #[doc = "Link to the author's YouTube channel, if any."]
        #[serde(
            rename = "authorChannelUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_channel_url: ::std::option::Option<String>,
        #[doc = "The name of the user who posted the comment."]
        #[serde(
            rename = "authorDisplayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_display_name: ::std::option::Option<String>,
        #[doc = "The URL for the avatar of the user who posted the comment."]
        #[serde(
            rename = "authorProfileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_profile_image_url: ::std::option::Option<String>,
        #[doc = "Whether the current viewer can rate this comment."]
        #[serde(
            rename = "canRate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub can_rate: ::std::option::Option<bool>,
        #[doc = "The id of the corresponding YouTube channel. In case of a channel comment\nthis is the channel the comment refers to. In case of a video comment\nit's the video's channel."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The total number of likes this comment has received."]
        #[serde(
            rename = "likeCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub like_count: ::std::option::Option<u32>,
        #[doc = "The comment's moderation status. Will not be set if the comments were\nrequested through the id filter."]
        #[serde(
            rename = "moderationStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moderation_status:
            ::std::option::Option<crate::schemas::CommentSnippetModerationStatus>,
        #[doc = "The unique id of the parent comment, only set for replies."]
        #[serde(
            rename = "parentId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub parent_id: ::std::option::Option<String>,
        #[doc = "The date and time when the comment was orignally published. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The comment's text. The format is either plain text or HTML dependent on\nwhat has been requested. Even the plain text representation may differ\nfrom the text originally posted in that it may replace video links with\nvideo titles etc."]
        #[serde(
            rename = "textDisplay",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_display: ::std::option::Option<String>,
        #[doc = "The comment's original raw text as initially posted or last updated. The\noriginal text will only be returned if it is accessible to the viewer,\nwhich is only guaranteed if the viewer is the comment's author."]
        #[serde(
            rename = "textOriginal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_original: ::std::option::Option<String>,
        #[doc = "The date and time when was last updated . The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "updatedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub updated_at: ::std::option::Option<String>,
        #[doc = "The ID of the video the comment refers to, if any."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
        #[doc = "The rating the viewer has given to this comment. For the time being this\nwill never return RATE_TYPE_DISLIKE and instead return RATE_TYPE_NONE.\nThis may change in the future."]
        #[serde(
            rename = "viewerRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub viewer_rating: ::std::option::Option<crate::schemas::CommentSnippetViewerRating>,
    }
    impl ::google_field_selector::FieldSelector for CommentSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CommentSnippetModerationStatus {
        HeldForReview,
        LikelySpam,
        Published,
        Rejected,
    }
    impl CommentSnippetModerationStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                CommentSnippetModerationStatus::HeldForReview => "heldForReview",
                CommentSnippetModerationStatus::LikelySpam => "likelySpam",
                CommentSnippetModerationStatus::Published => "published",
                CommentSnippetModerationStatus::Rejected => "rejected",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CommentSnippetModerationStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CommentSnippetModerationStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CommentSnippetModerationStatus, ()> {
            Ok(match s {
                "heldForReview" => CommentSnippetModerationStatus::HeldForReview,
                "likelySpam" => CommentSnippetModerationStatus::LikelySpam,
                "published" => CommentSnippetModerationStatus::Published,
                "rejected" => CommentSnippetModerationStatus::Rejected,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CommentSnippetModerationStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CommentSnippetModerationStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CommentSnippetModerationStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "heldForReview" => CommentSnippetModerationStatus::HeldForReview,
                "likelySpam" => CommentSnippetModerationStatus::LikelySpam,
                "published" => CommentSnippetModerationStatus::Published,
                "rejected" => CommentSnippetModerationStatus::Rejected,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CommentSnippetModerationStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippetModerationStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum CommentSnippetViewerRating {
        Dislike,
        Like,
        None,
    }
    impl CommentSnippetViewerRating {
        pub fn as_str(self) -> &'static str {
            match self {
                CommentSnippetViewerRating::Dislike => "dislike",
                CommentSnippetViewerRating::Like => "like",
                CommentSnippetViewerRating::None => "none",
            }
        }
    }
    impl ::std::convert::AsRef<str> for CommentSnippetViewerRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for CommentSnippetViewerRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<CommentSnippetViewerRating, ()> {
            Ok(match s {
                "dislike" => CommentSnippetViewerRating::Dislike,
                "like" => CommentSnippetViewerRating::Like,
                "none" => CommentSnippetViewerRating::None,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for CommentSnippetViewerRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for CommentSnippetViewerRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for CommentSnippetViewerRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "dislike" => CommentSnippetViewerRating::Dislike,
                "like" => CommentSnippetViewerRating::Like,
                "none" => CommentSnippetViewerRating::None,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for CommentSnippetViewerRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippetViewerRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentSnippetAuthorChannelId {
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentSnippetAuthorChannelId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentSnippetAuthorChannelId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentThread {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the comment thread."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#commentThread\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>replies</code> object contains a limited number of replies (if\nany) to the top level comment found in the snippet."]
        #[serde(
            rename = "replies",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub replies: ::std::option::Option<crate::schemas::CommentThreadReplies>,
        #[doc = "The <code>snippet</code> object contains basic details about the comment\nthread and also the top level comment."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::CommentThreadSnippet>,
    }
    impl ::google_field_selector::FieldSelector for CommentThread {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThread {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentThreadListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of comment threads that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::CommentThread>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#commentThreadListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentThreadListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThreadListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentThreadReplies {
        #[doc = "A limited number of replies. Unless the number of replies returned equals\ntotal_reply_count in the snippet the returned replies are only a subset\nof the total number of replies."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<Vec<crate::schemas::Comment>>,
    }
    impl ::google_field_selector::FieldSelector for CommentThreadReplies {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThreadReplies {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct CommentThreadSnippet {
        #[doc = "Whether the current viewer of the thread can reply to it. This is viewer\nspecific - other viewers may see a different value for this field."]
        #[serde(
            rename = "canReply",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub can_reply: ::std::option::Option<bool>,
        #[doc = "The YouTube channel the comments in the thread refer to or the channel\nwith the video the comments refer to. If video_id isn't set the comments\nrefer to the channel itself."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Whether the thread (and therefore all its comments) is visible to all\nYouTube users."]
        #[serde(
            rename = "isPublic",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_public: ::std::option::Option<bool>,
        #[doc = "The top level comment of this thread."]
        #[serde(
            rename = "topLevelComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub top_level_comment: ::std::option::Option<crate::schemas::Comment>,
        #[doc = "The total number of replies (not including the top level comment)."]
        #[serde(
            rename = "totalReplyCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_reply_count: ::std::option::Option<u32>,
        #[doc = "The ID of the video the comments refer to, if any. No video_id implies a\nchannel discussion comment."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for CommentThreadSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for CommentThreadSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ContentRating {
        #[doc = "The video's Australian Classification Board (ACB) or Australian\nCommunications and Media Authority (ACMA) rating. ACMA ratings are used\nto classify children's television programming."]
        #[serde(
            rename = "acbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub acb_rating: ::std::option::Option<crate::schemas::ContentRatingAcbRating>,
        #[doc = "The video's rating from Italy's Autorità per le Garanzie nelle\nComunicazioni (AGCOM)."]
        #[serde(
            rename = "agcomRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub agcom_rating: ::std::option::Option<crate::schemas::ContentRatingAgcomRating>,
        #[doc = "The video's Anatel (Asociación Nacional de Televisión)\nrating for Chilean television."]
        #[serde(
            rename = "anatelRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub anatel_rating: ::std::option::Option<crate::schemas::ContentRatingAnatelRating>,
        #[doc = "The video's British Board of Film Classification (BBFC) rating."]
        #[serde(
            rename = "bbfcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bbfc_rating: ::std::option::Option<crate::schemas::ContentRatingBbfcRating>,
        #[doc = "The video's rating from Thailand's Board of Film and Video Censors."]
        #[serde(
            rename = "bfvcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bfvc_rating: ::std::option::Option<crate::schemas::ContentRatingBfvcRating>,
        #[doc = "The video's rating from the Austrian Board of Media Classification\n(Bundesministerium für Unterricht, Kunst und Kultur)."]
        #[serde(
            rename = "bmukkRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bmukk_rating: ::std::option::Option<crate::schemas::ContentRatingBmukkRating>,
        #[doc = "Rating system for Canadian TV - Canadian TV Classification System\nThe video's rating from the Canadian Radio-Television and\nTelecommunications Commission (CRTC) for Canadian English-language\nbroadcasts. For more information, see the\n<a href=\"http://www.cbsc.ca/english/agvot/englishsystem.php\">Canadian\nBroadcast Standards Council</a> website."]
        #[serde(
            rename = "catvRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub catv_rating: ::std::option::Option<crate::schemas::ContentRatingCatvRating>,
        #[doc = "The video's rating from the Canadian Radio-Television and\nTelecommunications Commission (CRTC) for Canadian French-language\nbroadcasts. For more information, see the\n<a href=\"http://www.cbsc.ca/english/agvot/frenchsystem.php\">Canadian\nBroadcast Standards Council</a> website."]
        #[serde(
            rename = "catvfrRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub catvfr_rating: ::std::option::Option<crate::schemas::ContentRatingCatvfrRating>,
        #[doc = "The video's Central Board of Film Certification (CBFC - India) rating."]
        #[serde(
            rename = "cbfcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cbfc_rating: ::std::option::Option<crate::schemas::ContentRatingCbfcRating>,
        #[doc = "The video's Consejo de Calificación Cinematográfica (Chile)\nrating."]
        #[serde(
            rename = "cccRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ccc_rating: ::std::option::Option<crate::schemas::ContentRatingCccRating>,
        #[doc = "The video's rating from Portugal's Comissão de\nClassificação de Espect´culos."]
        #[serde(
            rename = "cceRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cce_rating: ::std::option::Option<crate::schemas::ContentRatingCceRating>,
        #[doc = "The video's rating in Switzerland."]
        #[serde(
            rename = "chfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub chfilm_rating: ::std::option::Option<crate::schemas::ContentRatingChfilmRating>,
        #[doc = "The video's Canadian Home Video Rating System (CHVRS) rating."]
        #[serde(
            rename = "chvrsRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub chvrs_rating: ::std::option::Option<crate::schemas::ContentRatingChvrsRating>,
        #[doc = "The video's rating from the Commission de Contrôle des Films\n(Belgium)."]
        #[serde(
            rename = "cicfRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cicf_rating: ::std::option::Option<crate::schemas::ContentRatingCicfRating>,
        #[doc = "The video's rating from Romania's CONSILIUL NATIONAL AL AUDIOVIZUALULUI\n(CNA)."]
        #[serde(
            rename = "cnaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cna_rating: ::std::option::Option<crate::schemas::ContentRatingCnaRating>,
        #[doc = "Rating system in France - Commission de classification cinematographique"]
        #[serde(
            rename = "cncRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cnc_rating: ::std::option::Option<crate::schemas::ContentRatingCncRating>,
        #[doc = "The video's rating from France's Conseil supérieur de\nl’audiovisuel, which rates broadcast content."]
        #[serde(
            rename = "csaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub csa_rating: ::std::option::Option<crate::schemas::ContentRatingCsaRating>,
        #[doc = "The video's rating from Luxembourg's Commission de surveillance\nde la classification des films (CSCF)."]
        #[serde(
            rename = "cscfRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cscf_rating: ::std::option::Option<crate::schemas::ContentRatingCscfRating>,
        #[doc = "The video's rating in the Czech Republic."]
        #[serde(
            rename = "czfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub czfilm_rating: ::std::option::Option<crate::schemas::ContentRatingCzfilmRating>,
        #[doc = "The video's Departamento de Justiça, Classificação,\nQualificação e Títulos (DJCQT - Brazil) rating."]
        #[serde(
            rename = "djctqRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub djctq_rating: ::std::option::Option<crate::schemas::ContentRatingDjctqRating>,
        #[doc = "Reasons that explain why the video received its DJCQT (Brazil) rating."]
        #[serde(
            rename = "djctqRatingReasons",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub djctq_rating_reasons:
            ::std::option::Option<Vec<crate::schemas::ContentRatingDjctqRatingReasonsItems>>,
        #[doc = "Rating system in Turkey - Evaluation and Classification Board of the\nMinistry of Culture and Tourism"]
        #[serde(
            rename = "ecbmctRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ecbmct_rating: ::std::option::Option<crate::schemas::ContentRatingEcbmctRating>,
        #[doc = "The video's rating in Estonia."]
        #[serde(
            rename = "eefilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub eefilm_rating: ::std::option::Option<crate::schemas::ContentRatingEefilmRating>,
        #[doc = "The video's rating in Egypt."]
        #[serde(
            rename = "egfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub egfilm_rating: ::std::option::Option<crate::schemas::ContentRatingEgfilmRating>,
        #[doc = "The video's Eirin (映倫) rating.\nEirin is the Japanese rating system."]
        #[serde(
            rename = "eirinRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub eirin_rating: ::std::option::Option<crate::schemas::ContentRatingEirinRating>,
        #[doc = "The video's rating from Malaysia's Film Censorship Board."]
        #[serde(
            rename = "fcbmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fcbm_rating: ::std::option::Option<crate::schemas::ContentRatingFcbmRating>,
        #[doc = "The video's rating from Hong Kong's Office for Film, Newspaper\nand Article Administration."]
        #[serde(
            rename = "fcoRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fco_rating: ::std::option::Option<crate::schemas::ContentRatingFcoRating>,
        #[doc = "<span class=\"deprecated\">This property has been deprecated. Use the\n<code><a\nhref=\"#contentDetails.contentRating.cncRating\">contentDetails.contentRating.cncRating</a></code>\ninstead.</span>"]
        #[serde(
            rename = "fmocRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fmoc_rating: ::std::option::Option<crate::schemas::ContentRatingFmocRating>,
        #[doc = "The video's rating from South Africa's Film and Publication Board."]
        #[serde(
            rename = "fpbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fpb_rating: ::std::option::Option<crate::schemas::ContentRatingFpbRating>,
        #[doc = "Reasons that explain why the video received its FPB (South Africa) rating."]
        #[serde(
            rename = "fpbRatingReasons",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fpb_rating_reasons:
            ::std::option::Option<Vec<crate::schemas::ContentRatingFpbRatingReasonsItems>>,
        #[doc = "The video's Freiwillige Selbstkontrolle der Filmwirtschaft\n(FSK - Germany) rating."]
        #[serde(
            rename = "fskRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fsk_rating: ::std::option::Option<crate::schemas::ContentRatingFskRating>,
        #[doc = "The video's rating in Greece."]
        #[serde(
            rename = "grfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub grfilm_rating: ::std::option::Option<crate::schemas::ContentRatingGrfilmRating>,
        #[doc = "The video's Instituto de la Cinematografía y de las Artes\nAudiovisuales (ICAA - Spain) rating."]
        #[serde(
            rename = "icaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub icaa_rating: ::std::option::Option<crate::schemas::ContentRatingIcaaRating>,
        #[doc = "The video's Irish Film Classification Office (IFCO - Ireland) rating.\nSee the <a\nhref=\"http://www.ifco.ie/website/ifco/ifcoweb.nsf/web/classcatintro\">IFCO</a>\nwebsite for more information."]
        #[serde(
            rename = "ifcoRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ifco_rating: ::std::option::Option<crate::schemas::ContentRatingIfcoRating>,
        #[doc = "The video's rating in Israel."]
        #[serde(
            rename = "ilfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ilfilm_rating: ::std::option::Option<crate::schemas::ContentRatingIlfilmRating>,
        #[doc = "The video's INCAA (Instituto Nacional de Cine y Artes Audiovisuales -\nArgentina) rating."]
        #[serde(
            rename = "incaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub incaa_rating: ::std::option::Option<crate::schemas::ContentRatingIncaaRating>,
        #[doc = "The video's rating from the Kenya Film Classification Board."]
        #[serde(
            rename = "kfcbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kfcb_rating: ::std::option::Option<crate::schemas::ContentRatingKfcbRating>,
        #[doc = "The video's NICAM/Kijkwijzer rating from the Nederlands Instituut\nvoor de Classificatie van Audiovisuele Media (Netherlands)."]
        #[serde(
            rename = "kijkwijzerRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kijkwijzer_rating: ::std::option::Option<crate::schemas::ContentRatingKijkwijzerRating>,
        #[doc = "The video's Korea Media Rating Board\n(영상물등급위원회) rating.\nThe KMRB rates videos in South Korea."]
        #[serde(
            rename = "kmrbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kmrb_rating: ::std::option::Option<crate::schemas::ContentRatingKmrbRating>,
        #[doc = "The video's rating from Indonesia's Lembaga Sensor Film."]
        #[serde(
            rename = "lsfRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub lsf_rating: ::std::option::Option<crate::schemas::ContentRatingLsfRating>,
        #[doc = "The video's rating from Malta's Film Age-Classification Board."]
        #[serde(
            rename = "mccaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mccaa_rating: ::std::option::Option<crate::schemas::ContentRatingMccaaRating>,
        #[doc = "The video's rating from the Danish Film Institute's (Det Danske\nFilminstitut) Media Council for Children and Young People."]
        #[serde(
            rename = "mccypRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mccyp_rating: ::std::option::Option<crate::schemas::ContentRatingMccypRating>,
        #[doc = "The video's rating system for Vietnam - MCST"]
        #[serde(
            rename = "mcstRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mcst_rating: ::std::option::Option<crate::schemas::ContentRatingMcstRating>,
        #[doc = "The video's rating from Singapore's Media Development Authority (MDA) and,\nspecifically, it's Board of Film Censors (BFC)."]
        #[serde(
            rename = "mdaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mda_rating: ::std::option::Option<crate::schemas::ContentRatingMdaRating>,
        #[doc = "The video's rating from Medietilsynet, the Norwegian Media Authority."]
        #[serde(
            rename = "medietilsynetRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medietilsynet_rating:
            ::std::option::Option<crate::schemas::ContentRatingMedietilsynetRating>,
        #[doc = "The video's rating from Finland's Kansallinen Audiovisuaalinen Instituutti\n(National Audiovisual Institute)."]
        #[serde(
            rename = "mekuRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub meku_rating: ::std::option::Option<crate::schemas::ContentRatingMekuRating>,
        #[doc = "The rating system for MENA countries, a clone of MPAA. It is needed to\nprevent titles go live w/o additional QC check, since some of them can be\ninappropriate for the countries at all. See b/33408548 for more details."]
        #[serde(
            rename = "menaMpaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mena_mpaa_rating: ::std::option::Option<crate::schemas::ContentRatingMenaMpaaRating>,
        #[doc = "The video's rating from the Ministero dei Beni e delle Attività\nCulturali e del Turismo (Italy)."]
        #[serde(
            rename = "mibacRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mibac_rating: ::std::option::Option<crate::schemas::ContentRatingMibacRating>,
        #[doc = "The video's Ministerio de Cultura (Colombia) rating."]
        #[serde(
            rename = "mocRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moc_rating: ::std::option::Option<crate::schemas::ContentRatingMocRating>,
        #[doc = "The video's rating from Taiwan's Ministry of Culture\n(文化部)."]
        #[serde(
            rename = "moctwRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moctw_rating: ::std::option::Option<crate::schemas::ContentRatingMoctwRating>,
        #[doc = "The video's Motion Picture Association of America (MPAA) rating."]
        #[serde(
            rename = "mpaaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mpaa_rating: ::std::option::Option<crate::schemas::ContentRatingMpaaRating>,
        #[doc = "The rating system for trailer, DVD, and Ad in the US.  See\nhttp://movielabs.com/md/ratings/v2.3/html/US_MPAAT_Ratings.html."]
        #[serde(
            rename = "mpaatRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mpaat_rating: ::std::option::Option<crate::schemas::ContentRatingMpaatRating>,
        #[doc = "The video's rating from the Movie and Television Review and\nClassification Board (Philippines)."]
        #[serde(
            rename = "mtrcbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mtrcb_rating: ::std::option::Option<crate::schemas::ContentRatingMtrcbRating>,
        #[doc = "The video's rating from the Maldives National Bureau of Classification."]
        #[serde(
            rename = "nbcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nbc_rating: ::std::option::Option<crate::schemas::ContentRatingNbcRating>,
        #[doc = "The video's rating in Poland."]
        #[serde(
            rename = "nbcplRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nbcpl_rating: ::std::option::Option<crate::schemas::ContentRatingNbcplRating>,
        #[doc = "The video's rating from the <a href=\"http://www.nfc.bg/\">Bulgarian\nNational Film Center</a>."]
        #[serde(
            rename = "nfrcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nfrc_rating: ::std::option::Option<crate::schemas::ContentRatingNfrcRating>,
        #[doc = "The video's rating from Nigeria's National Film and Video Censors Board."]
        #[serde(
            rename = "nfvcbRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nfvcb_rating: ::std::option::Option<crate::schemas::ContentRatingNfvcbRating>,
        #[doc = "The video's rating from the Nacionãlais Kino centrs (National Film\nCentre of Latvia)."]
        #[serde(
            rename = "nkclvRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nkclv_rating: ::std::option::Option<crate::schemas::ContentRatingNkclvRating>,
        #[doc = "The National Media Council ratings system for United Arab Emirates."]
        #[serde(
            rename = "nmcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub nmc_rating: ::std::option::Option<crate::schemas::ContentRatingNmcRating>,
        #[doc = "The video's Office of Film and Literature Classification\n(OFLC - New Zealand) rating."]
        #[serde(
            rename = "oflcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub oflc_rating: ::std::option::Option<crate::schemas::ContentRatingOflcRating>,
        #[doc = "The video's rating in Peru."]
        #[serde(
            rename = "pefilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub pefilm_rating: ::std::option::Option<crate::schemas::ContentRatingPefilmRating>,
        #[doc = "The video's rating from the Hungarian Nemzeti Filmiroda, the Rating\nCommittee of the National Office of Film."]
        #[serde(
            rename = "rcnofRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rcnof_rating: ::std::option::Option<crate::schemas::ContentRatingRcnofRating>,
        #[doc = "The video's rating in Venezuela."]
        #[serde(
            rename = "resorteviolenciaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resorteviolencia_rating:
            ::std::option::Option<crate::schemas::ContentRatingResorteviolenciaRating>,
        #[doc = "The video's General Directorate of Radio, Television and Cinematography\n(Mexico) rating."]
        #[serde(
            rename = "rtcRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rtc_rating: ::std::option::Option<crate::schemas::ContentRatingRtcRating>,
        #[doc = "The video's rating from Ireland's Raidió Teilifís\nÉireann."]
        #[serde(
            rename = "rteRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rte_rating: ::std::option::Option<crate::schemas::ContentRatingRteRating>,
        #[doc = "The video's National Film Registry of the Russian Federation\n(MKRF - Russia) rating."]
        #[serde(
            rename = "russiaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub russia_rating: ::std::option::Option<crate::schemas::ContentRatingRussiaRating>,
        #[doc = "The video's rating in Slovakia."]
        #[serde(
            rename = "skfilmRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub skfilm_rating: ::std::option::Option<crate::schemas::ContentRatingSkfilmRating>,
        #[doc = "The video's rating in Iceland."]
        #[serde(
            rename = "smaisRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub smais_rating: ::std::option::Option<crate::schemas::ContentRatingSmaisRating>,
        #[doc = "The video's rating from Statens medieråd (Sweden's National Media\nCouncil)."]
        #[serde(
            rename = "smsaRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub smsa_rating: ::std::option::Option<crate::schemas::ContentRatingSmsaRating>,
        #[doc = "The video's TV Parental Guidelines (TVPG) rating."]
        #[serde(
            rename = "tvpgRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tvpg_rating: ::std::option::Option<crate::schemas::ContentRatingTvpgRating>,
        #[doc = "A rating that YouTube uses to identify age-restricted content."]
        #[serde(
            rename = "ytRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub yt_rating: ::std::option::Option<crate::schemas::ContentRatingYtRating>,
    }
    impl ::google_field_selector::FieldSelector for ContentRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingAcbRating {
        #[doc = "Programs that have been given a <code>C</code> classification by the\nAustralian Communications and Media Authority. These programs are\nintended for children (other than preschool children) who are younger\nthan 14 years of age."]
        AcbC,
        #[doc = "E"]
        AcbE,
        #[doc = "G"]
        AcbG,
        #[doc = "M"]
        AcbM,
        #[doc = "MA15+"]
        AcbMa15Plus,
        #[doc = "Programs that have been given a <code>P</code> classification by the\nAustralian Communications and Media Authority. These programs are\nintended for preschool children."]
        AcbP,
        #[doc = "PG"]
        AcbPg,
        #[doc = "R18+"]
        AcbR18Plus,
        AcbUnrated,
        AcbUnspecified,
    }
    impl ContentRatingAcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingAcbRating::AcbC => "acbC",
                ContentRatingAcbRating::AcbE => "acbE",
                ContentRatingAcbRating::AcbG => "acbG",
                ContentRatingAcbRating::AcbM => "acbM",
                ContentRatingAcbRating::AcbMa15Plus => "acbMa15plus",
                ContentRatingAcbRating::AcbP => "acbP",
                ContentRatingAcbRating::AcbPg => "acbPg",
                ContentRatingAcbRating::AcbR18Plus => "acbR18plus",
                ContentRatingAcbRating::AcbUnrated => "acbUnrated",
                ContentRatingAcbRating::AcbUnspecified => "acbUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingAcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingAcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingAcbRating, ()> {
            Ok(match s {
                "acbC" => ContentRatingAcbRating::AcbC,
                "acbE" => ContentRatingAcbRating::AcbE,
                "acbG" => ContentRatingAcbRating::AcbG,
                "acbM" => ContentRatingAcbRating::AcbM,
                "acbMa15plus" => ContentRatingAcbRating::AcbMa15Plus,
                "acbP" => ContentRatingAcbRating::AcbP,
                "acbPg" => ContentRatingAcbRating::AcbPg,
                "acbR18plus" => ContentRatingAcbRating::AcbR18Plus,
                "acbUnrated" => ContentRatingAcbRating::AcbUnrated,
                "acbUnspecified" => ContentRatingAcbRating::AcbUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingAcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingAcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingAcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "acbC" => ContentRatingAcbRating::AcbC,
                "acbE" => ContentRatingAcbRating::AcbE,
                "acbG" => ContentRatingAcbRating::AcbG,
                "acbM" => ContentRatingAcbRating::AcbM,
                "acbMa15plus" => ContentRatingAcbRating::AcbMa15Plus,
                "acbP" => ContentRatingAcbRating::AcbP,
                "acbPg" => ContentRatingAcbRating::AcbPg,
                "acbR18plus" => ContentRatingAcbRating::AcbR18Plus,
                "acbUnrated" => ContentRatingAcbRating::AcbUnrated,
                "acbUnspecified" => ContentRatingAcbRating::AcbUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingAcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingAcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingAgcomRating {
        #[doc = "T"]
        AgcomT,
        AgcomUnrated,
        AgcomUnspecified,
        #[doc = "VM14"]
        AgcomVm14,
        #[doc = "VM18"]
        AgcomVm18,
    }
    impl ContentRatingAgcomRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingAgcomRating::AgcomT => "agcomT",
                ContentRatingAgcomRating::AgcomUnrated => "agcomUnrated",
                ContentRatingAgcomRating::AgcomUnspecified => "agcomUnspecified",
                ContentRatingAgcomRating::AgcomVm14 => "agcomVm14",
                ContentRatingAgcomRating::AgcomVm18 => "agcomVm18",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingAgcomRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingAgcomRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingAgcomRating, ()> {
            Ok(match s {
                "agcomT" => ContentRatingAgcomRating::AgcomT,
                "agcomUnrated" => ContentRatingAgcomRating::AgcomUnrated,
                "agcomUnspecified" => ContentRatingAgcomRating::AgcomUnspecified,
                "agcomVm14" => ContentRatingAgcomRating::AgcomVm14,
                "agcomVm18" => ContentRatingAgcomRating::AgcomVm18,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingAgcomRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingAgcomRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingAgcomRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "agcomT" => ContentRatingAgcomRating::AgcomT,
                "agcomUnrated" => ContentRatingAgcomRating::AgcomUnrated,
                "agcomUnspecified" => ContentRatingAgcomRating::AgcomUnspecified,
                "agcomVm14" => ContentRatingAgcomRating::AgcomVm14,
                "agcomVm18" => ContentRatingAgcomRating::AgcomVm18,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingAgcomRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingAgcomRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingAnatelRating {
        #[doc = "A"]
        AnatelA,
        #[doc = "F"]
        AnatelF,
        #[doc = "I"]
        AnatelI,
        #[doc = "I-10"]
        AnatelI10,
        #[doc = "I-12"]
        AnatelI12,
        #[doc = "I-7"]
        AnatelI7,
        #[doc = "R"]
        AnatelR,
        AnatelUnrated,
        AnatelUnspecified,
    }
    impl ContentRatingAnatelRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingAnatelRating::AnatelA => "anatelA",
                ContentRatingAnatelRating::AnatelF => "anatelF",
                ContentRatingAnatelRating::AnatelI => "anatelI",
                ContentRatingAnatelRating::AnatelI10 => "anatelI10",
                ContentRatingAnatelRating::AnatelI12 => "anatelI12",
                ContentRatingAnatelRating::AnatelI7 => "anatelI7",
                ContentRatingAnatelRating::AnatelR => "anatelR",
                ContentRatingAnatelRating::AnatelUnrated => "anatelUnrated",
                ContentRatingAnatelRating::AnatelUnspecified => "anatelUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingAnatelRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingAnatelRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingAnatelRating, ()> {
            Ok(match s {
                "anatelA" => ContentRatingAnatelRating::AnatelA,
                "anatelF" => ContentRatingAnatelRating::AnatelF,
                "anatelI" => ContentRatingAnatelRating::AnatelI,
                "anatelI10" => ContentRatingAnatelRating::AnatelI10,
                "anatelI12" => ContentRatingAnatelRating::AnatelI12,
                "anatelI7" => ContentRatingAnatelRating::AnatelI7,
                "anatelR" => ContentRatingAnatelRating::AnatelR,
                "anatelUnrated" => ContentRatingAnatelRating::AnatelUnrated,
                "anatelUnspecified" => ContentRatingAnatelRating::AnatelUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingAnatelRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingAnatelRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingAnatelRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "anatelA" => ContentRatingAnatelRating::AnatelA,
                "anatelF" => ContentRatingAnatelRating::AnatelF,
                "anatelI" => ContentRatingAnatelRating::AnatelI,
                "anatelI10" => ContentRatingAnatelRating::AnatelI10,
                "anatelI12" => ContentRatingAnatelRating::AnatelI12,
                "anatelI7" => ContentRatingAnatelRating::AnatelI7,
                "anatelR" => ContentRatingAnatelRating::AnatelR,
                "anatelUnrated" => ContentRatingAnatelRating::AnatelUnrated,
                "anatelUnspecified" => ContentRatingAnatelRating::AnatelUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingAnatelRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingAnatelRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingBbfcRating {
        #[doc = "12"]
        Bbfc12,
        #[doc = "12A"]
        Bbfc12A,
        #[doc = "15"]
        Bbfc15,
        #[doc = "18"]
        Bbfc18,
        #[doc = "PG"]
        BbfcPg,
        #[doc = "R18"]
        BbfcR18,
        #[doc = "U"]
        BbfcU,
        BbfcUnrated,
        BbfcUnspecified,
    }
    impl ContentRatingBbfcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingBbfcRating::Bbfc12 => "bbfc12",
                ContentRatingBbfcRating::Bbfc12A => "bbfc12a",
                ContentRatingBbfcRating::Bbfc15 => "bbfc15",
                ContentRatingBbfcRating::Bbfc18 => "bbfc18",
                ContentRatingBbfcRating::BbfcPg => "bbfcPg",
                ContentRatingBbfcRating::BbfcR18 => "bbfcR18",
                ContentRatingBbfcRating::BbfcU => "bbfcU",
                ContentRatingBbfcRating::BbfcUnrated => "bbfcUnrated",
                ContentRatingBbfcRating::BbfcUnspecified => "bbfcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingBbfcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingBbfcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingBbfcRating, ()> {
            Ok(match s {
                "bbfc12" => ContentRatingBbfcRating::Bbfc12,
                "bbfc12a" => ContentRatingBbfcRating::Bbfc12A,
                "bbfc15" => ContentRatingBbfcRating::Bbfc15,
                "bbfc18" => ContentRatingBbfcRating::Bbfc18,
                "bbfcPg" => ContentRatingBbfcRating::BbfcPg,
                "bbfcR18" => ContentRatingBbfcRating::BbfcR18,
                "bbfcU" => ContentRatingBbfcRating::BbfcU,
                "bbfcUnrated" => ContentRatingBbfcRating::BbfcUnrated,
                "bbfcUnspecified" => ContentRatingBbfcRating::BbfcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingBbfcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingBbfcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingBbfcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bbfc12" => ContentRatingBbfcRating::Bbfc12,
                "bbfc12a" => ContentRatingBbfcRating::Bbfc12A,
                "bbfc15" => ContentRatingBbfcRating::Bbfc15,
                "bbfc18" => ContentRatingBbfcRating::Bbfc18,
                "bbfcPg" => ContentRatingBbfcRating::BbfcPg,
                "bbfcR18" => ContentRatingBbfcRating::BbfcR18,
                "bbfcU" => ContentRatingBbfcRating::BbfcU,
                "bbfcUnrated" => ContentRatingBbfcRating::BbfcUnrated,
                "bbfcUnspecified" => ContentRatingBbfcRating::BbfcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingBbfcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingBbfcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingBfvcRating {
        #[doc = "13"]
        Bfvc13,
        #[doc = "15"]
        Bfvc15,
        #[doc = "18"]
        Bfvc18,
        #[doc = "20"]
        Bfvc20,
        #[doc = "B"]
        BfvcB,
        #[doc = "E"]
        BfvcE,
        #[doc = "G"]
        BfvcG,
        BfvcUnrated,
        BfvcUnspecified,
    }
    impl ContentRatingBfvcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingBfvcRating::Bfvc13 => "bfvc13",
                ContentRatingBfvcRating::Bfvc15 => "bfvc15",
                ContentRatingBfvcRating::Bfvc18 => "bfvc18",
                ContentRatingBfvcRating::Bfvc20 => "bfvc20",
                ContentRatingBfvcRating::BfvcB => "bfvcB",
                ContentRatingBfvcRating::BfvcE => "bfvcE",
                ContentRatingBfvcRating::BfvcG => "bfvcG",
                ContentRatingBfvcRating::BfvcUnrated => "bfvcUnrated",
                ContentRatingBfvcRating::BfvcUnspecified => "bfvcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingBfvcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingBfvcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingBfvcRating, ()> {
            Ok(match s {
                "bfvc13" => ContentRatingBfvcRating::Bfvc13,
                "bfvc15" => ContentRatingBfvcRating::Bfvc15,
                "bfvc18" => ContentRatingBfvcRating::Bfvc18,
                "bfvc20" => ContentRatingBfvcRating::Bfvc20,
                "bfvcB" => ContentRatingBfvcRating::BfvcB,
                "bfvcE" => ContentRatingBfvcRating::BfvcE,
                "bfvcG" => ContentRatingBfvcRating::BfvcG,
                "bfvcUnrated" => ContentRatingBfvcRating::BfvcUnrated,
                "bfvcUnspecified" => ContentRatingBfvcRating::BfvcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingBfvcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingBfvcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingBfvcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bfvc13" => ContentRatingBfvcRating::Bfvc13,
                "bfvc15" => ContentRatingBfvcRating::Bfvc15,
                "bfvc18" => ContentRatingBfvcRating::Bfvc18,
                "bfvc20" => ContentRatingBfvcRating::Bfvc20,
                "bfvcB" => ContentRatingBfvcRating::BfvcB,
                "bfvcE" => ContentRatingBfvcRating::BfvcE,
                "bfvcG" => ContentRatingBfvcRating::BfvcG,
                "bfvcUnrated" => ContentRatingBfvcRating::BfvcUnrated,
                "bfvcUnspecified" => ContentRatingBfvcRating::BfvcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingBfvcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingBfvcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingBmukkRating {
        #[doc = "10+"]
        Bmukk10,
        #[doc = "12+"]
        Bmukk12,
        #[doc = "14+"]
        Bmukk14,
        #[doc = "16+"]
        Bmukk16,
        #[doc = "6+"]
        Bmukk6,
        #[doc = "8+"]
        Bmukk8,
        #[doc = "Unrestricted"]
        BmukkAa,
        BmukkUnrated,
        BmukkUnspecified,
    }
    impl ContentRatingBmukkRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingBmukkRating::Bmukk10 => "bmukk10",
                ContentRatingBmukkRating::Bmukk12 => "bmukk12",
                ContentRatingBmukkRating::Bmukk14 => "bmukk14",
                ContentRatingBmukkRating::Bmukk16 => "bmukk16",
                ContentRatingBmukkRating::Bmukk6 => "bmukk6",
                ContentRatingBmukkRating::Bmukk8 => "bmukk8",
                ContentRatingBmukkRating::BmukkAa => "bmukkAa",
                ContentRatingBmukkRating::BmukkUnrated => "bmukkUnrated",
                ContentRatingBmukkRating::BmukkUnspecified => "bmukkUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingBmukkRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingBmukkRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingBmukkRating, ()> {
            Ok(match s {
                "bmukk10" => ContentRatingBmukkRating::Bmukk10,
                "bmukk12" => ContentRatingBmukkRating::Bmukk12,
                "bmukk14" => ContentRatingBmukkRating::Bmukk14,
                "bmukk16" => ContentRatingBmukkRating::Bmukk16,
                "bmukk6" => ContentRatingBmukkRating::Bmukk6,
                "bmukk8" => ContentRatingBmukkRating::Bmukk8,
                "bmukkAa" => ContentRatingBmukkRating::BmukkAa,
                "bmukkUnrated" => ContentRatingBmukkRating::BmukkUnrated,
                "bmukkUnspecified" => ContentRatingBmukkRating::BmukkUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingBmukkRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingBmukkRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingBmukkRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bmukk10" => ContentRatingBmukkRating::Bmukk10,
                "bmukk12" => ContentRatingBmukkRating::Bmukk12,
                "bmukk14" => ContentRatingBmukkRating::Bmukk14,
                "bmukk16" => ContentRatingBmukkRating::Bmukk16,
                "bmukk6" => ContentRatingBmukkRating::Bmukk6,
                "bmukk8" => ContentRatingBmukkRating::Bmukk8,
                "bmukkAa" => ContentRatingBmukkRating::BmukkAa,
                "bmukkUnrated" => ContentRatingBmukkRating::BmukkUnrated,
                "bmukkUnspecified" => ContentRatingBmukkRating::BmukkUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingBmukkRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingBmukkRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCatvRating {
        #[doc = "14+"]
        Catv14Plus,
        #[doc = "18+"]
        Catv18Plus,
        #[doc = "C"]
        CatvC,
        #[doc = "C8"]
        CatvC8,
        #[doc = "G"]
        CatvG,
        #[doc = "PG"]
        CatvPg,
        CatvUnrated,
        CatvUnspecified,
    }
    impl ContentRatingCatvRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCatvRating::Catv14Plus => "catv14plus",
                ContentRatingCatvRating::Catv18Plus => "catv18plus",
                ContentRatingCatvRating::CatvC => "catvC",
                ContentRatingCatvRating::CatvC8 => "catvC8",
                ContentRatingCatvRating::CatvG => "catvG",
                ContentRatingCatvRating::CatvPg => "catvPg",
                ContentRatingCatvRating::CatvUnrated => "catvUnrated",
                ContentRatingCatvRating::CatvUnspecified => "catvUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCatvRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCatvRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCatvRating, ()> {
            Ok(match s {
                "catv14plus" => ContentRatingCatvRating::Catv14Plus,
                "catv18plus" => ContentRatingCatvRating::Catv18Plus,
                "catvC" => ContentRatingCatvRating::CatvC,
                "catvC8" => ContentRatingCatvRating::CatvC8,
                "catvG" => ContentRatingCatvRating::CatvG,
                "catvPg" => ContentRatingCatvRating::CatvPg,
                "catvUnrated" => ContentRatingCatvRating::CatvUnrated,
                "catvUnspecified" => ContentRatingCatvRating::CatvUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCatvRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCatvRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCatvRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "catv14plus" => ContentRatingCatvRating::Catv14Plus,
                "catv18plus" => ContentRatingCatvRating::Catv18Plus,
                "catvC" => ContentRatingCatvRating::CatvC,
                "catvC8" => ContentRatingCatvRating::CatvC8,
                "catvG" => ContentRatingCatvRating::CatvG,
                "catvPg" => ContentRatingCatvRating::CatvPg,
                "catvUnrated" => ContentRatingCatvRating::CatvUnrated,
                "catvUnspecified" => ContentRatingCatvRating::CatvUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCatvRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCatvRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCatvfrRating {
        #[doc = "13+"]
        Catvfr13Plus,
        #[doc = "16+"]
        Catvfr16Plus,
        #[doc = "18+"]
        Catvfr18Plus,
        #[doc = "8+"]
        Catvfr8Plus,
        #[doc = "G"]
        CatvfrG,
        CatvfrUnrated,
        CatvfrUnspecified,
    }
    impl ContentRatingCatvfrRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCatvfrRating::Catvfr13Plus => "catvfr13plus",
                ContentRatingCatvfrRating::Catvfr16Plus => "catvfr16plus",
                ContentRatingCatvfrRating::Catvfr18Plus => "catvfr18plus",
                ContentRatingCatvfrRating::Catvfr8Plus => "catvfr8plus",
                ContentRatingCatvfrRating::CatvfrG => "catvfrG",
                ContentRatingCatvfrRating::CatvfrUnrated => "catvfrUnrated",
                ContentRatingCatvfrRating::CatvfrUnspecified => "catvfrUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCatvfrRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCatvfrRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCatvfrRating, ()> {
            Ok(match s {
                "catvfr13plus" => ContentRatingCatvfrRating::Catvfr13Plus,
                "catvfr16plus" => ContentRatingCatvfrRating::Catvfr16Plus,
                "catvfr18plus" => ContentRatingCatvfrRating::Catvfr18Plus,
                "catvfr8plus" => ContentRatingCatvfrRating::Catvfr8Plus,
                "catvfrG" => ContentRatingCatvfrRating::CatvfrG,
                "catvfrUnrated" => ContentRatingCatvfrRating::CatvfrUnrated,
                "catvfrUnspecified" => ContentRatingCatvfrRating::CatvfrUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCatvfrRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCatvfrRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCatvfrRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "catvfr13plus" => ContentRatingCatvfrRating::Catvfr13Plus,
                "catvfr16plus" => ContentRatingCatvfrRating::Catvfr16Plus,
                "catvfr18plus" => ContentRatingCatvfrRating::Catvfr18Plus,
                "catvfr8plus" => ContentRatingCatvfrRating::Catvfr8Plus,
                "catvfrG" => ContentRatingCatvfrRating::CatvfrG,
                "catvfrUnrated" => ContentRatingCatvfrRating::CatvfrUnrated,
                "catvfrUnspecified" => ContentRatingCatvfrRating::CatvfrUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCatvfrRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCatvfrRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCbfcRating {
        #[doc = "A"]
        CbfcA,
        #[doc = "S"]
        CbfcS,
        #[doc = "U"]
        CbfcU,
        #[doc = "U/A"]
        CbfcUA,
        CbfcUnrated,
        CbfcUnspecified,
    }
    impl ContentRatingCbfcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCbfcRating::CbfcA => "cbfcA",
                ContentRatingCbfcRating::CbfcS => "cbfcS",
                ContentRatingCbfcRating::CbfcU => "cbfcU",
                ContentRatingCbfcRating::CbfcUA => "cbfcUA",
                ContentRatingCbfcRating::CbfcUnrated => "cbfcUnrated",
                ContentRatingCbfcRating::CbfcUnspecified => "cbfcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCbfcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCbfcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCbfcRating, ()> {
            Ok(match s {
                "cbfcA" => ContentRatingCbfcRating::CbfcA,
                "cbfcS" => ContentRatingCbfcRating::CbfcS,
                "cbfcU" => ContentRatingCbfcRating::CbfcU,
                "cbfcUA" => ContentRatingCbfcRating::CbfcUA,
                "cbfcUnrated" => ContentRatingCbfcRating::CbfcUnrated,
                "cbfcUnspecified" => ContentRatingCbfcRating::CbfcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCbfcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCbfcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCbfcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cbfcA" => ContentRatingCbfcRating::CbfcA,
                "cbfcS" => ContentRatingCbfcRating::CbfcS,
                "cbfcU" => ContentRatingCbfcRating::CbfcU,
                "cbfcUA" => ContentRatingCbfcRating::CbfcUA,
                "cbfcUnrated" => ContentRatingCbfcRating::CbfcUnrated,
                "cbfcUnspecified" => ContentRatingCbfcRating::CbfcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCbfcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCbfcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCccRating {
        #[doc = "14+"]
        Ccc14,
        #[doc = "18+"]
        Ccc18,
        #[doc = "18+ - contenido pornográfico"]
        Ccc18S,
        #[doc = "18+ - contenido excesivamente violento"]
        Ccc18V,
        #[doc = "6+ - Inconveniente para menores de 7 años"]
        Ccc6,
        #[doc = "Todo espectador"]
        CccTe,
        CccUnrated,
        CccUnspecified,
    }
    impl ContentRatingCccRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCccRating::Ccc14 => "ccc14",
                ContentRatingCccRating::Ccc18 => "ccc18",
                ContentRatingCccRating::Ccc18S => "ccc18s",
                ContentRatingCccRating::Ccc18V => "ccc18v",
                ContentRatingCccRating::Ccc6 => "ccc6",
                ContentRatingCccRating::CccTe => "cccTe",
                ContentRatingCccRating::CccUnrated => "cccUnrated",
                ContentRatingCccRating::CccUnspecified => "cccUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCccRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCccRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCccRating, ()> {
            Ok(match s {
                "ccc14" => ContentRatingCccRating::Ccc14,
                "ccc18" => ContentRatingCccRating::Ccc18,
                "ccc18s" => ContentRatingCccRating::Ccc18S,
                "ccc18v" => ContentRatingCccRating::Ccc18V,
                "ccc6" => ContentRatingCccRating::Ccc6,
                "cccTe" => ContentRatingCccRating::CccTe,
                "cccUnrated" => ContentRatingCccRating::CccUnrated,
                "cccUnspecified" => ContentRatingCccRating::CccUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCccRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCccRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCccRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ccc14" => ContentRatingCccRating::Ccc14,
                "ccc18" => ContentRatingCccRating::Ccc18,
                "ccc18s" => ContentRatingCccRating::Ccc18S,
                "ccc18v" => ContentRatingCccRating::Ccc18V,
                "ccc6" => ContentRatingCccRating::Ccc6,
                "cccTe" => ContentRatingCccRating::CccTe,
                "cccUnrated" => ContentRatingCccRating::CccUnrated,
                "cccUnspecified" => ContentRatingCccRating::CccUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCccRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCccRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCceRating {
        #[doc = "12"]
        CceM12,
        #[doc = "14"]
        CceM14,
        #[doc = "16"]
        CceM16,
        #[doc = "18"]
        CceM18,
        #[doc = "4"]
        CceM4,
        #[doc = "6"]
        CceM6,
        CceUnrated,
        CceUnspecified,
    }
    impl ContentRatingCceRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCceRating::CceM12 => "cceM12",
                ContentRatingCceRating::CceM14 => "cceM14",
                ContentRatingCceRating::CceM16 => "cceM16",
                ContentRatingCceRating::CceM18 => "cceM18",
                ContentRatingCceRating::CceM4 => "cceM4",
                ContentRatingCceRating::CceM6 => "cceM6",
                ContentRatingCceRating::CceUnrated => "cceUnrated",
                ContentRatingCceRating::CceUnspecified => "cceUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCceRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCceRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCceRating, ()> {
            Ok(match s {
                "cceM12" => ContentRatingCceRating::CceM12,
                "cceM14" => ContentRatingCceRating::CceM14,
                "cceM16" => ContentRatingCceRating::CceM16,
                "cceM18" => ContentRatingCceRating::CceM18,
                "cceM4" => ContentRatingCceRating::CceM4,
                "cceM6" => ContentRatingCceRating::CceM6,
                "cceUnrated" => ContentRatingCceRating::CceUnrated,
                "cceUnspecified" => ContentRatingCceRating::CceUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCceRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCceRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCceRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cceM12" => ContentRatingCceRating::CceM12,
                "cceM14" => ContentRatingCceRating::CceM14,
                "cceM16" => ContentRatingCceRating::CceM16,
                "cceM18" => ContentRatingCceRating::CceM18,
                "cceM4" => ContentRatingCceRating::CceM4,
                "cceM6" => ContentRatingCceRating::CceM6,
                "cceUnrated" => ContentRatingCceRating::CceUnrated,
                "cceUnspecified" => ContentRatingCceRating::CceUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCceRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCceRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingChfilmRating {
        #[doc = "0"]
        Chfilm0,
        #[doc = "12"]
        Chfilm12,
        #[doc = "16"]
        Chfilm16,
        #[doc = "18"]
        Chfilm18,
        #[doc = "6"]
        Chfilm6,
        ChfilmUnrated,
        ChfilmUnspecified,
    }
    impl ContentRatingChfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingChfilmRating::Chfilm0 => "chfilm0",
                ContentRatingChfilmRating::Chfilm12 => "chfilm12",
                ContentRatingChfilmRating::Chfilm16 => "chfilm16",
                ContentRatingChfilmRating::Chfilm18 => "chfilm18",
                ContentRatingChfilmRating::Chfilm6 => "chfilm6",
                ContentRatingChfilmRating::ChfilmUnrated => "chfilmUnrated",
                ContentRatingChfilmRating::ChfilmUnspecified => "chfilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingChfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingChfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingChfilmRating, ()> {
            Ok(match s {
                "chfilm0" => ContentRatingChfilmRating::Chfilm0,
                "chfilm12" => ContentRatingChfilmRating::Chfilm12,
                "chfilm16" => ContentRatingChfilmRating::Chfilm16,
                "chfilm18" => ContentRatingChfilmRating::Chfilm18,
                "chfilm6" => ContentRatingChfilmRating::Chfilm6,
                "chfilmUnrated" => ContentRatingChfilmRating::ChfilmUnrated,
                "chfilmUnspecified" => ContentRatingChfilmRating::ChfilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingChfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingChfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingChfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "chfilm0" => ContentRatingChfilmRating::Chfilm0,
                "chfilm12" => ContentRatingChfilmRating::Chfilm12,
                "chfilm16" => ContentRatingChfilmRating::Chfilm16,
                "chfilm18" => ContentRatingChfilmRating::Chfilm18,
                "chfilm6" => ContentRatingChfilmRating::Chfilm6,
                "chfilmUnrated" => ContentRatingChfilmRating::ChfilmUnrated,
                "chfilmUnspecified" => ContentRatingChfilmRating::ChfilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingChfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingChfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingChvrsRating {
        #[doc = "14A"]
        Chvrs14A,
        #[doc = "18A"]
        Chvrs18A,
        #[doc = "E"]
        ChvrsE,
        #[doc = "G"]
        ChvrsG,
        #[doc = "PG"]
        ChvrsPg,
        #[doc = "R"]
        ChvrsR,
        ChvrsUnrated,
        ChvrsUnspecified,
    }
    impl ContentRatingChvrsRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingChvrsRating::Chvrs14A => "chvrs14a",
                ContentRatingChvrsRating::Chvrs18A => "chvrs18a",
                ContentRatingChvrsRating::ChvrsE => "chvrsE",
                ContentRatingChvrsRating::ChvrsG => "chvrsG",
                ContentRatingChvrsRating::ChvrsPg => "chvrsPg",
                ContentRatingChvrsRating::ChvrsR => "chvrsR",
                ContentRatingChvrsRating::ChvrsUnrated => "chvrsUnrated",
                ContentRatingChvrsRating::ChvrsUnspecified => "chvrsUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingChvrsRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingChvrsRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingChvrsRating, ()> {
            Ok(match s {
                "chvrs14a" => ContentRatingChvrsRating::Chvrs14A,
                "chvrs18a" => ContentRatingChvrsRating::Chvrs18A,
                "chvrsE" => ContentRatingChvrsRating::ChvrsE,
                "chvrsG" => ContentRatingChvrsRating::ChvrsG,
                "chvrsPg" => ContentRatingChvrsRating::ChvrsPg,
                "chvrsR" => ContentRatingChvrsRating::ChvrsR,
                "chvrsUnrated" => ContentRatingChvrsRating::ChvrsUnrated,
                "chvrsUnspecified" => ContentRatingChvrsRating::ChvrsUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingChvrsRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingChvrsRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingChvrsRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "chvrs14a" => ContentRatingChvrsRating::Chvrs14A,
                "chvrs18a" => ContentRatingChvrsRating::Chvrs18A,
                "chvrsE" => ContentRatingChvrsRating::ChvrsE,
                "chvrsG" => ContentRatingChvrsRating::ChvrsG,
                "chvrsPg" => ContentRatingChvrsRating::ChvrsPg,
                "chvrsR" => ContentRatingChvrsRating::ChvrsR,
                "chvrsUnrated" => ContentRatingChvrsRating::ChvrsUnrated,
                "chvrsUnspecified" => ContentRatingChvrsRating::ChvrsUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingChvrsRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingChvrsRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCicfRating {
        #[doc = "E"]
        CicfE,
        #[doc = "KNT/ENA"]
        CicfKntEna,
        #[doc = "KT/EA"]
        CicfKtEa,
        CicfUnrated,
        CicfUnspecified,
    }
    impl ContentRatingCicfRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCicfRating::CicfE => "cicfE",
                ContentRatingCicfRating::CicfKntEna => "cicfKntEna",
                ContentRatingCicfRating::CicfKtEa => "cicfKtEa",
                ContentRatingCicfRating::CicfUnrated => "cicfUnrated",
                ContentRatingCicfRating::CicfUnspecified => "cicfUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCicfRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCicfRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCicfRating, ()> {
            Ok(match s {
                "cicfE" => ContentRatingCicfRating::CicfE,
                "cicfKntEna" => ContentRatingCicfRating::CicfKntEna,
                "cicfKtEa" => ContentRatingCicfRating::CicfKtEa,
                "cicfUnrated" => ContentRatingCicfRating::CicfUnrated,
                "cicfUnspecified" => ContentRatingCicfRating::CicfUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCicfRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCicfRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCicfRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cicfE" => ContentRatingCicfRating::CicfE,
                "cicfKntEna" => ContentRatingCicfRating::CicfKntEna,
                "cicfKtEa" => ContentRatingCicfRating::CicfKtEa,
                "cicfUnrated" => ContentRatingCicfRating::CicfUnrated,
                "cicfUnspecified" => ContentRatingCicfRating::CicfUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCicfRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCicfRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCnaRating {
        #[doc = "12"]
        Cna12,
        #[doc = "15"]
        Cna15,
        #[doc = "18"]
        Cna18,
        #[doc = "18+"]
        Cna18Plus,
        #[doc = "AP"]
        CnaAp,
        CnaUnrated,
        CnaUnspecified,
    }
    impl ContentRatingCnaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCnaRating::Cna12 => "cna12",
                ContentRatingCnaRating::Cna15 => "cna15",
                ContentRatingCnaRating::Cna18 => "cna18",
                ContentRatingCnaRating::Cna18Plus => "cna18plus",
                ContentRatingCnaRating::CnaAp => "cnaAp",
                ContentRatingCnaRating::CnaUnrated => "cnaUnrated",
                ContentRatingCnaRating::CnaUnspecified => "cnaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCnaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCnaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCnaRating, ()> {
            Ok(match s {
                "cna12" => ContentRatingCnaRating::Cna12,
                "cna15" => ContentRatingCnaRating::Cna15,
                "cna18" => ContentRatingCnaRating::Cna18,
                "cna18plus" => ContentRatingCnaRating::Cna18Plus,
                "cnaAp" => ContentRatingCnaRating::CnaAp,
                "cnaUnrated" => ContentRatingCnaRating::CnaUnrated,
                "cnaUnspecified" => ContentRatingCnaRating::CnaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCnaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCnaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCnaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cna12" => ContentRatingCnaRating::Cna12,
                "cna15" => ContentRatingCnaRating::Cna15,
                "cna18" => ContentRatingCnaRating::Cna18,
                "cna18plus" => ContentRatingCnaRating::Cna18Plus,
                "cnaAp" => ContentRatingCnaRating::CnaAp,
                "cnaUnrated" => ContentRatingCnaRating::CnaUnrated,
                "cnaUnspecified" => ContentRatingCnaRating::CnaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCnaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCnaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCncRating {
        #[doc = "10"]
        Cnc10,
        #[doc = "12"]
        Cnc12,
        #[doc = "16"]
        Cnc16,
        #[doc = "18"]
        Cnc18,
        #[doc = "E"]
        CncE,
        #[doc = "interdiction"]
        CncInterdiction,
        #[doc = "T"]
        CncT,
        CncUnrated,
        CncUnspecified,
    }
    impl ContentRatingCncRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCncRating::Cnc10 => "cnc10",
                ContentRatingCncRating::Cnc12 => "cnc12",
                ContentRatingCncRating::Cnc16 => "cnc16",
                ContentRatingCncRating::Cnc18 => "cnc18",
                ContentRatingCncRating::CncE => "cncE",
                ContentRatingCncRating::CncInterdiction => "cncInterdiction",
                ContentRatingCncRating::CncT => "cncT",
                ContentRatingCncRating::CncUnrated => "cncUnrated",
                ContentRatingCncRating::CncUnspecified => "cncUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCncRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCncRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCncRating, ()> {
            Ok(match s {
                "cnc10" => ContentRatingCncRating::Cnc10,
                "cnc12" => ContentRatingCncRating::Cnc12,
                "cnc16" => ContentRatingCncRating::Cnc16,
                "cnc18" => ContentRatingCncRating::Cnc18,
                "cncE" => ContentRatingCncRating::CncE,
                "cncInterdiction" => ContentRatingCncRating::CncInterdiction,
                "cncT" => ContentRatingCncRating::CncT,
                "cncUnrated" => ContentRatingCncRating::CncUnrated,
                "cncUnspecified" => ContentRatingCncRating::CncUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCncRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCncRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCncRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cnc10" => ContentRatingCncRating::Cnc10,
                "cnc12" => ContentRatingCncRating::Cnc12,
                "cnc16" => ContentRatingCncRating::Cnc16,
                "cnc18" => ContentRatingCncRating::Cnc18,
                "cncE" => ContentRatingCncRating::CncE,
                "cncInterdiction" => ContentRatingCncRating::CncInterdiction,
                "cncT" => ContentRatingCncRating::CncT,
                "cncUnrated" => ContentRatingCncRating::CncUnrated,
                "cncUnspecified" => ContentRatingCncRating::CncUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCncRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCncRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCsaRating {
        #[doc = "10"]
        Csa10,
        #[doc = "12"]
        Csa12,
        #[doc = "16"]
        Csa16,
        #[doc = "18"]
        Csa18,
        #[doc = "Interdiction"]
        CsaInterdiction,
        #[doc = "T"]
        CsaT,
        CsaUnrated,
        CsaUnspecified,
    }
    impl ContentRatingCsaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCsaRating::Csa10 => "csa10",
                ContentRatingCsaRating::Csa12 => "csa12",
                ContentRatingCsaRating::Csa16 => "csa16",
                ContentRatingCsaRating::Csa18 => "csa18",
                ContentRatingCsaRating::CsaInterdiction => "csaInterdiction",
                ContentRatingCsaRating::CsaT => "csaT",
                ContentRatingCsaRating::CsaUnrated => "csaUnrated",
                ContentRatingCsaRating::CsaUnspecified => "csaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCsaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCsaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCsaRating, ()> {
            Ok(match s {
                "csa10" => ContentRatingCsaRating::Csa10,
                "csa12" => ContentRatingCsaRating::Csa12,
                "csa16" => ContentRatingCsaRating::Csa16,
                "csa18" => ContentRatingCsaRating::Csa18,
                "csaInterdiction" => ContentRatingCsaRating::CsaInterdiction,
                "csaT" => ContentRatingCsaRating::CsaT,
                "csaUnrated" => ContentRatingCsaRating::CsaUnrated,
                "csaUnspecified" => ContentRatingCsaRating::CsaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCsaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCsaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCsaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "csa10" => ContentRatingCsaRating::Csa10,
                "csa12" => ContentRatingCsaRating::Csa12,
                "csa16" => ContentRatingCsaRating::Csa16,
                "csa18" => ContentRatingCsaRating::Csa18,
                "csaInterdiction" => ContentRatingCsaRating::CsaInterdiction,
                "csaT" => ContentRatingCsaRating::CsaT,
                "csaUnrated" => ContentRatingCsaRating::CsaUnrated,
                "csaUnspecified" => ContentRatingCsaRating::CsaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCsaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCsaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCscfRating {
        #[doc = "12"]
        Cscf12,
        #[doc = "16"]
        Cscf16,
        #[doc = "18"]
        Cscf18,
        #[doc = "6"]
        Cscf6,
        #[doc = "9"]
        Cscf9,
        #[doc = "A"]
        CscfA,
        #[doc = "AL"]
        CscfAl,
        CscfUnrated,
        CscfUnspecified,
    }
    impl ContentRatingCscfRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCscfRating::Cscf12 => "cscf12",
                ContentRatingCscfRating::Cscf16 => "cscf16",
                ContentRatingCscfRating::Cscf18 => "cscf18",
                ContentRatingCscfRating::Cscf6 => "cscf6",
                ContentRatingCscfRating::Cscf9 => "cscf9",
                ContentRatingCscfRating::CscfA => "cscfA",
                ContentRatingCscfRating::CscfAl => "cscfAl",
                ContentRatingCscfRating::CscfUnrated => "cscfUnrated",
                ContentRatingCscfRating::CscfUnspecified => "cscfUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCscfRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCscfRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCscfRating, ()> {
            Ok(match s {
                "cscf12" => ContentRatingCscfRating::Cscf12,
                "cscf16" => ContentRatingCscfRating::Cscf16,
                "cscf18" => ContentRatingCscfRating::Cscf18,
                "cscf6" => ContentRatingCscfRating::Cscf6,
                "cscf9" => ContentRatingCscfRating::Cscf9,
                "cscfA" => ContentRatingCscfRating::CscfA,
                "cscfAl" => ContentRatingCscfRating::CscfAl,
                "cscfUnrated" => ContentRatingCscfRating::CscfUnrated,
                "cscfUnspecified" => ContentRatingCscfRating::CscfUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCscfRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCscfRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCscfRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "cscf12" => ContentRatingCscfRating::Cscf12,
                "cscf16" => ContentRatingCscfRating::Cscf16,
                "cscf18" => ContentRatingCscfRating::Cscf18,
                "cscf6" => ContentRatingCscfRating::Cscf6,
                "cscf9" => ContentRatingCscfRating::Cscf9,
                "cscfA" => ContentRatingCscfRating::CscfA,
                "cscfAl" => ContentRatingCscfRating::CscfAl,
                "cscfUnrated" => ContentRatingCscfRating::CscfUnrated,
                "cscfUnspecified" => ContentRatingCscfRating::CscfUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCscfRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCscfRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingCzfilmRating {
        #[doc = "12"]
        Czfilm12,
        #[doc = "14"]
        Czfilm14,
        #[doc = "18"]
        Czfilm18,
        #[doc = "U"]
        CzfilmU,
        CzfilmUnrated,
        CzfilmUnspecified,
    }
    impl ContentRatingCzfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingCzfilmRating::Czfilm12 => "czfilm12",
                ContentRatingCzfilmRating::Czfilm14 => "czfilm14",
                ContentRatingCzfilmRating::Czfilm18 => "czfilm18",
                ContentRatingCzfilmRating::CzfilmU => "czfilmU",
                ContentRatingCzfilmRating::CzfilmUnrated => "czfilmUnrated",
                ContentRatingCzfilmRating::CzfilmUnspecified => "czfilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingCzfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingCzfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingCzfilmRating, ()> {
            Ok(match s {
                "czfilm12" => ContentRatingCzfilmRating::Czfilm12,
                "czfilm14" => ContentRatingCzfilmRating::Czfilm14,
                "czfilm18" => ContentRatingCzfilmRating::Czfilm18,
                "czfilmU" => ContentRatingCzfilmRating::CzfilmU,
                "czfilmUnrated" => ContentRatingCzfilmRating::CzfilmUnrated,
                "czfilmUnspecified" => ContentRatingCzfilmRating::CzfilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingCzfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingCzfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingCzfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "czfilm12" => ContentRatingCzfilmRating::Czfilm12,
                "czfilm14" => ContentRatingCzfilmRating::Czfilm14,
                "czfilm18" => ContentRatingCzfilmRating::Czfilm18,
                "czfilmU" => ContentRatingCzfilmRating::CzfilmU,
                "czfilmUnrated" => ContentRatingCzfilmRating::CzfilmUnrated,
                "czfilmUnspecified" => ContentRatingCzfilmRating::CzfilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingCzfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingCzfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingDjctqRating {
        #[doc = "10"]
        Djctq10,
        Djctq1012,
        Djctq1014,
        Djctq1016,
        Djctq1018,
        #[doc = "12"]
        Djctq12,
        Djctq1214,
        Djctq1216,
        Djctq1218,
        #[doc = "14"]
        Djctq14,
        Djctq1416,
        Djctq1418,
        #[doc = "16"]
        Djctq16,
        Djctq1618,
        #[doc = "18"]
        Djctq18,
        DjctqEr,
        #[doc = "L"]
        DjctqL,
        DjctqL10,
        DjctqL12,
        DjctqL14,
        DjctqL16,
        DjctqL18,
        DjctqUnrated,
        DjctqUnspecified,
    }
    impl ContentRatingDjctqRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingDjctqRating::Djctq10 => "djctq10",
                ContentRatingDjctqRating::Djctq1012 => "djctq1012",
                ContentRatingDjctqRating::Djctq1014 => "djctq1014",
                ContentRatingDjctqRating::Djctq1016 => "djctq1016",
                ContentRatingDjctqRating::Djctq1018 => "djctq1018",
                ContentRatingDjctqRating::Djctq12 => "djctq12",
                ContentRatingDjctqRating::Djctq1214 => "djctq1214",
                ContentRatingDjctqRating::Djctq1216 => "djctq1216",
                ContentRatingDjctqRating::Djctq1218 => "djctq1218",
                ContentRatingDjctqRating::Djctq14 => "djctq14",
                ContentRatingDjctqRating::Djctq1416 => "djctq1416",
                ContentRatingDjctqRating::Djctq1418 => "djctq1418",
                ContentRatingDjctqRating::Djctq16 => "djctq16",
                ContentRatingDjctqRating::Djctq1618 => "djctq1618",
                ContentRatingDjctqRating::Djctq18 => "djctq18",
                ContentRatingDjctqRating::DjctqEr => "djctqEr",
                ContentRatingDjctqRating::DjctqL => "djctqL",
                ContentRatingDjctqRating::DjctqL10 => "djctqL10",
                ContentRatingDjctqRating::DjctqL12 => "djctqL12",
                ContentRatingDjctqRating::DjctqL14 => "djctqL14",
                ContentRatingDjctqRating::DjctqL16 => "djctqL16",
                ContentRatingDjctqRating::DjctqL18 => "djctqL18",
                ContentRatingDjctqRating::DjctqUnrated => "djctqUnrated",
                ContentRatingDjctqRating::DjctqUnspecified => "djctqUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingDjctqRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingDjctqRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingDjctqRating, ()> {
            Ok(match s {
                "djctq10" => ContentRatingDjctqRating::Djctq10,
                "djctq1012" => ContentRatingDjctqRating::Djctq1012,
                "djctq1014" => ContentRatingDjctqRating::Djctq1014,
                "djctq1016" => ContentRatingDjctqRating::Djctq1016,
                "djctq1018" => ContentRatingDjctqRating::Djctq1018,
                "djctq12" => ContentRatingDjctqRating::Djctq12,
                "djctq1214" => ContentRatingDjctqRating::Djctq1214,
                "djctq1216" => ContentRatingDjctqRating::Djctq1216,
                "djctq1218" => ContentRatingDjctqRating::Djctq1218,
                "djctq14" => ContentRatingDjctqRating::Djctq14,
                "djctq1416" => ContentRatingDjctqRating::Djctq1416,
                "djctq1418" => ContentRatingDjctqRating::Djctq1418,
                "djctq16" => ContentRatingDjctqRating::Djctq16,
                "djctq1618" => ContentRatingDjctqRating::Djctq1618,
                "djctq18" => ContentRatingDjctqRating::Djctq18,
                "djctqEr" => ContentRatingDjctqRating::DjctqEr,
                "djctqL" => ContentRatingDjctqRating::DjctqL,
                "djctqL10" => ContentRatingDjctqRating::DjctqL10,
                "djctqL12" => ContentRatingDjctqRating::DjctqL12,
                "djctqL14" => ContentRatingDjctqRating::DjctqL14,
                "djctqL16" => ContentRatingDjctqRating::DjctqL16,
                "djctqL18" => ContentRatingDjctqRating::DjctqL18,
                "djctqUnrated" => ContentRatingDjctqRating::DjctqUnrated,
                "djctqUnspecified" => ContentRatingDjctqRating::DjctqUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingDjctqRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingDjctqRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingDjctqRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "djctq10" => ContentRatingDjctqRating::Djctq10,
                "djctq1012" => ContentRatingDjctqRating::Djctq1012,
                "djctq1014" => ContentRatingDjctqRating::Djctq1014,
                "djctq1016" => ContentRatingDjctqRating::Djctq1016,
                "djctq1018" => ContentRatingDjctqRating::Djctq1018,
                "djctq12" => ContentRatingDjctqRating::Djctq12,
                "djctq1214" => ContentRatingDjctqRating::Djctq1214,
                "djctq1216" => ContentRatingDjctqRating::Djctq1216,
                "djctq1218" => ContentRatingDjctqRating::Djctq1218,
                "djctq14" => ContentRatingDjctqRating::Djctq14,
                "djctq1416" => ContentRatingDjctqRating::Djctq1416,
                "djctq1418" => ContentRatingDjctqRating::Djctq1418,
                "djctq16" => ContentRatingDjctqRating::Djctq16,
                "djctq1618" => ContentRatingDjctqRating::Djctq1618,
                "djctq18" => ContentRatingDjctqRating::Djctq18,
                "djctqEr" => ContentRatingDjctqRating::DjctqEr,
                "djctqL" => ContentRatingDjctqRating::DjctqL,
                "djctqL10" => ContentRatingDjctqRating::DjctqL10,
                "djctqL12" => ContentRatingDjctqRating::DjctqL12,
                "djctqL14" => ContentRatingDjctqRating::DjctqL14,
                "djctqL16" => ContentRatingDjctqRating::DjctqL16,
                "djctqL18" => ContentRatingDjctqRating::DjctqL18,
                "djctqUnrated" => ContentRatingDjctqRating::DjctqUnrated,
                "djctqUnspecified" => ContentRatingDjctqRating::DjctqUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingDjctqRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingDjctqRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingDjctqRatingReasonsItems {
        DjctqCriminalActs,
        DjctqDrugs,
        DjctqExplicitSex,
        DjctqExtremeViolence,
        DjctqIllegalDrugs,
        DjctqImpactingContent,
        DjctqInappropriateLanguage,
        DjctqLegalDrugs,
        DjctqNudity,
        DjctqRatingReasonUnspecified,
        DjctqSex,
        DjctqSexualContent,
        DjctqViolence,
    }
    impl ContentRatingDjctqRatingReasonsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingDjctqRatingReasonsItems::DjctqCriminalActs => "djctqCriminalActs",
                ContentRatingDjctqRatingReasonsItems::DjctqDrugs => "djctqDrugs",
                ContentRatingDjctqRatingReasonsItems::DjctqExplicitSex => "djctqExplicitSex",
                ContentRatingDjctqRatingReasonsItems::DjctqExtremeViolence => {
                    "djctqExtremeViolence"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqIllegalDrugs => "djctqIllegalDrugs",
                ContentRatingDjctqRatingReasonsItems::DjctqImpactingContent => {
                    "djctqImpactingContent"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqInappropriateLanguage => {
                    "djctqInappropriateLanguage"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqLegalDrugs => "djctqLegalDrugs",
                ContentRatingDjctqRatingReasonsItems::DjctqNudity => "djctqNudity",
                ContentRatingDjctqRatingReasonsItems::DjctqRatingReasonUnspecified => {
                    "djctqRatingReasonUnspecified"
                }
                ContentRatingDjctqRatingReasonsItems::DjctqSex => "djctqSex",
                ContentRatingDjctqRatingReasonsItems::DjctqSexualContent => "djctqSexualContent",
                ContentRatingDjctqRatingReasonsItems::DjctqViolence => "djctqViolence",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingDjctqRatingReasonsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingDjctqRatingReasonsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingDjctqRatingReasonsItems, ()> {
            Ok(match s {
                "djctqCriminalActs" => ContentRatingDjctqRatingReasonsItems::DjctqCriminalActs,
                "djctqDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqDrugs,
                "djctqExplicitSex" => ContentRatingDjctqRatingReasonsItems::DjctqExplicitSex,
                "djctqExtremeViolence" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqExtremeViolence
                }
                "djctqIllegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqIllegalDrugs,
                "djctqImpactingContent" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqImpactingContent
                }
                "djctqInappropriateLanguage" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqInappropriateLanguage
                }
                "djctqLegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqLegalDrugs,
                "djctqNudity" => ContentRatingDjctqRatingReasonsItems::DjctqNudity,
                "djctqRatingReasonUnspecified" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqRatingReasonUnspecified
                }
                "djctqSex" => ContentRatingDjctqRatingReasonsItems::DjctqSex,
                "djctqSexualContent" => ContentRatingDjctqRatingReasonsItems::DjctqSexualContent,
                "djctqViolence" => ContentRatingDjctqRatingReasonsItems::DjctqViolence,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingDjctqRatingReasonsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingDjctqRatingReasonsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingDjctqRatingReasonsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "djctqCriminalActs" => ContentRatingDjctqRatingReasonsItems::DjctqCriminalActs,
                "djctqDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqDrugs,
                "djctqExplicitSex" => ContentRatingDjctqRatingReasonsItems::DjctqExplicitSex,
                "djctqExtremeViolence" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqExtremeViolence
                }
                "djctqIllegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqIllegalDrugs,
                "djctqImpactingContent" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqImpactingContent
                }
                "djctqInappropriateLanguage" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqInappropriateLanguage
                }
                "djctqLegalDrugs" => ContentRatingDjctqRatingReasonsItems::DjctqLegalDrugs,
                "djctqNudity" => ContentRatingDjctqRatingReasonsItems::DjctqNudity,
                "djctqRatingReasonUnspecified" => {
                    ContentRatingDjctqRatingReasonsItems::DjctqRatingReasonUnspecified
                }
                "djctqSex" => ContentRatingDjctqRatingReasonsItems::DjctqSex,
                "djctqSexualContent" => ContentRatingDjctqRatingReasonsItems::DjctqSexualContent,
                "djctqViolence" => ContentRatingDjctqRatingReasonsItems::DjctqViolence,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingDjctqRatingReasonsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingDjctqRatingReasonsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEcbmctRating {
        #[doc = "13A"]
        Ecbmct13A,
        #[doc = "13+"]
        Ecbmct13Plus,
        #[doc = "15A"]
        Ecbmct15A,
        #[doc = "15+"]
        Ecbmct15Plus,
        #[doc = "18+"]
        Ecbmct18Plus,
        #[doc = "7A"]
        Ecbmct7A,
        #[doc = "7+"]
        Ecbmct7Plus,
        #[doc = "G"]
        EcbmctG,
        EcbmctUnrated,
        EcbmctUnspecified,
    }
    impl ContentRatingEcbmctRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEcbmctRating::Ecbmct13A => "ecbmct13a",
                ContentRatingEcbmctRating::Ecbmct13Plus => "ecbmct13plus",
                ContentRatingEcbmctRating::Ecbmct15A => "ecbmct15a",
                ContentRatingEcbmctRating::Ecbmct15Plus => "ecbmct15plus",
                ContentRatingEcbmctRating::Ecbmct18Plus => "ecbmct18plus",
                ContentRatingEcbmctRating::Ecbmct7A => "ecbmct7a",
                ContentRatingEcbmctRating::Ecbmct7Plus => "ecbmct7plus",
                ContentRatingEcbmctRating::EcbmctG => "ecbmctG",
                ContentRatingEcbmctRating::EcbmctUnrated => "ecbmctUnrated",
                ContentRatingEcbmctRating::EcbmctUnspecified => "ecbmctUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEcbmctRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEcbmctRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEcbmctRating, ()> {
            Ok(match s {
                "ecbmct13a" => ContentRatingEcbmctRating::Ecbmct13A,
                "ecbmct13plus" => ContentRatingEcbmctRating::Ecbmct13Plus,
                "ecbmct15a" => ContentRatingEcbmctRating::Ecbmct15A,
                "ecbmct15plus" => ContentRatingEcbmctRating::Ecbmct15Plus,
                "ecbmct18plus" => ContentRatingEcbmctRating::Ecbmct18Plus,
                "ecbmct7a" => ContentRatingEcbmctRating::Ecbmct7A,
                "ecbmct7plus" => ContentRatingEcbmctRating::Ecbmct7Plus,
                "ecbmctG" => ContentRatingEcbmctRating::EcbmctG,
                "ecbmctUnrated" => ContentRatingEcbmctRating::EcbmctUnrated,
                "ecbmctUnspecified" => ContentRatingEcbmctRating::EcbmctUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEcbmctRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEcbmctRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEcbmctRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ecbmct13a" => ContentRatingEcbmctRating::Ecbmct13A,
                "ecbmct13plus" => ContentRatingEcbmctRating::Ecbmct13Plus,
                "ecbmct15a" => ContentRatingEcbmctRating::Ecbmct15A,
                "ecbmct15plus" => ContentRatingEcbmctRating::Ecbmct15Plus,
                "ecbmct18plus" => ContentRatingEcbmctRating::Ecbmct18Plus,
                "ecbmct7a" => ContentRatingEcbmctRating::Ecbmct7A,
                "ecbmct7plus" => ContentRatingEcbmctRating::Ecbmct7Plus,
                "ecbmctG" => ContentRatingEcbmctRating::EcbmctG,
                "ecbmctUnrated" => ContentRatingEcbmctRating::EcbmctUnrated,
                "ecbmctUnspecified" => ContentRatingEcbmctRating::EcbmctUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEcbmctRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEcbmctRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEefilmRating {
        #[doc = "K-12"]
        EefilmK12,
        #[doc = "K-14"]
        EefilmK14,
        #[doc = "K-16"]
        EefilmK16,
        #[doc = "K-6"]
        EefilmK6,
        #[doc = "L"]
        EefilmL,
        #[doc = "MS-12"]
        EefilmMs12,
        #[doc = "MS-6"]
        EefilmMs6,
        #[doc = "Pere"]
        EefilmPere,
        EefilmUnrated,
        EefilmUnspecified,
    }
    impl ContentRatingEefilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEefilmRating::EefilmK12 => "eefilmK12",
                ContentRatingEefilmRating::EefilmK14 => "eefilmK14",
                ContentRatingEefilmRating::EefilmK16 => "eefilmK16",
                ContentRatingEefilmRating::EefilmK6 => "eefilmK6",
                ContentRatingEefilmRating::EefilmL => "eefilmL",
                ContentRatingEefilmRating::EefilmMs12 => "eefilmMs12",
                ContentRatingEefilmRating::EefilmMs6 => "eefilmMs6",
                ContentRatingEefilmRating::EefilmPere => "eefilmPere",
                ContentRatingEefilmRating::EefilmUnrated => "eefilmUnrated",
                ContentRatingEefilmRating::EefilmUnspecified => "eefilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEefilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEefilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEefilmRating, ()> {
            Ok(match s {
                "eefilmK12" => ContentRatingEefilmRating::EefilmK12,
                "eefilmK14" => ContentRatingEefilmRating::EefilmK14,
                "eefilmK16" => ContentRatingEefilmRating::EefilmK16,
                "eefilmK6" => ContentRatingEefilmRating::EefilmK6,
                "eefilmL" => ContentRatingEefilmRating::EefilmL,
                "eefilmMs12" => ContentRatingEefilmRating::EefilmMs12,
                "eefilmMs6" => ContentRatingEefilmRating::EefilmMs6,
                "eefilmPere" => ContentRatingEefilmRating::EefilmPere,
                "eefilmUnrated" => ContentRatingEefilmRating::EefilmUnrated,
                "eefilmUnspecified" => ContentRatingEefilmRating::EefilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEefilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEefilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEefilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "eefilmK12" => ContentRatingEefilmRating::EefilmK12,
                "eefilmK14" => ContentRatingEefilmRating::EefilmK14,
                "eefilmK16" => ContentRatingEefilmRating::EefilmK16,
                "eefilmK6" => ContentRatingEefilmRating::EefilmK6,
                "eefilmL" => ContentRatingEefilmRating::EefilmL,
                "eefilmMs12" => ContentRatingEefilmRating::EefilmMs12,
                "eefilmMs6" => ContentRatingEefilmRating::EefilmMs6,
                "eefilmPere" => ContentRatingEefilmRating::EefilmPere,
                "eefilmUnrated" => ContentRatingEefilmRating::EefilmUnrated,
                "eefilmUnspecified" => ContentRatingEefilmRating::EefilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEefilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEefilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEgfilmRating {
        #[doc = "18"]
        Egfilm18,
        #[doc = "BN"]
        EgfilmBn,
        #[doc = "GN"]
        EgfilmGn,
        EgfilmUnrated,
        EgfilmUnspecified,
    }
    impl ContentRatingEgfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEgfilmRating::Egfilm18 => "egfilm18",
                ContentRatingEgfilmRating::EgfilmBn => "egfilmBn",
                ContentRatingEgfilmRating::EgfilmGn => "egfilmGn",
                ContentRatingEgfilmRating::EgfilmUnrated => "egfilmUnrated",
                ContentRatingEgfilmRating::EgfilmUnspecified => "egfilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEgfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEgfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEgfilmRating, ()> {
            Ok(match s {
                "egfilm18" => ContentRatingEgfilmRating::Egfilm18,
                "egfilmBn" => ContentRatingEgfilmRating::EgfilmBn,
                "egfilmGn" => ContentRatingEgfilmRating::EgfilmGn,
                "egfilmUnrated" => ContentRatingEgfilmRating::EgfilmUnrated,
                "egfilmUnspecified" => ContentRatingEgfilmRating::EgfilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEgfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEgfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEgfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "egfilm18" => ContentRatingEgfilmRating::Egfilm18,
                "egfilmBn" => ContentRatingEgfilmRating::EgfilmBn,
                "egfilmGn" => ContentRatingEgfilmRating::EgfilmGn,
                "egfilmUnrated" => ContentRatingEgfilmRating::EgfilmUnrated,
                "egfilmUnspecified" => ContentRatingEgfilmRating::EgfilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEgfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEgfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingEirinRating {
        #[doc = "G"]
        EirinG,
        #[doc = "PG-12"]
        EirinPg12,
        #[doc = "R15+"]
        EirinR15Plus,
        #[doc = "R18+"]
        EirinR18Plus,
        EirinUnrated,
        EirinUnspecified,
    }
    impl ContentRatingEirinRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingEirinRating::EirinG => "eirinG",
                ContentRatingEirinRating::EirinPg12 => "eirinPg12",
                ContentRatingEirinRating::EirinR15Plus => "eirinR15plus",
                ContentRatingEirinRating::EirinR18Plus => "eirinR18plus",
                ContentRatingEirinRating::EirinUnrated => "eirinUnrated",
                ContentRatingEirinRating::EirinUnspecified => "eirinUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingEirinRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingEirinRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingEirinRating, ()> {
            Ok(match s {
                "eirinG" => ContentRatingEirinRating::EirinG,
                "eirinPg12" => ContentRatingEirinRating::EirinPg12,
                "eirinR15plus" => ContentRatingEirinRating::EirinR15Plus,
                "eirinR18plus" => ContentRatingEirinRating::EirinR18Plus,
                "eirinUnrated" => ContentRatingEirinRating::EirinUnrated,
                "eirinUnspecified" => ContentRatingEirinRating::EirinUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingEirinRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingEirinRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingEirinRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "eirinG" => ContentRatingEirinRating::EirinG,
                "eirinPg12" => ContentRatingEirinRating::EirinPg12,
                "eirinR15plus" => ContentRatingEirinRating::EirinR15Plus,
                "eirinR18plus" => ContentRatingEirinRating::EirinR18Plus,
                "eirinUnrated" => ContentRatingEirinRating::EirinUnrated,
                "eirinUnspecified" => ContentRatingEirinRating::EirinUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingEirinRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingEirinRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFcbmRating {
        #[doc = "18"]
        Fcbm18,
        #[doc = "18PA"]
        Fcbm18Pa,
        #[doc = "18PL"]
        Fcbm18Pl,
        #[doc = "18SG"]
        Fcbm18Sg,
        #[doc = "18SX"]
        Fcbm18Sx,
        #[doc = "P13"]
        FcbmP13,
        #[doc = "PG13"]
        FcbmPg13,
        #[doc = "U"]
        FcbmU,
        FcbmUnrated,
        FcbmUnspecified,
    }
    impl ContentRatingFcbmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFcbmRating::Fcbm18 => "fcbm18",
                ContentRatingFcbmRating::Fcbm18Pa => "fcbm18pa",
                ContentRatingFcbmRating::Fcbm18Pl => "fcbm18pl",
                ContentRatingFcbmRating::Fcbm18Sg => "fcbm18sg",
                ContentRatingFcbmRating::Fcbm18Sx => "fcbm18sx",
                ContentRatingFcbmRating::FcbmP13 => "fcbmP13",
                ContentRatingFcbmRating::FcbmPg13 => "fcbmPg13",
                ContentRatingFcbmRating::FcbmU => "fcbmU",
                ContentRatingFcbmRating::FcbmUnrated => "fcbmUnrated",
                ContentRatingFcbmRating::FcbmUnspecified => "fcbmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFcbmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFcbmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFcbmRating, ()> {
            Ok(match s {
                "fcbm18" => ContentRatingFcbmRating::Fcbm18,
                "fcbm18pa" => ContentRatingFcbmRating::Fcbm18Pa,
                "fcbm18pl" => ContentRatingFcbmRating::Fcbm18Pl,
                "fcbm18sg" => ContentRatingFcbmRating::Fcbm18Sg,
                "fcbm18sx" => ContentRatingFcbmRating::Fcbm18Sx,
                "fcbmP13" => ContentRatingFcbmRating::FcbmP13,
                "fcbmPg13" => ContentRatingFcbmRating::FcbmPg13,
                "fcbmU" => ContentRatingFcbmRating::FcbmU,
                "fcbmUnrated" => ContentRatingFcbmRating::FcbmUnrated,
                "fcbmUnspecified" => ContentRatingFcbmRating::FcbmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFcbmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFcbmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFcbmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fcbm18" => ContentRatingFcbmRating::Fcbm18,
                "fcbm18pa" => ContentRatingFcbmRating::Fcbm18Pa,
                "fcbm18pl" => ContentRatingFcbmRating::Fcbm18Pl,
                "fcbm18sg" => ContentRatingFcbmRating::Fcbm18Sg,
                "fcbm18sx" => ContentRatingFcbmRating::Fcbm18Sx,
                "fcbmP13" => ContentRatingFcbmRating::FcbmP13,
                "fcbmPg13" => ContentRatingFcbmRating::FcbmPg13,
                "fcbmU" => ContentRatingFcbmRating::FcbmU,
                "fcbmUnrated" => ContentRatingFcbmRating::FcbmUnrated,
                "fcbmUnspecified" => ContentRatingFcbmRating::FcbmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFcbmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFcbmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFcoRating {
        #[doc = "I"]
        FcoI,
        #[doc = "II"]
        FcoIi,
        #[doc = "IIA"]
        FcoIia,
        #[doc = "IIB"]
        FcoIib,
        #[doc = "III"]
        FcoIii,
        FcoUnrated,
        FcoUnspecified,
    }
    impl ContentRatingFcoRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFcoRating::FcoI => "fcoI",
                ContentRatingFcoRating::FcoIi => "fcoIi",
                ContentRatingFcoRating::FcoIia => "fcoIia",
                ContentRatingFcoRating::FcoIib => "fcoIib",
                ContentRatingFcoRating::FcoIii => "fcoIii",
                ContentRatingFcoRating::FcoUnrated => "fcoUnrated",
                ContentRatingFcoRating::FcoUnspecified => "fcoUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFcoRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFcoRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFcoRating, ()> {
            Ok(match s {
                "fcoI" => ContentRatingFcoRating::FcoI,
                "fcoIi" => ContentRatingFcoRating::FcoIi,
                "fcoIia" => ContentRatingFcoRating::FcoIia,
                "fcoIib" => ContentRatingFcoRating::FcoIib,
                "fcoIii" => ContentRatingFcoRating::FcoIii,
                "fcoUnrated" => ContentRatingFcoRating::FcoUnrated,
                "fcoUnspecified" => ContentRatingFcoRating::FcoUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFcoRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFcoRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFcoRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fcoI" => ContentRatingFcoRating::FcoI,
                "fcoIi" => ContentRatingFcoRating::FcoIi,
                "fcoIia" => ContentRatingFcoRating::FcoIia,
                "fcoIib" => ContentRatingFcoRating::FcoIib,
                "fcoIii" => ContentRatingFcoRating::FcoIii,
                "fcoUnrated" => ContentRatingFcoRating::FcoUnrated,
                "fcoUnspecified" => ContentRatingFcoRating::FcoUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFcoRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFcoRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFmocRating {
        #[doc = "10"]
        Fmoc10,
        #[doc = "12"]
        Fmoc12,
        #[doc = "16"]
        Fmoc16,
        #[doc = "18"]
        Fmoc18,
        #[doc = "E"]
        FmocE,
        #[doc = "U"]
        FmocU,
        FmocUnrated,
        FmocUnspecified,
    }
    impl ContentRatingFmocRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFmocRating::Fmoc10 => "fmoc10",
                ContentRatingFmocRating::Fmoc12 => "fmoc12",
                ContentRatingFmocRating::Fmoc16 => "fmoc16",
                ContentRatingFmocRating::Fmoc18 => "fmoc18",
                ContentRatingFmocRating::FmocE => "fmocE",
                ContentRatingFmocRating::FmocU => "fmocU",
                ContentRatingFmocRating::FmocUnrated => "fmocUnrated",
                ContentRatingFmocRating::FmocUnspecified => "fmocUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFmocRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFmocRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFmocRating, ()> {
            Ok(match s {
                "fmoc10" => ContentRatingFmocRating::Fmoc10,
                "fmoc12" => ContentRatingFmocRating::Fmoc12,
                "fmoc16" => ContentRatingFmocRating::Fmoc16,
                "fmoc18" => ContentRatingFmocRating::Fmoc18,
                "fmocE" => ContentRatingFmocRating::FmocE,
                "fmocU" => ContentRatingFmocRating::FmocU,
                "fmocUnrated" => ContentRatingFmocRating::FmocUnrated,
                "fmocUnspecified" => ContentRatingFmocRating::FmocUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFmocRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFmocRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFmocRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fmoc10" => ContentRatingFmocRating::Fmoc10,
                "fmoc12" => ContentRatingFmocRating::Fmoc12,
                "fmoc16" => ContentRatingFmocRating::Fmoc16,
                "fmoc18" => ContentRatingFmocRating::Fmoc18,
                "fmocE" => ContentRatingFmocRating::FmocE,
                "fmocU" => ContentRatingFmocRating::FmocU,
                "fmocUnrated" => ContentRatingFmocRating::FmocUnrated,
                "fmocUnspecified" => ContentRatingFmocRating::FmocUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFmocRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFmocRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFpbRating {
        #[doc = "10"]
        Fpb10,
        #[doc = "10-12PG"]
        Fpb1012Pg,
        #[doc = "13"]
        Fpb13,
        #[doc = "16"]
        Fpb16,
        #[doc = "18"]
        Fpb18,
        #[doc = "7-9PG"]
        Fpb79Pg,
        #[doc = "A"]
        FpbA,
        #[doc = "PG"]
        FpbPg,
        FpbUnrated,
        FpbUnspecified,
        #[doc = "X18"]
        FpbX18,
        #[doc = "XX"]
        FpbXx,
    }
    impl ContentRatingFpbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFpbRating::Fpb10 => "fpb10",
                ContentRatingFpbRating::Fpb1012Pg => "fpb1012Pg",
                ContentRatingFpbRating::Fpb13 => "fpb13",
                ContentRatingFpbRating::Fpb16 => "fpb16",
                ContentRatingFpbRating::Fpb18 => "fpb18",
                ContentRatingFpbRating::Fpb79Pg => "fpb79Pg",
                ContentRatingFpbRating::FpbA => "fpbA",
                ContentRatingFpbRating::FpbPg => "fpbPg",
                ContentRatingFpbRating::FpbUnrated => "fpbUnrated",
                ContentRatingFpbRating::FpbUnspecified => "fpbUnspecified",
                ContentRatingFpbRating::FpbX18 => "fpbX18",
                ContentRatingFpbRating::FpbXx => "fpbXx",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFpbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFpbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFpbRating, ()> {
            Ok(match s {
                "fpb10" => ContentRatingFpbRating::Fpb10,
                "fpb1012Pg" => ContentRatingFpbRating::Fpb1012Pg,
                "fpb13" => ContentRatingFpbRating::Fpb13,
                "fpb16" => ContentRatingFpbRating::Fpb16,
                "fpb18" => ContentRatingFpbRating::Fpb18,
                "fpb79Pg" => ContentRatingFpbRating::Fpb79Pg,
                "fpbA" => ContentRatingFpbRating::FpbA,
                "fpbPg" => ContentRatingFpbRating::FpbPg,
                "fpbUnrated" => ContentRatingFpbRating::FpbUnrated,
                "fpbUnspecified" => ContentRatingFpbRating::FpbUnspecified,
                "fpbX18" => ContentRatingFpbRating::FpbX18,
                "fpbXx" => ContentRatingFpbRating::FpbXx,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFpbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFpbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFpbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fpb10" => ContentRatingFpbRating::Fpb10,
                "fpb1012Pg" => ContentRatingFpbRating::Fpb1012Pg,
                "fpb13" => ContentRatingFpbRating::Fpb13,
                "fpb16" => ContentRatingFpbRating::Fpb16,
                "fpb18" => ContentRatingFpbRating::Fpb18,
                "fpb79Pg" => ContentRatingFpbRating::Fpb79Pg,
                "fpbA" => ContentRatingFpbRating::FpbA,
                "fpbPg" => ContentRatingFpbRating::FpbPg,
                "fpbUnrated" => ContentRatingFpbRating::FpbUnrated,
                "fpbUnspecified" => ContentRatingFpbRating::FpbUnspecified,
                "fpbX18" => ContentRatingFpbRating::FpbX18,
                "fpbXx" => ContentRatingFpbRating::FpbXx,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFpbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFpbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFpbRatingReasonsItems {
        FpbBlasphemy,
        FpbCriminalTechniques,
        FpbDrugs,
        FpbHorror,
        FpbImitativeActsTechniques,
        FpbLanguage,
        FpbNudity,
        FpbPrejudice,
        FpbRatingReasonUnspecified,
        FpbSex,
        FpbSexualViolence,
        FpbViolence,
    }
    impl ContentRatingFpbRatingReasonsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFpbRatingReasonsItems::FpbBlasphemy => "fpbBlasphemy",
                ContentRatingFpbRatingReasonsItems::FpbCriminalTechniques => {
                    "fpbCriminalTechniques"
                }
                ContentRatingFpbRatingReasonsItems::FpbDrugs => "fpbDrugs",
                ContentRatingFpbRatingReasonsItems::FpbHorror => "fpbHorror",
                ContentRatingFpbRatingReasonsItems::FpbImitativeActsTechniques => {
                    "fpbImitativeActsTechniques"
                }
                ContentRatingFpbRatingReasonsItems::FpbLanguage => "fpbLanguage",
                ContentRatingFpbRatingReasonsItems::FpbNudity => "fpbNudity",
                ContentRatingFpbRatingReasonsItems::FpbPrejudice => "fpbPrejudice",
                ContentRatingFpbRatingReasonsItems::FpbRatingReasonUnspecified => {
                    "fpbRatingReasonUnspecified"
                }
                ContentRatingFpbRatingReasonsItems::FpbSex => "fpbSex",
                ContentRatingFpbRatingReasonsItems::FpbSexualViolence => "fpbSexualViolence",
                ContentRatingFpbRatingReasonsItems::FpbViolence => "fpbViolence",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFpbRatingReasonsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFpbRatingReasonsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFpbRatingReasonsItems, ()> {
            Ok(match s {
                "fpbBlasphemy" => ContentRatingFpbRatingReasonsItems::FpbBlasphemy,
                "fpbCriminalTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbCriminalTechniques
                }
                "fpbDrugs" => ContentRatingFpbRatingReasonsItems::FpbDrugs,
                "fpbHorror" => ContentRatingFpbRatingReasonsItems::FpbHorror,
                "fpbImitativeActsTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbImitativeActsTechniques
                }
                "fpbLanguage" => ContentRatingFpbRatingReasonsItems::FpbLanguage,
                "fpbNudity" => ContentRatingFpbRatingReasonsItems::FpbNudity,
                "fpbPrejudice" => ContentRatingFpbRatingReasonsItems::FpbPrejudice,
                "fpbRatingReasonUnspecified" => {
                    ContentRatingFpbRatingReasonsItems::FpbRatingReasonUnspecified
                }
                "fpbSex" => ContentRatingFpbRatingReasonsItems::FpbSex,
                "fpbSexualViolence" => ContentRatingFpbRatingReasonsItems::FpbSexualViolence,
                "fpbViolence" => ContentRatingFpbRatingReasonsItems::FpbViolence,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFpbRatingReasonsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFpbRatingReasonsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFpbRatingReasonsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fpbBlasphemy" => ContentRatingFpbRatingReasonsItems::FpbBlasphemy,
                "fpbCriminalTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbCriminalTechniques
                }
                "fpbDrugs" => ContentRatingFpbRatingReasonsItems::FpbDrugs,
                "fpbHorror" => ContentRatingFpbRatingReasonsItems::FpbHorror,
                "fpbImitativeActsTechniques" => {
                    ContentRatingFpbRatingReasonsItems::FpbImitativeActsTechniques
                }
                "fpbLanguage" => ContentRatingFpbRatingReasonsItems::FpbLanguage,
                "fpbNudity" => ContentRatingFpbRatingReasonsItems::FpbNudity,
                "fpbPrejudice" => ContentRatingFpbRatingReasonsItems::FpbPrejudice,
                "fpbRatingReasonUnspecified" => {
                    ContentRatingFpbRatingReasonsItems::FpbRatingReasonUnspecified
                }
                "fpbSex" => ContentRatingFpbRatingReasonsItems::FpbSex,
                "fpbSexualViolence" => ContentRatingFpbRatingReasonsItems::FpbSexualViolence,
                "fpbViolence" => ContentRatingFpbRatingReasonsItems::FpbViolence,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFpbRatingReasonsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFpbRatingReasonsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingFskRating {
        #[doc = "FSK 0"]
        Fsk0,
        #[doc = "FSK 12"]
        Fsk12,
        #[doc = "FSK 16"]
        Fsk16,
        #[doc = "FSK 18"]
        Fsk18,
        #[doc = "FSK 6"]
        Fsk6,
        FskUnrated,
        FskUnspecified,
    }
    impl ContentRatingFskRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingFskRating::Fsk0 => "fsk0",
                ContentRatingFskRating::Fsk12 => "fsk12",
                ContentRatingFskRating::Fsk16 => "fsk16",
                ContentRatingFskRating::Fsk18 => "fsk18",
                ContentRatingFskRating::Fsk6 => "fsk6",
                ContentRatingFskRating::FskUnrated => "fskUnrated",
                ContentRatingFskRating::FskUnspecified => "fskUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingFskRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingFskRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingFskRating, ()> {
            Ok(match s {
                "fsk0" => ContentRatingFskRating::Fsk0,
                "fsk12" => ContentRatingFskRating::Fsk12,
                "fsk16" => ContentRatingFskRating::Fsk16,
                "fsk18" => ContentRatingFskRating::Fsk18,
                "fsk6" => ContentRatingFskRating::Fsk6,
                "fskUnrated" => ContentRatingFskRating::FskUnrated,
                "fskUnspecified" => ContentRatingFskRating::FskUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingFskRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingFskRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingFskRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "fsk0" => ContentRatingFskRating::Fsk0,
                "fsk12" => ContentRatingFskRating::Fsk12,
                "fsk16" => ContentRatingFskRating::Fsk16,
                "fsk18" => ContentRatingFskRating::Fsk18,
                "fsk6" => ContentRatingFskRating::Fsk6,
                "fskUnrated" => ContentRatingFskRating::FskUnrated,
                "fskUnspecified" => ContentRatingFskRating::FskUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingFskRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingFskRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingGrfilmRating {
        #[doc = "E"]
        GrfilmE,
        #[doc = "K"]
        GrfilmK,
        #[doc = "K-12"]
        GrfilmK12,
        #[doc = "K-13"]
        GrfilmK13,
        #[doc = "K-15"]
        GrfilmK15,
        #[doc = "K-17"]
        GrfilmK17,
        #[doc = "K-18"]
        GrfilmK18,
        GrfilmUnrated,
        GrfilmUnspecified,
    }
    impl ContentRatingGrfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingGrfilmRating::GrfilmE => "grfilmE",
                ContentRatingGrfilmRating::GrfilmK => "grfilmK",
                ContentRatingGrfilmRating::GrfilmK12 => "grfilmK12",
                ContentRatingGrfilmRating::GrfilmK13 => "grfilmK13",
                ContentRatingGrfilmRating::GrfilmK15 => "grfilmK15",
                ContentRatingGrfilmRating::GrfilmK17 => "grfilmK17",
                ContentRatingGrfilmRating::GrfilmK18 => "grfilmK18",
                ContentRatingGrfilmRating::GrfilmUnrated => "grfilmUnrated",
                ContentRatingGrfilmRating::GrfilmUnspecified => "grfilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingGrfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingGrfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingGrfilmRating, ()> {
            Ok(match s {
                "grfilmE" => ContentRatingGrfilmRating::GrfilmE,
                "grfilmK" => ContentRatingGrfilmRating::GrfilmK,
                "grfilmK12" => ContentRatingGrfilmRating::GrfilmK12,
                "grfilmK13" => ContentRatingGrfilmRating::GrfilmK13,
                "grfilmK15" => ContentRatingGrfilmRating::GrfilmK15,
                "grfilmK17" => ContentRatingGrfilmRating::GrfilmK17,
                "grfilmK18" => ContentRatingGrfilmRating::GrfilmK18,
                "grfilmUnrated" => ContentRatingGrfilmRating::GrfilmUnrated,
                "grfilmUnspecified" => ContentRatingGrfilmRating::GrfilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingGrfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingGrfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingGrfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "grfilmE" => ContentRatingGrfilmRating::GrfilmE,
                "grfilmK" => ContentRatingGrfilmRating::GrfilmK,
                "grfilmK12" => ContentRatingGrfilmRating::GrfilmK12,
                "grfilmK13" => ContentRatingGrfilmRating::GrfilmK13,
                "grfilmK15" => ContentRatingGrfilmRating::GrfilmK15,
                "grfilmK17" => ContentRatingGrfilmRating::GrfilmK17,
                "grfilmK18" => ContentRatingGrfilmRating::GrfilmK18,
                "grfilmUnrated" => ContentRatingGrfilmRating::GrfilmUnrated,
                "grfilmUnspecified" => ContentRatingGrfilmRating::GrfilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingGrfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingGrfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIcaaRating {
        #[doc = "12"]
        Icaa12,
        #[doc = "13"]
        Icaa13,
        #[doc = "16"]
        Icaa16,
        #[doc = "18"]
        Icaa18,
        #[doc = "7"]
        Icaa7,
        #[doc = "APTA"]
        IcaaApta,
        IcaaUnrated,
        IcaaUnspecified,
        #[doc = "X"]
        IcaaX,
    }
    impl ContentRatingIcaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIcaaRating::Icaa12 => "icaa12",
                ContentRatingIcaaRating::Icaa13 => "icaa13",
                ContentRatingIcaaRating::Icaa16 => "icaa16",
                ContentRatingIcaaRating::Icaa18 => "icaa18",
                ContentRatingIcaaRating::Icaa7 => "icaa7",
                ContentRatingIcaaRating::IcaaApta => "icaaApta",
                ContentRatingIcaaRating::IcaaUnrated => "icaaUnrated",
                ContentRatingIcaaRating::IcaaUnspecified => "icaaUnspecified",
                ContentRatingIcaaRating::IcaaX => "icaaX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIcaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIcaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIcaaRating, ()> {
            Ok(match s {
                "icaa12" => ContentRatingIcaaRating::Icaa12,
                "icaa13" => ContentRatingIcaaRating::Icaa13,
                "icaa16" => ContentRatingIcaaRating::Icaa16,
                "icaa18" => ContentRatingIcaaRating::Icaa18,
                "icaa7" => ContentRatingIcaaRating::Icaa7,
                "icaaApta" => ContentRatingIcaaRating::IcaaApta,
                "icaaUnrated" => ContentRatingIcaaRating::IcaaUnrated,
                "icaaUnspecified" => ContentRatingIcaaRating::IcaaUnspecified,
                "icaaX" => ContentRatingIcaaRating::IcaaX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIcaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIcaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIcaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "icaa12" => ContentRatingIcaaRating::Icaa12,
                "icaa13" => ContentRatingIcaaRating::Icaa13,
                "icaa16" => ContentRatingIcaaRating::Icaa16,
                "icaa18" => ContentRatingIcaaRating::Icaa18,
                "icaa7" => ContentRatingIcaaRating::Icaa7,
                "icaaApta" => ContentRatingIcaaRating::IcaaApta,
                "icaaUnrated" => ContentRatingIcaaRating::IcaaUnrated,
                "icaaUnspecified" => ContentRatingIcaaRating::IcaaUnspecified,
                "icaaX" => ContentRatingIcaaRating::IcaaX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIcaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIcaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIfcoRating {
        #[doc = "12"]
        Ifco12,
        #[doc = "12A"]
        Ifco12A,
        #[doc = "15"]
        Ifco15,
        #[doc = "15A"]
        Ifco15A,
        #[doc = "16"]
        Ifco16,
        #[doc = "18"]
        Ifco18,
        #[doc = "G"]
        IfcoG,
        #[doc = "PG"]
        IfcoPg,
        IfcoUnrated,
        IfcoUnspecified,
    }
    impl ContentRatingIfcoRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIfcoRating::Ifco12 => "ifco12",
                ContentRatingIfcoRating::Ifco12A => "ifco12a",
                ContentRatingIfcoRating::Ifco15 => "ifco15",
                ContentRatingIfcoRating::Ifco15A => "ifco15a",
                ContentRatingIfcoRating::Ifco16 => "ifco16",
                ContentRatingIfcoRating::Ifco18 => "ifco18",
                ContentRatingIfcoRating::IfcoG => "ifcoG",
                ContentRatingIfcoRating::IfcoPg => "ifcoPg",
                ContentRatingIfcoRating::IfcoUnrated => "ifcoUnrated",
                ContentRatingIfcoRating::IfcoUnspecified => "ifcoUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIfcoRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIfcoRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIfcoRating, ()> {
            Ok(match s {
                "ifco12" => ContentRatingIfcoRating::Ifco12,
                "ifco12a" => ContentRatingIfcoRating::Ifco12A,
                "ifco15" => ContentRatingIfcoRating::Ifco15,
                "ifco15a" => ContentRatingIfcoRating::Ifco15A,
                "ifco16" => ContentRatingIfcoRating::Ifco16,
                "ifco18" => ContentRatingIfcoRating::Ifco18,
                "ifcoG" => ContentRatingIfcoRating::IfcoG,
                "ifcoPg" => ContentRatingIfcoRating::IfcoPg,
                "ifcoUnrated" => ContentRatingIfcoRating::IfcoUnrated,
                "ifcoUnspecified" => ContentRatingIfcoRating::IfcoUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIfcoRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIfcoRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIfcoRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ifco12" => ContentRatingIfcoRating::Ifco12,
                "ifco12a" => ContentRatingIfcoRating::Ifco12A,
                "ifco15" => ContentRatingIfcoRating::Ifco15,
                "ifco15a" => ContentRatingIfcoRating::Ifco15A,
                "ifco16" => ContentRatingIfcoRating::Ifco16,
                "ifco18" => ContentRatingIfcoRating::Ifco18,
                "ifcoG" => ContentRatingIfcoRating::IfcoG,
                "ifcoPg" => ContentRatingIfcoRating::IfcoPg,
                "ifcoUnrated" => ContentRatingIfcoRating::IfcoUnrated,
                "ifcoUnspecified" => ContentRatingIfcoRating::IfcoUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIfcoRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIfcoRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIlfilmRating {
        #[doc = "12"]
        Ilfilm12,
        #[doc = "14"]
        Ilfilm14,
        #[doc = "16"]
        Ilfilm16,
        #[doc = "18"]
        Ilfilm18,
        #[doc = "AA"]
        IlfilmAa,
        IlfilmUnrated,
        IlfilmUnspecified,
    }
    impl ContentRatingIlfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIlfilmRating::Ilfilm12 => "ilfilm12",
                ContentRatingIlfilmRating::Ilfilm14 => "ilfilm14",
                ContentRatingIlfilmRating::Ilfilm16 => "ilfilm16",
                ContentRatingIlfilmRating::Ilfilm18 => "ilfilm18",
                ContentRatingIlfilmRating::IlfilmAa => "ilfilmAa",
                ContentRatingIlfilmRating::IlfilmUnrated => "ilfilmUnrated",
                ContentRatingIlfilmRating::IlfilmUnspecified => "ilfilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIlfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIlfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIlfilmRating, ()> {
            Ok(match s {
                "ilfilm12" => ContentRatingIlfilmRating::Ilfilm12,
                "ilfilm14" => ContentRatingIlfilmRating::Ilfilm14,
                "ilfilm16" => ContentRatingIlfilmRating::Ilfilm16,
                "ilfilm18" => ContentRatingIlfilmRating::Ilfilm18,
                "ilfilmAa" => ContentRatingIlfilmRating::IlfilmAa,
                "ilfilmUnrated" => ContentRatingIlfilmRating::IlfilmUnrated,
                "ilfilmUnspecified" => ContentRatingIlfilmRating::IlfilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIlfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIlfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIlfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ilfilm12" => ContentRatingIlfilmRating::Ilfilm12,
                "ilfilm14" => ContentRatingIlfilmRating::Ilfilm14,
                "ilfilm16" => ContentRatingIlfilmRating::Ilfilm16,
                "ilfilm18" => ContentRatingIlfilmRating::Ilfilm18,
                "ilfilmAa" => ContentRatingIlfilmRating::IlfilmAa,
                "ilfilmUnrated" => ContentRatingIlfilmRating::IlfilmUnrated,
                "ilfilmUnspecified" => ContentRatingIlfilmRating::IlfilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIlfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIlfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingIncaaRating {
        #[doc = "ATP (Apta para todo publico)"]
        IncaaAtp,
        #[doc = "X (Solo apta para mayores de 18 años, de exhibición condicionada)"]
        IncaaC,
        #[doc = "13 (Solo apta para mayores de 13 años)"]
        IncaaSam13,
        #[doc = "16 (Solo apta para mayores de 16 años)"]
        IncaaSam16,
        #[doc = "18 (Solo apta para mayores de 18 años)"]
        IncaaSam18,
        IncaaUnrated,
        IncaaUnspecified,
    }
    impl ContentRatingIncaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingIncaaRating::IncaaAtp => "incaaAtp",
                ContentRatingIncaaRating::IncaaC => "incaaC",
                ContentRatingIncaaRating::IncaaSam13 => "incaaSam13",
                ContentRatingIncaaRating::IncaaSam16 => "incaaSam16",
                ContentRatingIncaaRating::IncaaSam18 => "incaaSam18",
                ContentRatingIncaaRating::IncaaUnrated => "incaaUnrated",
                ContentRatingIncaaRating::IncaaUnspecified => "incaaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingIncaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingIncaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingIncaaRating, ()> {
            Ok(match s {
                "incaaAtp" => ContentRatingIncaaRating::IncaaAtp,
                "incaaC" => ContentRatingIncaaRating::IncaaC,
                "incaaSam13" => ContentRatingIncaaRating::IncaaSam13,
                "incaaSam16" => ContentRatingIncaaRating::IncaaSam16,
                "incaaSam18" => ContentRatingIncaaRating::IncaaSam18,
                "incaaUnrated" => ContentRatingIncaaRating::IncaaUnrated,
                "incaaUnspecified" => ContentRatingIncaaRating::IncaaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingIncaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingIncaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingIncaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "incaaAtp" => ContentRatingIncaaRating::IncaaAtp,
                "incaaC" => ContentRatingIncaaRating::IncaaC,
                "incaaSam13" => ContentRatingIncaaRating::IncaaSam13,
                "incaaSam16" => ContentRatingIncaaRating::IncaaSam16,
                "incaaSam18" => ContentRatingIncaaRating::IncaaSam18,
                "incaaUnrated" => ContentRatingIncaaRating::IncaaUnrated,
                "incaaUnspecified" => ContentRatingIncaaRating::IncaaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingIncaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingIncaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingKfcbRating {
        #[doc = "16"]
        Kfcb16Plus,
        #[doc = "GE"]
        KfcbG,
        #[doc = "PG"]
        KfcbPg,
        #[doc = "18"]
        KfcbR,
        KfcbUnrated,
        KfcbUnspecified,
    }
    impl ContentRatingKfcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingKfcbRating::Kfcb16Plus => "kfcb16plus",
                ContentRatingKfcbRating::KfcbG => "kfcbG",
                ContentRatingKfcbRating::KfcbPg => "kfcbPg",
                ContentRatingKfcbRating::KfcbR => "kfcbR",
                ContentRatingKfcbRating::KfcbUnrated => "kfcbUnrated",
                ContentRatingKfcbRating::KfcbUnspecified => "kfcbUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingKfcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingKfcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingKfcbRating, ()> {
            Ok(match s {
                "kfcb16plus" => ContentRatingKfcbRating::Kfcb16Plus,
                "kfcbG" => ContentRatingKfcbRating::KfcbG,
                "kfcbPg" => ContentRatingKfcbRating::KfcbPg,
                "kfcbR" => ContentRatingKfcbRating::KfcbR,
                "kfcbUnrated" => ContentRatingKfcbRating::KfcbUnrated,
                "kfcbUnspecified" => ContentRatingKfcbRating::KfcbUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingKfcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingKfcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingKfcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "kfcb16plus" => ContentRatingKfcbRating::Kfcb16Plus,
                "kfcbG" => ContentRatingKfcbRating::KfcbG,
                "kfcbPg" => ContentRatingKfcbRating::KfcbPg,
                "kfcbR" => ContentRatingKfcbRating::KfcbR,
                "kfcbUnrated" => ContentRatingKfcbRating::KfcbUnrated,
                "kfcbUnspecified" => ContentRatingKfcbRating::KfcbUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingKfcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingKfcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingKijkwijzerRating {
        #[doc = "12"]
        Kijkwijzer12,
        #[doc = "16"]
        Kijkwijzer16,
        Kijkwijzer18,
        #[doc = "6"]
        Kijkwijzer6,
        #[doc = "9"]
        Kijkwijzer9,
        #[doc = "AL"]
        KijkwijzerAl,
        KijkwijzerUnrated,
        KijkwijzerUnspecified,
    }
    impl ContentRatingKijkwijzerRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingKijkwijzerRating::Kijkwijzer12 => "kijkwijzer12",
                ContentRatingKijkwijzerRating::Kijkwijzer16 => "kijkwijzer16",
                ContentRatingKijkwijzerRating::Kijkwijzer18 => "kijkwijzer18",
                ContentRatingKijkwijzerRating::Kijkwijzer6 => "kijkwijzer6",
                ContentRatingKijkwijzerRating::Kijkwijzer9 => "kijkwijzer9",
                ContentRatingKijkwijzerRating::KijkwijzerAl => "kijkwijzerAl",
                ContentRatingKijkwijzerRating::KijkwijzerUnrated => "kijkwijzerUnrated",
                ContentRatingKijkwijzerRating::KijkwijzerUnspecified => "kijkwijzerUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingKijkwijzerRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingKijkwijzerRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingKijkwijzerRating, ()> {
            Ok(match s {
                "kijkwijzer12" => ContentRatingKijkwijzerRating::Kijkwijzer12,
                "kijkwijzer16" => ContentRatingKijkwijzerRating::Kijkwijzer16,
                "kijkwijzer18" => ContentRatingKijkwijzerRating::Kijkwijzer18,
                "kijkwijzer6" => ContentRatingKijkwijzerRating::Kijkwijzer6,
                "kijkwijzer9" => ContentRatingKijkwijzerRating::Kijkwijzer9,
                "kijkwijzerAl" => ContentRatingKijkwijzerRating::KijkwijzerAl,
                "kijkwijzerUnrated" => ContentRatingKijkwijzerRating::KijkwijzerUnrated,
                "kijkwijzerUnspecified" => ContentRatingKijkwijzerRating::KijkwijzerUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingKijkwijzerRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingKijkwijzerRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingKijkwijzerRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "kijkwijzer12" => ContentRatingKijkwijzerRating::Kijkwijzer12,
                "kijkwijzer16" => ContentRatingKijkwijzerRating::Kijkwijzer16,
                "kijkwijzer18" => ContentRatingKijkwijzerRating::Kijkwijzer18,
                "kijkwijzer6" => ContentRatingKijkwijzerRating::Kijkwijzer6,
                "kijkwijzer9" => ContentRatingKijkwijzerRating::Kijkwijzer9,
                "kijkwijzerAl" => ContentRatingKijkwijzerRating::KijkwijzerAl,
                "kijkwijzerUnrated" => ContentRatingKijkwijzerRating::KijkwijzerUnrated,
                "kijkwijzerUnspecified" => ContentRatingKijkwijzerRating::KijkwijzerUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingKijkwijzerRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingKijkwijzerRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingKmrbRating {
        #[doc = "12세 이상 관람가"]
        Kmrb12Plus,
        #[doc = "15세 이상 관람가"]
        Kmrb15Plus,
        #[doc = "전체관람가"]
        KmrbAll,
        #[doc = "청소년 관람불가"]
        KmrbR,
        KmrbTeenr,
        KmrbUnrated,
        KmrbUnspecified,
    }
    impl ContentRatingKmrbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingKmrbRating::Kmrb12Plus => "kmrb12plus",
                ContentRatingKmrbRating::Kmrb15Plus => "kmrb15plus",
                ContentRatingKmrbRating::KmrbAll => "kmrbAll",
                ContentRatingKmrbRating::KmrbR => "kmrbR",
                ContentRatingKmrbRating::KmrbTeenr => "kmrbTeenr",
                ContentRatingKmrbRating::KmrbUnrated => "kmrbUnrated",
                ContentRatingKmrbRating::KmrbUnspecified => "kmrbUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingKmrbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingKmrbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingKmrbRating, ()> {
            Ok(match s {
                "kmrb12plus" => ContentRatingKmrbRating::Kmrb12Plus,
                "kmrb15plus" => ContentRatingKmrbRating::Kmrb15Plus,
                "kmrbAll" => ContentRatingKmrbRating::KmrbAll,
                "kmrbR" => ContentRatingKmrbRating::KmrbR,
                "kmrbTeenr" => ContentRatingKmrbRating::KmrbTeenr,
                "kmrbUnrated" => ContentRatingKmrbRating::KmrbUnrated,
                "kmrbUnspecified" => ContentRatingKmrbRating::KmrbUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingKmrbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingKmrbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingKmrbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "kmrb12plus" => ContentRatingKmrbRating::Kmrb12Plus,
                "kmrb15plus" => ContentRatingKmrbRating::Kmrb15Plus,
                "kmrbAll" => ContentRatingKmrbRating::KmrbAll,
                "kmrbR" => ContentRatingKmrbRating::KmrbR,
                "kmrbTeenr" => ContentRatingKmrbRating::KmrbTeenr,
                "kmrbUnrated" => ContentRatingKmrbRating::KmrbUnrated,
                "kmrbUnspecified" => ContentRatingKmrbRating::KmrbUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingKmrbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingKmrbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingLsfRating {
        #[doc = "13"]
        Lsf13,
        #[doc = "17"]
        Lsf17,
        #[doc = "21"]
        Lsf21,
        #[doc = "A"]
        LsfA,
        #[doc = "BO"]
        LsfBo,
        #[doc = "D"]
        LsfD,
        #[doc = "R"]
        LsfR,
        #[doc = "SU"]
        LsfSu,
        LsfUnrated,
        LsfUnspecified,
    }
    impl ContentRatingLsfRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingLsfRating::Lsf13 => "lsf13",
                ContentRatingLsfRating::Lsf17 => "lsf17",
                ContentRatingLsfRating::Lsf21 => "lsf21",
                ContentRatingLsfRating::LsfA => "lsfA",
                ContentRatingLsfRating::LsfBo => "lsfBo",
                ContentRatingLsfRating::LsfD => "lsfD",
                ContentRatingLsfRating::LsfR => "lsfR",
                ContentRatingLsfRating::LsfSu => "lsfSu",
                ContentRatingLsfRating::LsfUnrated => "lsfUnrated",
                ContentRatingLsfRating::LsfUnspecified => "lsfUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingLsfRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingLsfRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingLsfRating, ()> {
            Ok(match s {
                "lsf13" => ContentRatingLsfRating::Lsf13,
                "lsf17" => ContentRatingLsfRating::Lsf17,
                "lsf21" => ContentRatingLsfRating::Lsf21,
                "lsfA" => ContentRatingLsfRating::LsfA,
                "lsfBo" => ContentRatingLsfRating::LsfBo,
                "lsfD" => ContentRatingLsfRating::LsfD,
                "lsfR" => ContentRatingLsfRating::LsfR,
                "lsfSu" => ContentRatingLsfRating::LsfSu,
                "lsfUnrated" => ContentRatingLsfRating::LsfUnrated,
                "lsfUnspecified" => ContentRatingLsfRating::LsfUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingLsfRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingLsfRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingLsfRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "lsf13" => ContentRatingLsfRating::Lsf13,
                "lsf17" => ContentRatingLsfRating::Lsf17,
                "lsf21" => ContentRatingLsfRating::Lsf21,
                "lsfA" => ContentRatingLsfRating::LsfA,
                "lsfBo" => ContentRatingLsfRating::LsfBo,
                "lsfD" => ContentRatingLsfRating::LsfD,
                "lsfR" => ContentRatingLsfRating::LsfR,
                "lsfSu" => ContentRatingLsfRating::LsfSu,
                "lsfUnrated" => ContentRatingLsfRating::LsfUnrated,
                "lsfUnspecified" => ContentRatingLsfRating::LsfUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingLsfRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingLsfRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMccaaRating {
        #[doc = "12"]
        Mccaa12,
        #[doc = "12A"]
        Mccaa12A,
        #[doc = "14 - this rating was removed from the new classification structure\nintroduced in 2013."]
        Mccaa14,
        #[doc = "15"]
        Mccaa15,
        #[doc = "16 - this rating was removed from the new classification structure\nintroduced in 2013."]
        Mccaa16,
        #[doc = "18"]
        Mccaa18,
        #[doc = "PG"]
        MccaaPg,
        #[doc = "U"]
        MccaaU,
        MccaaUnrated,
        MccaaUnspecified,
    }
    impl ContentRatingMccaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMccaaRating::Mccaa12 => "mccaa12",
                ContentRatingMccaaRating::Mccaa12A => "mccaa12a",
                ContentRatingMccaaRating::Mccaa14 => "mccaa14",
                ContentRatingMccaaRating::Mccaa15 => "mccaa15",
                ContentRatingMccaaRating::Mccaa16 => "mccaa16",
                ContentRatingMccaaRating::Mccaa18 => "mccaa18",
                ContentRatingMccaaRating::MccaaPg => "mccaaPg",
                ContentRatingMccaaRating::MccaaU => "mccaaU",
                ContentRatingMccaaRating::MccaaUnrated => "mccaaUnrated",
                ContentRatingMccaaRating::MccaaUnspecified => "mccaaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMccaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMccaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMccaaRating, ()> {
            Ok(match s {
                "mccaa12" => ContentRatingMccaaRating::Mccaa12,
                "mccaa12a" => ContentRatingMccaaRating::Mccaa12A,
                "mccaa14" => ContentRatingMccaaRating::Mccaa14,
                "mccaa15" => ContentRatingMccaaRating::Mccaa15,
                "mccaa16" => ContentRatingMccaaRating::Mccaa16,
                "mccaa18" => ContentRatingMccaaRating::Mccaa18,
                "mccaaPg" => ContentRatingMccaaRating::MccaaPg,
                "mccaaU" => ContentRatingMccaaRating::MccaaU,
                "mccaaUnrated" => ContentRatingMccaaRating::MccaaUnrated,
                "mccaaUnspecified" => ContentRatingMccaaRating::MccaaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMccaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMccaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMccaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mccaa12" => ContentRatingMccaaRating::Mccaa12,
                "mccaa12a" => ContentRatingMccaaRating::Mccaa12A,
                "mccaa14" => ContentRatingMccaaRating::Mccaa14,
                "mccaa15" => ContentRatingMccaaRating::Mccaa15,
                "mccaa16" => ContentRatingMccaaRating::Mccaa16,
                "mccaa18" => ContentRatingMccaaRating::Mccaa18,
                "mccaaPg" => ContentRatingMccaaRating::MccaaPg,
                "mccaaU" => ContentRatingMccaaRating::MccaaU,
                "mccaaUnrated" => ContentRatingMccaaRating::MccaaUnrated,
                "mccaaUnspecified" => ContentRatingMccaaRating::MccaaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMccaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMccaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMccypRating {
        #[doc = "11"]
        Mccyp11,
        #[doc = "15"]
        Mccyp15,
        #[doc = "7"]
        Mccyp7,
        #[doc = "A"]
        MccypA,
        MccypUnrated,
        MccypUnspecified,
    }
    impl ContentRatingMccypRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMccypRating::Mccyp11 => "mccyp11",
                ContentRatingMccypRating::Mccyp15 => "mccyp15",
                ContentRatingMccypRating::Mccyp7 => "mccyp7",
                ContentRatingMccypRating::MccypA => "mccypA",
                ContentRatingMccypRating::MccypUnrated => "mccypUnrated",
                ContentRatingMccypRating::MccypUnspecified => "mccypUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMccypRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMccypRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMccypRating, ()> {
            Ok(match s {
                "mccyp11" => ContentRatingMccypRating::Mccyp11,
                "mccyp15" => ContentRatingMccypRating::Mccyp15,
                "mccyp7" => ContentRatingMccypRating::Mccyp7,
                "mccypA" => ContentRatingMccypRating::MccypA,
                "mccypUnrated" => ContentRatingMccypRating::MccypUnrated,
                "mccypUnspecified" => ContentRatingMccypRating::MccypUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMccypRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMccypRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMccypRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mccyp11" => ContentRatingMccypRating::Mccyp11,
                "mccyp15" => ContentRatingMccypRating::Mccyp15,
                "mccyp7" => ContentRatingMccypRating::Mccyp7,
                "mccypA" => ContentRatingMccypRating::MccypA,
                "mccypUnrated" => ContentRatingMccypRating::MccypUnrated,
                "mccypUnspecified" => ContentRatingMccypRating::MccypUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMccypRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMccypRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMcstRating {
        #[doc = "0"]
        Mcst0,
        #[doc = "16+"]
        Mcst16Plus,
        #[doc = "C13"]
        McstC13,
        #[doc = "C16"]
        McstC16,
        #[doc = "C18"]
        McstC18,
        #[doc = "MCST_G_PG"]
        McstGPg,
        #[doc = "P"]
        McstP,
        McstUnrated,
        McstUnspecified,
    }
    impl ContentRatingMcstRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMcstRating::Mcst0 => "mcst0",
                ContentRatingMcstRating::Mcst16Plus => "mcst16plus",
                ContentRatingMcstRating::McstC13 => "mcstC13",
                ContentRatingMcstRating::McstC16 => "mcstC16",
                ContentRatingMcstRating::McstC18 => "mcstC18",
                ContentRatingMcstRating::McstGPg => "mcstGPg",
                ContentRatingMcstRating::McstP => "mcstP",
                ContentRatingMcstRating::McstUnrated => "mcstUnrated",
                ContentRatingMcstRating::McstUnspecified => "mcstUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMcstRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMcstRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMcstRating, ()> {
            Ok(match s {
                "mcst0" => ContentRatingMcstRating::Mcst0,
                "mcst16plus" => ContentRatingMcstRating::Mcst16Plus,
                "mcstC13" => ContentRatingMcstRating::McstC13,
                "mcstC16" => ContentRatingMcstRating::McstC16,
                "mcstC18" => ContentRatingMcstRating::McstC18,
                "mcstGPg" => ContentRatingMcstRating::McstGPg,
                "mcstP" => ContentRatingMcstRating::McstP,
                "mcstUnrated" => ContentRatingMcstRating::McstUnrated,
                "mcstUnspecified" => ContentRatingMcstRating::McstUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMcstRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMcstRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMcstRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mcst0" => ContentRatingMcstRating::Mcst0,
                "mcst16plus" => ContentRatingMcstRating::Mcst16Plus,
                "mcstC13" => ContentRatingMcstRating::McstC13,
                "mcstC16" => ContentRatingMcstRating::McstC16,
                "mcstC18" => ContentRatingMcstRating::McstC18,
                "mcstGPg" => ContentRatingMcstRating::McstGPg,
                "mcstP" => ContentRatingMcstRating::McstP,
                "mcstUnrated" => ContentRatingMcstRating::McstUnrated,
                "mcstUnspecified" => ContentRatingMcstRating::McstUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMcstRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMcstRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMdaRating {
        #[doc = "G"]
        MdaG,
        #[doc = "M18"]
        MdaM18,
        #[doc = "NC16"]
        MdaNc16,
        #[doc = "PG"]
        MdaPg,
        #[doc = "PG13"]
        MdaPg13,
        #[doc = "R21"]
        MdaR21,
        MdaUnrated,
        MdaUnspecified,
    }
    impl ContentRatingMdaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMdaRating::MdaG => "mdaG",
                ContentRatingMdaRating::MdaM18 => "mdaM18",
                ContentRatingMdaRating::MdaNc16 => "mdaNc16",
                ContentRatingMdaRating::MdaPg => "mdaPg",
                ContentRatingMdaRating::MdaPg13 => "mdaPg13",
                ContentRatingMdaRating::MdaR21 => "mdaR21",
                ContentRatingMdaRating::MdaUnrated => "mdaUnrated",
                ContentRatingMdaRating::MdaUnspecified => "mdaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMdaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMdaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMdaRating, ()> {
            Ok(match s {
                "mdaG" => ContentRatingMdaRating::MdaG,
                "mdaM18" => ContentRatingMdaRating::MdaM18,
                "mdaNc16" => ContentRatingMdaRating::MdaNc16,
                "mdaPg" => ContentRatingMdaRating::MdaPg,
                "mdaPg13" => ContentRatingMdaRating::MdaPg13,
                "mdaR21" => ContentRatingMdaRating::MdaR21,
                "mdaUnrated" => ContentRatingMdaRating::MdaUnrated,
                "mdaUnspecified" => ContentRatingMdaRating::MdaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMdaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMdaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMdaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mdaG" => ContentRatingMdaRating::MdaG,
                "mdaM18" => ContentRatingMdaRating::MdaM18,
                "mdaNc16" => ContentRatingMdaRating::MdaNc16,
                "mdaPg" => ContentRatingMdaRating::MdaPg,
                "mdaPg13" => ContentRatingMdaRating::MdaPg13,
                "mdaR21" => ContentRatingMdaRating::MdaR21,
                "mdaUnrated" => ContentRatingMdaRating::MdaUnrated,
                "mdaUnspecified" => ContentRatingMdaRating::MdaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMdaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMdaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMedietilsynetRating {
        #[doc = "11"]
        Medietilsynet11,
        #[doc = "12"]
        Medietilsynet12,
        #[doc = "15"]
        Medietilsynet15,
        #[doc = "18"]
        Medietilsynet18,
        #[doc = "6"]
        Medietilsynet6,
        #[doc = "7"]
        Medietilsynet7,
        #[doc = "9"]
        Medietilsynet9,
        #[doc = "A"]
        MedietilsynetA,
        MedietilsynetUnrated,
        MedietilsynetUnspecified,
    }
    impl ContentRatingMedietilsynetRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMedietilsynetRating::Medietilsynet11 => "medietilsynet11",
                ContentRatingMedietilsynetRating::Medietilsynet12 => "medietilsynet12",
                ContentRatingMedietilsynetRating::Medietilsynet15 => "medietilsynet15",
                ContentRatingMedietilsynetRating::Medietilsynet18 => "medietilsynet18",
                ContentRatingMedietilsynetRating::Medietilsynet6 => "medietilsynet6",
                ContentRatingMedietilsynetRating::Medietilsynet7 => "medietilsynet7",
                ContentRatingMedietilsynetRating::Medietilsynet9 => "medietilsynet9",
                ContentRatingMedietilsynetRating::MedietilsynetA => "medietilsynetA",
                ContentRatingMedietilsynetRating::MedietilsynetUnrated => "medietilsynetUnrated",
                ContentRatingMedietilsynetRating::MedietilsynetUnspecified => {
                    "medietilsynetUnspecified"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMedietilsynetRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMedietilsynetRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMedietilsynetRating, ()> {
            Ok(match s {
                "medietilsynet11" => ContentRatingMedietilsynetRating::Medietilsynet11,
                "medietilsynet12" => ContentRatingMedietilsynetRating::Medietilsynet12,
                "medietilsynet15" => ContentRatingMedietilsynetRating::Medietilsynet15,
                "medietilsynet18" => ContentRatingMedietilsynetRating::Medietilsynet18,
                "medietilsynet6" => ContentRatingMedietilsynetRating::Medietilsynet6,
                "medietilsynet7" => ContentRatingMedietilsynetRating::Medietilsynet7,
                "medietilsynet9" => ContentRatingMedietilsynetRating::Medietilsynet9,
                "medietilsynetA" => ContentRatingMedietilsynetRating::MedietilsynetA,
                "medietilsynetUnrated" => ContentRatingMedietilsynetRating::MedietilsynetUnrated,
                "medietilsynetUnspecified" => {
                    ContentRatingMedietilsynetRating::MedietilsynetUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMedietilsynetRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMedietilsynetRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMedietilsynetRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "medietilsynet11" => ContentRatingMedietilsynetRating::Medietilsynet11,
                "medietilsynet12" => ContentRatingMedietilsynetRating::Medietilsynet12,
                "medietilsynet15" => ContentRatingMedietilsynetRating::Medietilsynet15,
                "medietilsynet18" => ContentRatingMedietilsynetRating::Medietilsynet18,
                "medietilsynet6" => ContentRatingMedietilsynetRating::Medietilsynet6,
                "medietilsynet7" => ContentRatingMedietilsynetRating::Medietilsynet7,
                "medietilsynet9" => ContentRatingMedietilsynetRating::Medietilsynet9,
                "medietilsynetA" => ContentRatingMedietilsynetRating::MedietilsynetA,
                "medietilsynetUnrated" => ContentRatingMedietilsynetRating::MedietilsynetUnrated,
                "medietilsynetUnspecified" => {
                    ContentRatingMedietilsynetRating::MedietilsynetUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMedietilsynetRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMedietilsynetRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMekuRating {
        #[doc = "12"]
        Meku12,
        #[doc = "16"]
        Meku16,
        #[doc = "18"]
        Meku18,
        #[doc = "7"]
        Meku7,
        #[doc = "S"]
        MekuS,
        MekuUnrated,
        MekuUnspecified,
    }
    impl ContentRatingMekuRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMekuRating::Meku12 => "meku12",
                ContentRatingMekuRating::Meku16 => "meku16",
                ContentRatingMekuRating::Meku18 => "meku18",
                ContentRatingMekuRating::Meku7 => "meku7",
                ContentRatingMekuRating::MekuS => "mekuS",
                ContentRatingMekuRating::MekuUnrated => "mekuUnrated",
                ContentRatingMekuRating::MekuUnspecified => "mekuUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMekuRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMekuRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMekuRating, ()> {
            Ok(match s {
                "meku12" => ContentRatingMekuRating::Meku12,
                "meku16" => ContentRatingMekuRating::Meku16,
                "meku18" => ContentRatingMekuRating::Meku18,
                "meku7" => ContentRatingMekuRating::Meku7,
                "mekuS" => ContentRatingMekuRating::MekuS,
                "mekuUnrated" => ContentRatingMekuRating::MekuUnrated,
                "mekuUnspecified" => ContentRatingMekuRating::MekuUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMekuRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMekuRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMekuRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "meku12" => ContentRatingMekuRating::Meku12,
                "meku16" => ContentRatingMekuRating::Meku16,
                "meku18" => ContentRatingMekuRating::Meku18,
                "meku7" => ContentRatingMekuRating::Meku7,
                "mekuS" => ContentRatingMekuRating::MekuS,
                "mekuUnrated" => ContentRatingMekuRating::MekuUnrated,
                "mekuUnspecified" => ContentRatingMekuRating::MekuUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMekuRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMekuRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMenaMpaaRating {
        #[doc = "G"]
        MenaMpaaG,
        #[doc = "PG"]
        MenaMpaaPg,
        #[doc = "PG-13"]
        MenaMpaaPg13,
        #[doc = "R"]
        MenaMpaaR,
        #[doc = "To keep the same enum values as MPAA's items have, skip NC_17."]
        MenaMpaaUnrated,
        MenaMpaaUnspecified,
    }
    impl ContentRatingMenaMpaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMenaMpaaRating::MenaMpaaG => "menaMpaaG",
                ContentRatingMenaMpaaRating::MenaMpaaPg => "menaMpaaPg",
                ContentRatingMenaMpaaRating::MenaMpaaPg13 => "menaMpaaPg13",
                ContentRatingMenaMpaaRating::MenaMpaaR => "menaMpaaR",
                ContentRatingMenaMpaaRating::MenaMpaaUnrated => "menaMpaaUnrated",
                ContentRatingMenaMpaaRating::MenaMpaaUnspecified => "menaMpaaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMenaMpaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMenaMpaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMenaMpaaRating, ()> {
            Ok(match s {
                "menaMpaaG" => ContentRatingMenaMpaaRating::MenaMpaaG,
                "menaMpaaPg" => ContentRatingMenaMpaaRating::MenaMpaaPg,
                "menaMpaaPg13" => ContentRatingMenaMpaaRating::MenaMpaaPg13,
                "menaMpaaR" => ContentRatingMenaMpaaRating::MenaMpaaR,
                "menaMpaaUnrated" => ContentRatingMenaMpaaRating::MenaMpaaUnrated,
                "menaMpaaUnspecified" => ContentRatingMenaMpaaRating::MenaMpaaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMenaMpaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMenaMpaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMenaMpaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "menaMpaaG" => ContentRatingMenaMpaaRating::MenaMpaaG,
                "menaMpaaPg" => ContentRatingMenaMpaaRating::MenaMpaaPg,
                "menaMpaaPg13" => ContentRatingMenaMpaaRating::MenaMpaaPg13,
                "menaMpaaR" => ContentRatingMenaMpaaRating::MenaMpaaR,
                "menaMpaaUnrated" => ContentRatingMenaMpaaRating::MenaMpaaUnrated,
                "menaMpaaUnspecified" => ContentRatingMenaMpaaRating::MenaMpaaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMenaMpaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMenaMpaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMibacRating {
        MibacT,
        MibacUnrated,
        MibacUnspecified,
        MibacVap,
        MibacVm12,
        MibacVm14,
        MibacVm18,
    }
    impl ContentRatingMibacRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMibacRating::MibacT => "mibacT",
                ContentRatingMibacRating::MibacUnrated => "mibacUnrated",
                ContentRatingMibacRating::MibacUnspecified => "mibacUnspecified",
                ContentRatingMibacRating::MibacVap => "mibacVap",
                ContentRatingMibacRating::MibacVm12 => "mibacVm12",
                ContentRatingMibacRating::MibacVm14 => "mibacVm14",
                ContentRatingMibacRating::MibacVm18 => "mibacVm18",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMibacRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMibacRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMibacRating, ()> {
            Ok(match s {
                "mibacT" => ContentRatingMibacRating::MibacT,
                "mibacUnrated" => ContentRatingMibacRating::MibacUnrated,
                "mibacUnspecified" => ContentRatingMibacRating::MibacUnspecified,
                "mibacVap" => ContentRatingMibacRating::MibacVap,
                "mibacVm12" => ContentRatingMibacRating::MibacVm12,
                "mibacVm14" => ContentRatingMibacRating::MibacVm14,
                "mibacVm18" => ContentRatingMibacRating::MibacVm18,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMibacRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMibacRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMibacRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mibacT" => ContentRatingMibacRating::MibacT,
                "mibacUnrated" => ContentRatingMibacRating::MibacUnrated,
                "mibacUnspecified" => ContentRatingMibacRating::MibacUnspecified,
                "mibacVap" => ContentRatingMibacRating::MibacVap,
                "mibacVm12" => ContentRatingMibacRating::MibacVm12,
                "mibacVm14" => ContentRatingMibacRating::MibacVm14,
                "mibacVm18" => ContentRatingMibacRating::MibacVm18,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMibacRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMibacRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMocRating {
        #[doc = "12"]
        Moc12,
        #[doc = "15"]
        Moc15,
        #[doc = "18"]
        Moc18,
        #[doc = "7"]
        Moc7,
        #[doc = "Banned"]
        MocBanned,
        #[doc = "E"]
        MocE,
        #[doc = "T"]
        MocT,
        MocUnrated,
        MocUnspecified,
        #[doc = "X"]
        MocX,
    }
    impl ContentRatingMocRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMocRating::Moc12 => "moc12",
                ContentRatingMocRating::Moc15 => "moc15",
                ContentRatingMocRating::Moc18 => "moc18",
                ContentRatingMocRating::Moc7 => "moc7",
                ContentRatingMocRating::MocBanned => "mocBanned",
                ContentRatingMocRating::MocE => "mocE",
                ContentRatingMocRating::MocT => "mocT",
                ContentRatingMocRating::MocUnrated => "mocUnrated",
                ContentRatingMocRating::MocUnspecified => "mocUnspecified",
                ContentRatingMocRating::MocX => "mocX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMocRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMocRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMocRating, ()> {
            Ok(match s {
                "moc12" => ContentRatingMocRating::Moc12,
                "moc15" => ContentRatingMocRating::Moc15,
                "moc18" => ContentRatingMocRating::Moc18,
                "moc7" => ContentRatingMocRating::Moc7,
                "mocBanned" => ContentRatingMocRating::MocBanned,
                "mocE" => ContentRatingMocRating::MocE,
                "mocT" => ContentRatingMocRating::MocT,
                "mocUnrated" => ContentRatingMocRating::MocUnrated,
                "mocUnspecified" => ContentRatingMocRating::MocUnspecified,
                "mocX" => ContentRatingMocRating::MocX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMocRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMocRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMocRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "moc12" => ContentRatingMocRating::Moc12,
                "moc15" => ContentRatingMocRating::Moc15,
                "moc18" => ContentRatingMocRating::Moc18,
                "moc7" => ContentRatingMocRating::Moc7,
                "mocBanned" => ContentRatingMocRating::MocBanned,
                "mocE" => ContentRatingMocRating::MocE,
                "mocT" => ContentRatingMocRating::MocT,
                "mocUnrated" => ContentRatingMocRating::MocUnrated,
                "mocUnspecified" => ContentRatingMocRating::MocUnspecified,
                "mocX" => ContentRatingMocRating::MocX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMocRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMocRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMoctwRating {
        #[doc = "G"]
        MoctwG,
        #[doc = "P"]
        MoctwP,
        #[doc = "PG"]
        MoctwPg,
        #[doc = "R"]
        MoctwR,
        #[doc = "R-12"]
        MoctwR12,
        #[doc = "R-15"]
        MoctwR15,
        MoctwUnrated,
        MoctwUnspecified,
    }
    impl ContentRatingMoctwRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMoctwRating::MoctwG => "moctwG",
                ContentRatingMoctwRating::MoctwP => "moctwP",
                ContentRatingMoctwRating::MoctwPg => "moctwPg",
                ContentRatingMoctwRating::MoctwR => "moctwR",
                ContentRatingMoctwRating::MoctwR12 => "moctwR12",
                ContentRatingMoctwRating::MoctwR15 => "moctwR15",
                ContentRatingMoctwRating::MoctwUnrated => "moctwUnrated",
                ContentRatingMoctwRating::MoctwUnspecified => "moctwUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMoctwRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMoctwRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMoctwRating, ()> {
            Ok(match s {
                "moctwG" => ContentRatingMoctwRating::MoctwG,
                "moctwP" => ContentRatingMoctwRating::MoctwP,
                "moctwPg" => ContentRatingMoctwRating::MoctwPg,
                "moctwR" => ContentRatingMoctwRating::MoctwR,
                "moctwR12" => ContentRatingMoctwRating::MoctwR12,
                "moctwR15" => ContentRatingMoctwRating::MoctwR15,
                "moctwUnrated" => ContentRatingMoctwRating::MoctwUnrated,
                "moctwUnspecified" => ContentRatingMoctwRating::MoctwUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMoctwRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMoctwRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMoctwRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "moctwG" => ContentRatingMoctwRating::MoctwG,
                "moctwP" => ContentRatingMoctwRating::MoctwP,
                "moctwPg" => ContentRatingMoctwRating::MoctwPg,
                "moctwR" => ContentRatingMoctwRating::MoctwR,
                "moctwR12" => ContentRatingMoctwRating::MoctwR12,
                "moctwR15" => ContentRatingMoctwRating::MoctwR15,
                "moctwUnrated" => ContentRatingMoctwRating::MoctwUnrated,
                "moctwUnspecified" => ContentRatingMoctwRating::MoctwUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMoctwRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMoctwRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMpaaRating {
        #[doc = "G"]
        MpaaG,
        #[doc = "NC-17"]
        MpaaNc17,
        #[doc = "PG"]
        MpaaPg,
        #[doc = "PG-13"]
        MpaaPg13,
        #[doc = "R"]
        MpaaR,
        MpaaUnrated,
        MpaaUnspecified,
        #[doc = "! X"]
        MpaaX,
    }
    impl ContentRatingMpaaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMpaaRating::MpaaG => "mpaaG",
                ContentRatingMpaaRating::MpaaNc17 => "mpaaNc17",
                ContentRatingMpaaRating::MpaaPg => "mpaaPg",
                ContentRatingMpaaRating::MpaaPg13 => "mpaaPg13",
                ContentRatingMpaaRating::MpaaR => "mpaaR",
                ContentRatingMpaaRating::MpaaUnrated => "mpaaUnrated",
                ContentRatingMpaaRating::MpaaUnspecified => "mpaaUnspecified",
                ContentRatingMpaaRating::MpaaX => "mpaaX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMpaaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMpaaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMpaaRating, ()> {
            Ok(match s {
                "mpaaG" => ContentRatingMpaaRating::MpaaG,
                "mpaaNc17" => ContentRatingMpaaRating::MpaaNc17,
                "mpaaPg" => ContentRatingMpaaRating::MpaaPg,
                "mpaaPg13" => ContentRatingMpaaRating::MpaaPg13,
                "mpaaR" => ContentRatingMpaaRating::MpaaR,
                "mpaaUnrated" => ContentRatingMpaaRating::MpaaUnrated,
                "mpaaUnspecified" => ContentRatingMpaaRating::MpaaUnspecified,
                "mpaaX" => ContentRatingMpaaRating::MpaaX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMpaaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMpaaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMpaaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mpaaG" => ContentRatingMpaaRating::MpaaG,
                "mpaaNc17" => ContentRatingMpaaRating::MpaaNc17,
                "mpaaPg" => ContentRatingMpaaRating::MpaaPg,
                "mpaaPg13" => ContentRatingMpaaRating::MpaaPg13,
                "mpaaR" => ContentRatingMpaaRating::MpaaR,
                "mpaaUnrated" => ContentRatingMpaaRating::MpaaUnrated,
                "mpaaUnspecified" => ContentRatingMpaaRating::MpaaUnspecified,
                "mpaaX" => ContentRatingMpaaRating::MpaaX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMpaaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMpaaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMpaatRating {
        #[doc = "GB"]
        MpaatGb,
        #[doc = "RB"]
        MpaatRb,
        MpaatUnspecified,
    }
    impl ContentRatingMpaatRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMpaatRating::MpaatGb => "mpaatGb",
                ContentRatingMpaatRating::MpaatRb => "mpaatRb",
                ContentRatingMpaatRating::MpaatUnspecified => "mpaatUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMpaatRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMpaatRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMpaatRating, ()> {
            Ok(match s {
                "mpaatGb" => ContentRatingMpaatRating::MpaatGb,
                "mpaatRb" => ContentRatingMpaatRating::MpaatRb,
                "mpaatUnspecified" => ContentRatingMpaatRating::MpaatUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMpaatRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMpaatRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMpaatRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mpaatGb" => ContentRatingMpaatRating::MpaatGb,
                "mpaatRb" => ContentRatingMpaatRating::MpaatRb,
                "mpaatUnspecified" => ContentRatingMpaatRating::MpaatUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMpaatRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMpaatRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingMtrcbRating {
        #[doc = "G"]
        MtrcbG,
        #[doc = "PG"]
        MtrcbPg,
        #[doc = "R-13"]
        MtrcbR13,
        #[doc = "R-16"]
        MtrcbR16,
        #[doc = "R-18"]
        MtrcbR18,
        MtrcbUnrated,
        MtrcbUnspecified,
        #[doc = "X"]
        MtrcbX,
    }
    impl ContentRatingMtrcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingMtrcbRating::MtrcbG => "mtrcbG",
                ContentRatingMtrcbRating::MtrcbPg => "mtrcbPg",
                ContentRatingMtrcbRating::MtrcbR13 => "mtrcbR13",
                ContentRatingMtrcbRating::MtrcbR16 => "mtrcbR16",
                ContentRatingMtrcbRating::MtrcbR18 => "mtrcbR18",
                ContentRatingMtrcbRating::MtrcbUnrated => "mtrcbUnrated",
                ContentRatingMtrcbRating::MtrcbUnspecified => "mtrcbUnspecified",
                ContentRatingMtrcbRating::MtrcbX => "mtrcbX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingMtrcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingMtrcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingMtrcbRating, ()> {
            Ok(match s {
                "mtrcbG" => ContentRatingMtrcbRating::MtrcbG,
                "mtrcbPg" => ContentRatingMtrcbRating::MtrcbPg,
                "mtrcbR13" => ContentRatingMtrcbRating::MtrcbR13,
                "mtrcbR16" => ContentRatingMtrcbRating::MtrcbR16,
                "mtrcbR18" => ContentRatingMtrcbRating::MtrcbR18,
                "mtrcbUnrated" => ContentRatingMtrcbRating::MtrcbUnrated,
                "mtrcbUnspecified" => ContentRatingMtrcbRating::MtrcbUnspecified,
                "mtrcbX" => ContentRatingMtrcbRating::MtrcbX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingMtrcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingMtrcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingMtrcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mtrcbG" => ContentRatingMtrcbRating::MtrcbG,
                "mtrcbPg" => ContentRatingMtrcbRating::MtrcbPg,
                "mtrcbR13" => ContentRatingMtrcbRating::MtrcbR13,
                "mtrcbR16" => ContentRatingMtrcbRating::MtrcbR16,
                "mtrcbR18" => ContentRatingMtrcbRating::MtrcbR18,
                "mtrcbUnrated" => ContentRatingMtrcbRating::MtrcbUnrated,
                "mtrcbUnspecified" => ContentRatingMtrcbRating::MtrcbUnspecified,
                "mtrcbX" => ContentRatingMtrcbRating::MtrcbX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingMtrcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingMtrcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNbcRating {
        #[doc = "12+"]
        Nbc12Plus,
        #[doc = "15+"]
        Nbc15Plus,
        #[doc = "18+"]
        Nbc18Plus,
        #[doc = "18+R"]
        Nbc18Plusr,
        #[doc = "G"]
        NbcG,
        #[doc = "PG"]
        NbcPg,
        #[doc = "PU"]
        NbcPu,
        NbcUnrated,
        NbcUnspecified,
    }
    impl ContentRatingNbcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNbcRating::Nbc12Plus => "nbc12plus",
                ContentRatingNbcRating::Nbc15Plus => "nbc15plus",
                ContentRatingNbcRating::Nbc18Plus => "nbc18plus",
                ContentRatingNbcRating::Nbc18Plusr => "nbc18plusr",
                ContentRatingNbcRating::NbcG => "nbcG",
                ContentRatingNbcRating::NbcPg => "nbcPg",
                ContentRatingNbcRating::NbcPu => "nbcPu",
                ContentRatingNbcRating::NbcUnrated => "nbcUnrated",
                ContentRatingNbcRating::NbcUnspecified => "nbcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNbcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNbcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNbcRating, ()> {
            Ok(match s {
                "nbc12plus" => ContentRatingNbcRating::Nbc12Plus,
                "nbc15plus" => ContentRatingNbcRating::Nbc15Plus,
                "nbc18plus" => ContentRatingNbcRating::Nbc18Plus,
                "nbc18plusr" => ContentRatingNbcRating::Nbc18Plusr,
                "nbcG" => ContentRatingNbcRating::NbcG,
                "nbcPg" => ContentRatingNbcRating::NbcPg,
                "nbcPu" => ContentRatingNbcRating::NbcPu,
                "nbcUnrated" => ContentRatingNbcRating::NbcUnrated,
                "nbcUnspecified" => ContentRatingNbcRating::NbcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNbcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNbcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNbcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nbc12plus" => ContentRatingNbcRating::Nbc12Plus,
                "nbc15plus" => ContentRatingNbcRating::Nbc15Plus,
                "nbc18plus" => ContentRatingNbcRating::Nbc18Plus,
                "nbc18plusr" => ContentRatingNbcRating::Nbc18Plusr,
                "nbcG" => ContentRatingNbcRating::NbcG,
                "nbcPg" => ContentRatingNbcRating::NbcPg,
                "nbcPu" => ContentRatingNbcRating::NbcPu,
                "nbcUnrated" => ContentRatingNbcRating::NbcUnrated,
                "nbcUnspecified" => ContentRatingNbcRating::NbcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNbcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNbcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNbcplRating {
        Nbcpl18Plus,
        NbcplI,
        NbcplIi,
        NbcplIii,
        NbcplIv,
        NbcplUnrated,
        NbcplUnspecified,
    }
    impl ContentRatingNbcplRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNbcplRating::Nbcpl18Plus => "nbcpl18plus",
                ContentRatingNbcplRating::NbcplI => "nbcplI",
                ContentRatingNbcplRating::NbcplIi => "nbcplIi",
                ContentRatingNbcplRating::NbcplIii => "nbcplIii",
                ContentRatingNbcplRating::NbcplIv => "nbcplIv",
                ContentRatingNbcplRating::NbcplUnrated => "nbcplUnrated",
                ContentRatingNbcplRating::NbcplUnspecified => "nbcplUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNbcplRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNbcplRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNbcplRating, ()> {
            Ok(match s {
                "nbcpl18plus" => ContentRatingNbcplRating::Nbcpl18Plus,
                "nbcplI" => ContentRatingNbcplRating::NbcplI,
                "nbcplIi" => ContentRatingNbcplRating::NbcplIi,
                "nbcplIii" => ContentRatingNbcplRating::NbcplIii,
                "nbcplIv" => ContentRatingNbcplRating::NbcplIv,
                "nbcplUnrated" => ContentRatingNbcplRating::NbcplUnrated,
                "nbcplUnspecified" => ContentRatingNbcplRating::NbcplUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNbcplRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNbcplRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNbcplRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nbcpl18plus" => ContentRatingNbcplRating::Nbcpl18Plus,
                "nbcplI" => ContentRatingNbcplRating::NbcplI,
                "nbcplIi" => ContentRatingNbcplRating::NbcplIi,
                "nbcplIii" => ContentRatingNbcplRating::NbcplIii,
                "nbcplIv" => ContentRatingNbcplRating::NbcplIv,
                "nbcplUnrated" => ContentRatingNbcplRating::NbcplUnrated,
                "nbcplUnspecified" => ContentRatingNbcplRating::NbcplUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNbcplRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNbcplRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNfrcRating {
        #[doc = "A"]
        NfrcA,
        #[doc = "B"]
        NfrcB,
        #[doc = "C"]
        NfrcC,
        #[doc = "D"]
        NfrcD,
        NfrcUnrated,
        NfrcUnspecified,
        #[doc = "X"]
        NfrcX,
    }
    impl ContentRatingNfrcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNfrcRating::NfrcA => "nfrcA",
                ContentRatingNfrcRating::NfrcB => "nfrcB",
                ContentRatingNfrcRating::NfrcC => "nfrcC",
                ContentRatingNfrcRating::NfrcD => "nfrcD",
                ContentRatingNfrcRating::NfrcUnrated => "nfrcUnrated",
                ContentRatingNfrcRating::NfrcUnspecified => "nfrcUnspecified",
                ContentRatingNfrcRating::NfrcX => "nfrcX",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNfrcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNfrcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNfrcRating, ()> {
            Ok(match s {
                "nfrcA" => ContentRatingNfrcRating::NfrcA,
                "nfrcB" => ContentRatingNfrcRating::NfrcB,
                "nfrcC" => ContentRatingNfrcRating::NfrcC,
                "nfrcD" => ContentRatingNfrcRating::NfrcD,
                "nfrcUnrated" => ContentRatingNfrcRating::NfrcUnrated,
                "nfrcUnspecified" => ContentRatingNfrcRating::NfrcUnspecified,
                "nfrcX" => ContentRatingNfrcRating::NfrcX,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNfrcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNfrcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNfrcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nfrcA" => ContentRatingNfrcRating::NfrcA,
                "nfrcB" => ContentRatingNfrcRating::NfrcB,
                "nfrcC" => ContentRatingNfrcRating::NfrcC,
                "nfrcD" => ContentRatingNfrcRating::NfrcD,
                "nfrcUnrated" => ContentRatingNfrcRating::NfrcUnrated,
                "nfrcUnspecified" => ContentRatingNfrcRating::NfrcUnspecified,
                "nfrcX" => ContentRatingNfrcRating::NfrcX,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNfrcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNfrcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNfvcbRating {
        #[doc = "12"]
        Nfvcb12,
        #[doc = "12A"]
        Nfvcb12A,
        #[doc = "15"]
        Nfvcb15,
        #[doc = "18"]
        Nfvcb18,
        #[doc = "G"]
        NfvcbG,
        #[doc = "PG"]
        NfvcbPg,
        #[doc = "RE"]
        NfvcbRe,
        NfvcbUnrated,
        NfvcbUnspecified,
    }
    impl ContentRatingNfvcbRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNfvcbRating::Nfvcb12 => "nfvcb12",
                ContentRatingNfvcbRating::Nfvcb12A => "nfvcb12a",
                ContentRatingNfvcbRating::Nfvcb15 => "nfvcb15",
                ContentRatingNfvcbRating::Nfvcb18 => "nfvcb18",
                ContentRatingNfvcbRating::NfvcbG => "nfvcbG",
                ContentRatingNfvcbRating::NfvcbPg => "nfvcbPg",
                ContentRatingNfvcbRating::NfvcbRe => "nfvcbRe",
                ContentRatingNfvcbRating::NfvcbUnrated => "nfvcbUnrated",
                ContentRatingNfvcbRating::NfvcbUnspecified => "nfvcbUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNfvcbRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNfvcbRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNfvcbRating, ()> {
            Ok(match s {
                "nfvcb12" => ContentRatingNfvcbRating::Nfvcb12,
                "nfvcb12a" => ContentRatingNfvcbRating::Nfvcb12A,
                "nfvcb15" => ContentRatingNfvcbRating::Nfvcb15,
                "nfvcb18" => ContentRatingNfvcbRating::Nfvcb18,
                "nfvcbG" => ContentRatingNfvcbRating::NfvcbG,
                "nfvcbPg" => ContentRatingNfvcbRating::NfvcbPg,
                "nfvcbRe" => ContentRatingNfvcbRating::NfvcbRe,
                "nfvcbUnrated" => ContentRatingNfvcbRating::NfvcbUnrated,
                "nfvcbUnspecified" => ContentRatingNfvcbRating::NfvcbUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNfvcbRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNfvcbRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNfvcbRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nfvcb12" => ContentRatingNfvcbRating::Nfvcb12,
                "nfvcb12a" => ContentRatingNfvcbRating::Nfvcb12A,
                "nfvcb15" => ContentRatingNfvcbRating::Nfvcb15,
                "nfvcb18" => ContentRatingNfvcbRating::Nfvcb18,
                "nfvcbG" => ContentRatingNfvcbRating::NfvcbG,
                "nfvcbPg" => ContentRatingNfvcbRating::NfvcbPg,
                "nfvcbRe" => ContentRatingNfvcbRating::NfvcbRe,
                "nfvcbUnrated" => ContentRatingNfvcbRating::NfvcbUnrated,
                "nfvcbUnspecified" => ContentRatingNfvcbRating::NfvcbUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNfvcbRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNfvcbRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNkclvRating {
        #[doc = "12+"]
        Nkclv12Plus,
        #[doc = "! 16+"]
        Nkclv16Plus,
        #[doc = "18+"]
        Nkclv18Plus,
        #[doc = "7+"]
        Nkclv7Plus,
        #[doc = "U"]
        NkclvU,
        NkclvUnrated,
        NkclvUnspecified,
    }
    impl ContentRatingNkclvRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNkclvRating::Nkclv12Plus => "nkclv12plus",
                ContentRatingNkclvRating::Nkclv16Plus => "nkclv16plus",
                ContentRatingNkclvRating::Nkclv18Plus => "nkclv18plus",
                ContentRatingNkclvRating::Nkclv7Plus => "nkclv7plus",
                ContentRatingNkclvRating::NkclvU => "nkclvU",
                ContentRatingNkclvRating::NkclvUnrated => "nkclvUnrated",
                ContentRatingNkclvRating::NkclvUnspecified => "nkclvUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNkclvRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNkclvRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNkclvRating, ()> {
            Ok(match s {
                "nkclv12plus" => ContentRatingNkclvRating::Nkclv12Plus,
                "nkclv16plus" => ContentRatingNkclvRating::Nkclv16Plus,
                "nkclv18plus" => ContentRatingNkclvRating::Nkclv18Plus,
                "nkclv7plus" => ContentRatingNkclvRating::Nkclv7Plus,
                "nkclvU" => ContentRatingNkclvRating::NkclvU,
                "nkclvUnrated" => ContentRatingNkclvRating::NkclvUnrated,
                "nkclvUnspecified" => ContentRatingNkclvRating::NkclvUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNkclvRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNkclvRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNkclvRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nkclv12plus" => ContentRatingNkclvRating::Nkclv12Plus,
                "nkclv16plus" => ContentRatingNkclvRating::Nkclv16Plus,
                "nkclv18plus" => ContentRatingNkclvRating::Nkclv18Plus,
                "nkclv7plus" => ContentRatingNkclvRating::Nkclv7Plus,
                "nkclvU" => ContentRatingNkclvRating::NkclvU,
                "nkclvUnrated" => ContentRatingNkclvRating::NkclvUnrated,
                "nkclvUnspecified" => ContentRatingNkclvRating::NkclvUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNkclvRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNkclvRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingNmcRating {
        #[doc = "15+"]
        Nmc15Plus,
        #[doc = "18+"]
        Nmc18Plus,
        #[doc = "18TC"]
        Nmc18Tc,
        #[doc = "G"]
        NmcG,
        #[doc = "PG"]
        NmcPg,
        #[doc = "PG-13"]
        NmcPg13,
        #[doc = "PG-15"]
        NmcPg15,
        NmcUnrated,
        NmcUnspecified,
    }
    impl ContentRatingNmcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingNmcRating::Nmc15Plus => "nmc15plus",
                ContentRatingNmcRating::Nmc18Plus => "nmc18plus",
                ContentRatingNmcRating::Nmc18Tc => "nmc18tc",
                ContentRatingNmcRating::NmcG => "nmcG",
                ContentRatingNmcRating::NmcPg => "nmcPg",
                ContentRatingNmcRating::NmcPg13 => "nmcPg13",
                ContentRatingNmcRating::NmcPg15 => "nmcPg15",
                ContentRatingNmcRating::NmcUnrated => "nmcUnrated",
                ContentRatingNmcRating::NmcUnspecified => "nmcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingNmcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingNmcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingNmcRating, ()> {
            Ok(match s {
                "nmc15plus" => ContentRatingNmcRating::Nmc15Plus,
                "nmc18plus" => ContentRatingNmcRating::Nmc18Plus,
                "nmc18tc" => ContentRatingNmcRating::Nmc18Tc,
                "nmcG" => ContentRatingNmcRating::NmcG,
                "nmcPg" => ContentRatingNmcRating::NmcPg,
                "nmcPg13" => ContentRatingNmcRating::NmcPg13,
                "nmcPg15" => ContentRatingNmcRating::NmcPg15,
                "nmcUnrated" => ContentRatingNmcRating::NmcUnrated,
                "nmcUnspecified" => ContentRatingNmcRating::NmcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingNmcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingNmcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingNmcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "nmc15plus" => ContentRatingNmcRating::Nmc15Plus,
                "nmc18plus" => ContentRatingNmcRating::Nmc18Plus,
                "nmc18tc" => ContentRatingNmcRating::Nmc18Tc,
                "nmcG" => ContentRatingNmcRating::NmcG,
                "nmcPg" => ContentRatingNmcRating::NmcPg,
                "nmcPg13" => ContentRatingNmcRating::NmcPg13,
                "nmcPg15" => ContentRatingNmcRating::NmcPg15,
                "nmcUnrated" => ContentRatingNmcRating::NmcUnrated,
                "nmcUnspecified" => ContentRatingNmcRating::NmcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingNmcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingNmcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingOflcRating {
        #[doc = "G"]
        OflcG,
        #[doc = "M"]
        OflcM,
        #[doc = "PG"]
        OflcPg,
        #[doc = "R13"]
        OflcR13,
        #[doc = "R15"]
        OflcR15,
        #[doc = "R16"]
        OflcR16,
        #[doc = "R18"]
        OflcR18,
        #[doc = "RP13"]
        OflcRp13,
        #[doc = "RP16"]
        OflcRp16,
        #[doc = "RP18"]
        OflcRp18,
        OflcUnrated,
        OflcUnspecified,
    }
    impl ContentRatingOflcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingOflcRating::OflcG => "oflcG",
                ContentRatingOflcRating::OflcM => "oflcM",
                ContentRatingOflcRating::OflcPg => "oflcPg",
                ContentRatingOflcRating::OflcR13 => "oflcR13",
                ContentRatingOflcRating::OflcR15 => "oflcR15",
                ContentRatingOflcRating::OflcR16 => "oflcR16",
                ContentRatingOflcRating::OflcR18 => "oflcR18",
                ContentRatingOflcRating::OflcRp13 => "oflcRp13",
                ContentRatingOflcRating::OflcRp16 => "oflcRp16",
                ContentRatingOflcRating::OflcRp18 => "oflcRp18",
                ContentRatingOflcRating::OflcUnrated => "oflcUnrated",
                ContentRatingOflcRating::OflcUnspecified => "oflcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingOflcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingOflcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingOflcRating, ()> {
            Ok(match s {
                "oflcG" => ContentRatingOflcRating::OflcG,
                "oflcM" => ContentRatingOflcRating::OflcM,
                "oflcPg" => ContentRatingOflcRating::OflcPg,
                "oflcR13" => ContentRatingOflcRating::OflcR13,
                "oflcR15" => ContentRatingOflcRating::OflcR15,
                "oflcR16" => ContentRatingOflcRating::OflcR16,
                "oflcR18" => ContentRatingOflcRating::OflcR18,
                "oflcRp13" => ContentRatingOflcRating::OflcRp13,
                "oflcRp16" => ContentRatingOflcRating::OflcRp16,
                "oflcRp18" => ContentRatingOflcRating::OflcRp18,
                "oflcUnrated" => ContentRatingOflcRating::OflcUnrated,
                "oflcUnspecified" => ContentRatingOflcRating::OflcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingOflcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingOflcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingOflcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "oflcG" => ContentRatingOflcRating::OflcG,
                "oflcM" => ContentRatingOflcRating::OflcM,
                "oflcPg" => ContentRatingOflcRating::OflcPg,
                "oflcR13" => ContentRatingOflcRating::OflcR13,
                "oflcR15" => ContentRatingOflcRating::OflcR15,
                "oflcR16" => ContentRatingOflcRating::OflcR16,
                "oflcR18" => ContentRatingOflcRating::OflcR18,
                "oflcRp13" => ContentRatingOflcRating::OflcRp13,
                "oflcRp16" => ContentRatingOflcRating::OflcRp16,
                "oflcRp18" => ContentRatingOflcRating::OflcRp18,
                "oflcUnrated" => ContentRatingOflcRating::OflcUnrated,
                "oflcUnspecified" => ContentRatingOflcRating::OflcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingOflcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingOflcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingPefilmRating {
        #[doc = "14"]
        Pefilm14,
        #[doc = "18"]
        Pefilm18,
        #[doc = "PG"]
        PefilmPg,
        #[doc = "PT"]
        PefilmPt,
        PefilmUnrated,
        PefilmUnspecified,
    }
    impl ContentRatingPefilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingPefilmRating::Pefilm14 => "pefilm14",
                ContentRatingPefilmRating::Pefilm18 => "pefilm18",
                ContentRatingPefilmRating::PefilmPg => "pefilmPg",
                ContentRatingPefilmRating::PefilmPt => "pefilmPt",
                ContentRatingPefilmRating::PefilmUnrated => "pefilmUnrated",
                ContentRatingPefilmRating::PefilmUnspecified => "pefilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingPefilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingPefilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingPefilmRating, ()> {
            Ok(match s {
                "pefilm14" => ContentRatingPefilmRating::Pefilm14,
                "pefilm18" => ContentRatingPefilmRating::Pefilm18,
                "pefilmPg" => ContentRatingPefilmRating::PefilmPg,
                "pefilmPt" => ContentRatingPefilmRating::PefilmPt,
                "pefilmUnrated" => ContentRatingPefilmRating::PefilmUnrated,
                "pefilmUnspecified" => ContentRatingPefilmRating::PefilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingPefilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingPefilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingPefilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "pefilm14" => ContentRatingPefilmRating::Pefilm14,
                "pefilm18" => ContentRatingPefilmRating::Pefilm18,
                "pefilmPg" => ContentRatingPefilmRating::PefilmPg,
                "pefilmPt" => ContentRatingPefilmRating::PefilmPt,
                "pefilmUnrated" => ContentRatingPefilmRating::PefilmUnrated,
                "pefilmUnspecified" => ContentRatingPefilmRating::PefilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingPefilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingPefilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRcnofRating {
        RcnofI,
        RcnofIi,
        RcnofIii,
        RcnofIv,
        RcnofUnrated,
        RcnofUnspecified,
        RcnofV,
        RcnofVi,
    }
    impl ContentRatingRcnofRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRcnofRating::RcnofI => "rcnofI",
                ContentRatingRcnofRating::RcnofIi => "rcnofIi",
                ContentRatingRcnofRating::RcnofIii => "rcnofIii",
                ContentRatingRcnofRating::RcnofIv => "rcnofIv",
                ContentRatingRcnofRating::RcnofUnrated => "rcnofUnrated",
                ContentRatingRcnofRating::RcnofUnspecified => "rcnofUnspecified",
                ContentRatingRcnofRating::RcnofV => "rcnofV",
                ContentRatingRcnofRating::RcnofVi => "rcnofVi",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRcnofRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRcnofRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRcnofRating, ()> {
            Ok(match s {
                "rcnofI" => ContentRatingRcnofRating::RcnofI,
                "rcnofIi" => ContentRatingRcnofRating::RcnofIi,
                "rcnofIii" => ContentRatingRcnofRating::RcnofIii,
                "rcnofIv" => ContentRatingRcnofRating::RcnofIv,
                "rcnofUnrated" => ContentRatingRcnofRating::RcnofUnrated,
                "rcnofUnspecified" => ContentRatingRcnofRating::RcnofUnspecified,
                "rcnofV" => ContentRatingRcnofRating::RcnofV,
                "rcnofVi" => ContentRatingRcnofRating::RcnofVi,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRcnofRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRcnofRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRcnofRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rcnofI" => ContentRatingRcnofRating::RcnofI,
                "rcnofIi" => ContentRatingRcnofRating::RcnofIi,
                "rcnofIii" => ContentRatingRcnofRating::RcnofIii,
                "rcnofIv" => ContentRatingRcnofRating::RcnofIv,
                "rcnofUnrated" => ContentRatingRcnofRating::RcnofUnrated,
                "rcnofUnspecified" => ContentRatingRcnofRating::RcnofUnspecified,
                "rcnofV" => ContentRatingRcnofRating::RcnofV,
                "rcnofVi" => ContentRatingRcnofRating::RcnofVi,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRcnofRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRcnofRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingResorteviolenciaRating {
        #[doc = "A"]
        ResorteviolenciaA,
        #[doc = "B"]
        ResorteviolenciaB,
        #[doc = "C"]
        ResorteviolenciaC,
        #[doc = "D"]
        ResorteviolenciaD,
        #[doc = "E"]
        ResorteviolenciaE,
        ResorteviolenciaUnrated,
        ResorteviolenciaUnspecified,
    }
    impl ContentRatingResorteviolenciaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingResorteviolenciaRating::ResorteviolenciaA => "resorteviolenciaA",
                ContentRatingResorteviolenciaRating::ResorteviolenciaB => "resorteviolenciaB",
                ContentRatingResorteviolenciaRating::ResorteviolenciaC => "resorteviolenciaC",
                ContentRatingResorteviolenciaRating::ResorteviolenciaD => "resorteviolenciaD",
                ContentRatingResorteviolenciaRating::ResorteviolenciaE => "resorteviolenciaE",
                ContentRatingResorteviolenciaRating::ResorteviolenciaUnrated => {
                    "resorteviolenciaUnrated"
                }
                ContentRatingResorteviolenciaRating::ResorteviolenciaUnspecified => {
                    "resorteviolenciaUnspecified"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingResorteviolenciaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingResorteviolenciaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingResorteviolenciaRating, ()> {
            Ok(match s {
                "resorteviolenciaA" => ContentRatingResorteviolenciaRating::ResorteviolenciaA,
                "resorteviolenciaB" => ContentRatingResorteviolenciaRating::ResorteviolenciaB,
                "resorteviolenciaC" => ContentRatingResorteviolenciaRating::ResorteviolenciaC,
                "resorteviolenciaD" => ContentRatingResorteviolenciaRating::ResorteviolenciaD,
                "resorteviolenciaE" => ContentRatingResorteviolenciaRating::ResorteviolenciaE,
                "resorteviolenciaUnrated" => {
                    ContentRatingResorteviolenciaRating::ResorteviolenciaUnrated
                }
                "resorteviolenciaUnspecified" => {
                    ContentRatingResorteviolenciaRating::ResorteviolenciaUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingResorteviolenciaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingResorteviolenciaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingResorteviolenciaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "resorteviolenciaA" => ContentRatingResorteviolenciaRating::ResorteviolenciaA,
                "resorteviolenciaB" => ContentRatingResorteviolenciaRating::ResorteviolenciaB,
                "resorteviolenciaC" => ContentRatingResorteviolenciaRating::ResorteviolenciaC,
                "resorteviolenciaD" => ContentRatingResorteviolenciaRating::ResorteviolenciaD,
                "resorteviolenciaE" => ContentRatingResorteviolenciaRating::ResorteviolenciaE,
                "resorteviolenciaUnrated" => {
                    ContentRatingResorteviolenciaRating::ResorteviolenciaUnrated
                }
                "resorteviolenciaUnspecified" => {
                    ContentRatingResorteviolenciaRating::ResorteviolenciaUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingResorteviolenciaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingResorteviolenciaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRtcRating {
        #[doc = "A"]
        RtcA,
        #[doc = "AA"]
        RtcAa,
        #[doc = "B"]
        RtcB,
        #[doc = "B15"]
        RtcB15,
        #[doc = "C"]
        RtcC,
        #[doc = "D"]
        RtcD,
        RtcUnrated,
        RtcUnspecified,
    }
    impl ContentRatingRtcRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRtcRating::RtcA => "rtcA",
                ContentRatingRtcRating::RtcAa => "rtcAa",
                ContentRatingRtcRating::RtcB => "rtcB",
                ContentRatingRtcRating::RtcB15 => "rtcB15",
                ContentRatingRtcRating::RtcC => "rtcC",
                ContentRatingRtcRating::RtcD => "rtcD",
                ContentRatingRtcRating::RtcUnrated => "rtcUnrated",
                ContentRatingRtcRating::RtcUnspecified => "rtcUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRtcRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRtcRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRtcRating, ()> {
            Ok(match s {
                "rtcA" => ContentRatingRtcRating::RtcA,
                "rtcAa" => ContentRatingRtcRating::RtcAa,
                "rtcB" => ContentRatingRtcRating::RtcB,
                "rtcB15" => ContentRatingRtcRating::RtcB15,
                "rtcC" => ContentRatingRtcRating::RtcC,
                "rtcD" => ContentRatingRtcRating::RtcD,
                "rtcUnrated" => ContentRatingRtcRating::RtcUnrated,
                "rtcUnspecified" => ContentRatingRtcRating::RtcUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRtcRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRtcRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRtcRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rtcA" => ContentRatingRtcRating::RtcA,
                "rtcAa" => ContentRatingRtcRating::RtcAa,
                "rtcB" => ContentRatingRtcRating::RtcB,
                "rtcB15" => ContentRatingRtcRating::RtcB15,
                "rtcC" => ContentRatingRtcRating::RtcC,
                "rtcD" => ContentRatingRtcRating::RtcD,
                "rtcUnrated" => ContentRatingRtcRating::RtcUnrated,
                "rtcUnspecified" => ContentRatingRtcRating::RtcUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRtcRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRtcRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRteRating {
        #[doc = "CH"]
        RteCh,
        #[doc = "GA"]
        RteGa,
        #[doc = "MA"]
        RteMa,
        #[doc = "PS"]
        RtePs,
        RteUnrated,
        RteUnspecified,
    }
    impl ContentRatingRteRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRteRating::RteCh => "rteCh",
                ContentRatingRteRating::RteGa => "rteGa",
                ContentRatingRteRating::RteMa => "rteMa",
                ContentRatingRteRating::RtePs => "rtePs",
                ContentRatingRteRating::RteUnrated => "rteUnrated",
                ContentRatingRteRating::RteUnspecified => "rteUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRteRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRteRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRteRating, ()> {
            Ok(match s {
                "rteCh" => ContentRatingRteRating::RteCh,
                "rteGa" => ContentRatingRteRating::RteGa,
                "rteMa" => ContentRatingRteRating::RteMa,
                "rtePs" => ContentRatingRteRating::RtePs,
                "rteUnrated" => ContentRatingRteRating::RteUnrated,
                "rteUnspecified" => ContentRatingRteRating::RteUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRteRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRteRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRteRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rteCh" => ContentRatingRteRating::RteCh,
                "rteGa" => ContentRatingRteRating::RteGa,
                "rteMa" => ContentRatingRteRating::RteMa,
                "rtePs" => ContentRatingRteRating::RtePs,
                "rteUnrated" => ContentRatingRteRating::RteUnrated,
                "rteUnspecified" => ContentRatingRteRating::RteUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRteRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRteRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingRussiaRating {
        #[doc = "0+"]
        Russia0,
        #[doc = "12+"]
        Russia12,
        #[doc = "16+"]
        Russia16,
        #[doc = "18+"]
        Russia18,
        #[doc = "6+"]
        Russia6,
        RussiaUnrated,
        RussiaUnspecified,
    }
    impl ContentRatingRussiaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingRussiaRating::Russia0 => "russia0",
                ContentRatingRussiaRating::Russia12 => "russia12",
                ContentRatingRussiaRating::Russia16 => "russia16",
                ContentRatingRussiaRating::Russia18 => "russia18",
                ContentRatingRussiaRating::Russia6 => "russia6",
                ContentRatingRussiaRating::RussiaUnrated => "russiaUnrated",
                ContentRatingRussiaRating::RussiaUnspecified => "russiaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingRussiaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingRussiaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingRussiaRating, ()> {
            Ok(match s {
                "russia0" => ContentRatingRussiaRating::Russia0,
                "russia12" => ContentRatingRussiaRating::Russia12,
                "russia16" => ContentRatingRussiaRating::Russia16,
                "russia18" => ContentRatingRussiaRating::Russia18,
                "russia6" => ContentRatingRussiaRating::Russia6,
                "russiaUnrated" => ContentRatingRussiaRating::RussiaUnrated,
                "russiaUnspecified" => ContentRatingRussiaRating::RussiaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingRussiaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingRussiaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingRussiaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "russia0" => ContentRatingRussiaRating::Russia0,
                "russia12" => ContentRatingRussiaRating::Russia12,
                "russia16" => ContentRatingRussiaRating::Russia16,
                "russia18" => ContentRatingRussiaRating::Russia18,
                "russia6" => ContentRatingRussiaRating::Russia6,
                "russiaUnrated" => ContentRatingRussiaRating::RussiaUnrated,
                "russiaUnspecified" => ContentRatingRussiaRating::RussiaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingRussiaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingRussiaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingSkfilmRating {
        #[doc = "G"]
        SkfilmG,
        #[doc = "P2"]
        SkfilmP2,
        #[doc = "P5"]
        SkfilmP5,
        #[doc = "P8"]
        SkfilmP8,
        SkfilmUnrated,
        SkfilmUnspecified,
    }
    impl ContentRatingSkfilmRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingSkfilmRating::SkfilmG => "skfilmG",
                ContentRatingSkfilmRating::SkfilmP2 => "skfilmP2",
                ContentRatingSkfilmRating::SkfilmP5 => "skfilmP5",
                ContentRatingSkfilmRating::SkfilmP8 => "skfilmP8",
                ContentRatingSkfilmRating::SkfilmUnrated => "skfilmUnrated",
                ContentRatingSkfilmRating::SkfilmUnspecified => "skfilmUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingSkfilmRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingSkfilmRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingSkfilmRating, ()> {
            Ok(match s {
                "skfilmG" => ContentRatingSkfilmRating::SkfilmG,
                "skfilmP2" => ContentRatingSkfilmRating::SkfilmP2,
                "skfilmP5" => ContentRatingSkfilmRating::SkfilmP5,
                "skfilmP8" => ContentRatingSkfilmRating::SkfilmP8,
                "skfilmUnrated" => ContentRatingSkfilmRating::SkfilmUnrated,
                "skfilmUnspecified" => ContentRatingSkfilmRating::SkfilmUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingSkfilmRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingSkfilmRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingSkfilmRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "skfilmG" => ContentRatingSkfilmRating::SkfilmG,
                "skfilmP2" => ContentRatingSkfilmRating::SkfilmP2,
                "skfilmP5" => ContentRatingSkfilmRating::SkfilmP5,
                "skfilmP8" => ContentRatingSkfilmRating::SkfilmP8,
                "skfilmUnrated" => ContentRatingSkfilmRating::SkfilmUnrated,
                "skfilmUnspecified" => ContentRatingSkfilmRating::SkfilmUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingSkfilmRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingSkfilmRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingSmaisRating {
        #[doc = "12"]
        Smais12,
        #[doc = "14"]
        Smais14,
        #[doc = "16"]
        Smais16,
        #[doc = "18"]
        Smais18,
        #[doc = "7"]
        Smais7,
        #[doc = "L"]
        SmaisL,
        SmaisUnrated,
        SmaisUnspecified,
    }
    impl ContentRatingSmaisRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingSmaisRating::Smais12 => "smais12",
                ContentRatingSmaisRating::Smais14 => "smais14",
                ContentRatingSmaisRating::Smais16 => "smais16",
                ContentRatingSmaisRating::Smais18 => "smais18",
                ContentRatingSmaisRating::Smais7 => "smais7",
                ContentRatingSmaisRating::SmaisL => "smaisL",
                ContentRatingSmaisRating::SmaisUnrated => "smaisUnrated",
                ContentRatingSmaisRating::SmaisUnspecified => "smaisUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingSmaisRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingSmaisRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingSmaisRating, ()> {
            Ok(match s {
                "smais12" => ContentRatingSmaisRating::Smais12,
                "smais14" => ContentRatingSmaisRating::Smais14,
                "smais16" => ContentRatingSmaisRating::Smais16,
                "smais18" => ContentRatingSmaisRating::Smais18,
                "smais7" => ContentRatingSmaisRating::Smais7,
                "smaisL" => ContentRatingSmaisRating::SmaisL,
                "smaisUnrated" => ContentRatingSmaisRating::SmaisUnrated,
                "smaisUnspecified" => ContentRatingSmaisRating::SmaisUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingSmaisRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingSmaisRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingSmaisRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "smais12" => ContentRatingSmaisRating::Smais12,
                "smais14" => ContentRatingSmaisRating::Smais14,
                "smais16" => ContentRatingSmaisRating::Smais16,
                "smais18" => ContentRatingSmaisRating::Smais18,
                "smais7" => ContentRatingSmaisRating::Smais7,
                "smaisL" => ContentRatingSmaisRating::SmaisL,
                "smaisUnrated" => ContentRatingSmaisRating::SmaisUnrated,
                "smaisUnspecified" => ContentRatingSmaisRating::SmaisUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingSmaisRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingSmaisRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingSmsaRating {
        #[doc = "11"]
        Smsa11,
        #[doc = "15"]
        Smsa15,
        #[doc = "7"]
        Smsa7,
        #[doc = "All ages"]
        SmsaA,
        SmsaUnrated,
        SmsaUnspecified,
    }
    impl ContentRatingSmsaRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingSmsaRating::Smsa11 => "smsa11",
                ContentRatingSmsaRating::Smsa15 => "smsa15",
                ContentRatingSmsaRating::Smsa7 => "smsa7",
                ContentRatingSmsaRating::SmsaA => "smsaA",
                ContentRatingSmsaRating::SmsaUnrated => "smsaUnrated",
                ContentRatingSmsaRating::SmsaUnspecified => "smsaUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingSmsaRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingSmsaRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingSmsaRating, ()> {
            Ok(match s {
                "smsa11" => ContentRatingSmsaRating::Smsa11,
                "smsa15" => ContentRatingSmsaRating::Smsa15,
                "smsa7" => ContentRatingSmsaRating::Smsa7,
                "smsaA" => ContentRatingSmsaRating::SmsaA,
                "smsaUnrated" => ContentRatingSmsaRating::SmsaUnrated,
                "smsaUnspecified" => ContentRatingSmsaRating::SmsaUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingSmsaRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingSmsaRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingSmsaRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "smsa11" => ContentRatingSmsaRating::Smsa11,
                "smsa15" => ContentRatingSmsaRating::Smsa15,
                "smsa7" => ContentRatingSmsaRating::Smsa7,
                "smsaA" => ContentRatingSmsaRating::SmsaA,
                "smsaUnrated" => ContentRatingSmsaRating::SmsaUnrated,
                "smsaUnspecified" => ContentRatingSmsaRating::SmsaUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingSmsaRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingSmsaRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingTvpgRating {
        #[doc = "TV-14"]
        Pg14,
        #[doc = "TV-G"]
        TvpgG,
        #[doc = "TV-MA"]
        TvpgMa,
        #[doc = "TV-PG"]
        TvpgPg,
        TvpgUnrated,
        TvpgUnspecified,
        #[doc = "TV-Y"]
        TvpgY,
        #[doc = "TV-Y7"]
        TvpgY7,
        #[doc = "TV-Y7-FV"]
        TvpgY7Fv,
    }
    impl ContentRatingTvpgRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingTvpgRating::Pg14 => "pg14",
                ContentRatingTvpgRating::TvpgG => "tvpgG",
                ContentRatingTvpgRating::TvpgMa => "tvpgMa",
                ContentRatingTvpgRating::TvpgPg => "tvpgPg",
                ContentRatingTvpgRating::TvpgUnrated => "tvpgUnrated",
                ContentRatingTvpgRating::TvpgUnspecified => "tvpgUnspecified",
                ContentRatingTvpgRating::TvpgY => "tvpgY",
                ContentRatingTvpgRating::TvpgY7 => "tvpgY7",
                ContentRatingTvpgRating::TvpgY7Fv => "tvpgY7Fv",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingTvpgRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingTvpgRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingTvpgRating, ()> {
            Ok(match s {
                "pg14" => ContentRatingTvpgRating::Pg14,
                "tvpgG" => ContentRatingTvpgRating::TvpgG,
                "tvpgMa" => ContentRatingTvpgRating::TvpgMa,
                "tvpgPg" => ContentRatingTvpgRating::TvpgPg,
                "tvpgUnrated" => ContentRatingTvpgRating::TvpgUnrated,
                "tvpgUnspecified" => ContentRatingTvpgRating::TvpgUnspecified,
                "tvpgY" => ContentRatingTvpgRating::TvpgY,
                "tvpgY7" => ContentRatingTvpgRating::TvpgY7,
                "tvpgY7Fv" => ContentRatingTvpgRating::TvpgY7Fv,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingTvpgRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingTvpgRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingTvpgRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "pg14" => ContentRatingTvpgRating::Pg14,
                "tvpgG" => ContentRatingTvpgRating::TvpgG,
                "tvpgMa" => ContentRatingTvpgRating::TvpgMa,
                "tvpgPg" => ContentRatingTvpgRating::TvpgPg,
                "tvpgUnrated" => ContentRatingTvpgRating::TvpgUnrated,
                "tvpgUnspecified" => ContentRatingTvpgRating::TvpgUnspecified,
                "tvpgY" => ContentRatingTvpgRating::TvpgY,
                "tvpgY7" => ContentRatingTvpgRating::TvpgY7,
                "tvpgY7Fv" => ContentRatingTvpgRating::TvpgY7Fv,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingTvpgRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingTvpgRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum ContentRatingYtRating {
        YtAgeRestricted,
        YtUnspecified,
    }
    impl ContentRatingYtRating {
        pub fn as_str(self) -> &'static str {
            match self {
                ContentRatingYtRating::YtAgeRestricted => "ytAgeRestricted",
                ContentRatingYtRating::YtUnspecified => "ytUnspecified",
            }
        }
    }
    impl ::std::convert::AsRef<str> for ContentRatingYtRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for ContentRatingYtRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<ContentRatingYtRating, ()> {
            Ok(match s {
                "ytAgeRestricted" => ContentRatingYtRating::YtAgeRestricted,
                "ytUnspecified" => ContentRatingYtRating::YtUnspecified,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for ContentRatingYtRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for ContentRatingYtRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for ContentRatingYtRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "ytAgeRestricted" => ContentRatingYtRating::YtAgeRestricted,
                "ytUnspecified" => ContentRatingYtRating::YtUnspecified,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for ContentRatingYtRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ContentRatingYtRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct GeoPoint {
        #[doc = "Altitude above the reference ellipsoid, in meters."]
        #[serde(
            rename = "altitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub altitude: ::std::option::Option<f64>,
        #[doc = "Latitude in degrees."]
        #[serde(
            rename = "latitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub latitude: ::std::option::Option<f64>,
        #[doc = "Longitude in degrees."]
        #[serde(
            rename = "longitude",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub longitude: ::std::option::Option<f64>,
    }
    impl ::google_field_selector::FieldSelector for GeoPoint {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GeoPoint {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GuideCategory {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the guide category."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#guideCategory\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the category,\nsuch as its title."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::GuideCategorySnippet>,
    }
    impl ::google_field_selector::FieldSelector for GuideCategory {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GuideCategory {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GuideCategoryListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of categories that can be associated with YouTube channels. In this\nmap, the category ID is the map key, and its value is the corresponding\n<code>guideCategory</code> resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::GuideCategory>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#guideCategoryListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GuideCategoryListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GuideCategoryListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct GuideCategorySnippet {
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Description of the guide category."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for GuideCategorySnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for GuideCategorySnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18Nlanguage {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the i18n language."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#i18nLanguage\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the i18n\nlanguage, such as language code and human-readable name."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::I18NlanguageSnippet>,
    }
    impl ::google_field_selector::FieldSelector for I18Nlanguage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18Nlanguage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NlanguageListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of supported i18n languages. In this map, the i18n language ID is\nthe map key, and its value is the corresponding <code>i18nLanguage</code>\nresource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::I18Nlanguage>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#i18nLanguageListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NlanguageListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NlanguageListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NlanguageSnippet {
        #[doc = "A short BCP-47 code that uniquely identifies a language."]
        #[serde(
            rename = "hl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub hl: ::std::option::Option<String>,
        #[doc = "The human-readable name of the language in the language itself."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NlanguageSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NlanguageSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18Nregion {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the i18n region."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#i18nRegion\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the i18n\nregion, such as region code and human-readable name."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::I18NregionSnippet>,
    }
    impl ::google_field_selector::FieldSelector for I18Nregion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18Nregion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NregionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of regions where YouTube is available. In this map, the i18n region\nID is the map key, and its value is the corresponding\n<code>i18nRegion</code> resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::I18Nregion>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#i18nRegionListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NregionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NregionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct I18NregionSnippet {
        #[doc = "The region code as a 2-letter ISO country code."]
        #[serde(
            rename = "gl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub gl: ::std::option::Option<String>,
        #[doc = "The human-readable name of the region."]
        #[serde(
            rename = "name",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for I18NregionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for I18NregionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ImageSettings {
        #[doc = "The URL for the background image shown on the video watch page. The image\nshould be 1200px by 615px, with a maximum file size of 128k."]
        #[serde(
            rename = "backgroundImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub background_image_url: ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "This is used only in update requests; if it's set, we use this URL to\ngenerate all of the above banner URLs."]
        #[serde(
            rename = "bannerExternalUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_external_url: ::std::option::Option<String>,
        #[doc = "Banner image. Desktop size (1060x175)."]
        #[serde(
            rename = "bannerImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size high resolution (1440x395)."]
        #[serde(
            rename = "bannerMobileExtraHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_extra_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size high resolution (1280x360)."]
        #[serde(
            rename = "bannerMobileHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size (640x175)."]
        #[serde(
            rename = "bannerMobileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size low resolution (320x88)."]
        #[serde(
            rename = "bannerMobileLowImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_low_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Mobile size medium/high resolution (960x263)."]
        #[serde(
            rename = "bannerMobileMediumHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_mobile_medium_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size extra high resolution (2560x424)."]
        #[serde(
            rename = "bannerTabletExtraHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_extra_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size high resolution (2276x377)."]
        #[serde(
            rename = "bannerTabletHdImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_hd_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size (1707x283)."]
        #[serde(
            rename = "bannerTabletImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. Tablet size low resolution (1138x188)."]
        #[serde(
            rename = "bannerTabletLowImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tablet_low_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size high resolution (1920x1080)."]
        #[serde(
            rename = "bannerTvHighImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_high_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size extra high resolution (2120x1192)."]
        #[serde(
            rename = "bannerTvImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size low resolution (854x480)."]
        #[serde(
            rename = "bannerTvLowImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_low_image_url: ::std::option::Option<String>,
        #[doc = "Banner image. TV size medium resolution (1280x720)."]
        #[serde(
            rename = "bannerTvMediumImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banner_tv_medium_image_url: ::std::option::Option<String>,
        #[doc = "The image map script for the large banner image."]
        #[serde(
            rename = "largeBrandedBannerImageImapScript",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub large_branded_banner_image_imap_script:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The URL for the 854px by 70px image that appears below the video player in\nthe expanded video view of the video watch page."]
        #[serde(
            rename = "largeBrandedBannerImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub large_branded_banner_image_url:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The image map script for the small banner image."]
        #[serde(
            rename = "smallBrandedBannerImageImapScript",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub small_branded_banner_image_imap_script:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The URL for the 640px by 70px banner image that appears below the video\nplayer in the default view of the video watch page.\nThe URL for the image that appears above the top-left corner of the video\nplayer. This is a 25-pixel-high image with a flexible width that cannot\nexceed 170 pixels."]
        #[serde(
            rename = "smallBrandedBannerImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub small_branded_banner_image_url:
            ::std::option::Option<crate::schemas::LocalizedProperty>,
        #[doc = "The URL for a 1px by 1px tracking pixel that can be used to collect\nstatistics for views of the channel or video pages."]
        #[serde(
            rename = "trackingImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tracking_image_url: ::std::option::Option<String>,
        #[serde(
            rename = "watchIconImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub watch_icon_image_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ImageSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ImageSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct IngestionInfo {
        #[doc = "The backup ingestion URL that you should use to stream video to\nYouTube. You have the option of simultaneously streaming the content\nthat you are sending to the <code>ingestionAddress</code> to this URL."]
        #[serde(
            rename = "backupIngestionAddress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub backup_ingestion_address: ::std::option::Option<String>,
        #[doc = "The primary ingestion URL that you should use to stream video to\nYouTube. You must stream video to this URL.<br><br>\nDepending on which application or tool you use to encode\nyour video stream, you may need to enter the stream URL and stream\nname separately or you may need to concatenate them in the following\nformat:<br><pre><strong>STREAM_URL/STREAM_NAME</strong></pre>"]
        #[serde(
            rename = "ingestionAddress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ingestion_address: ::std::option::Option<String>,
        #[doc = "This ingestion url may be used instead of\n<code>backupIngestionAddress</code> in order to stream via RTMPS. Not\napplicable to non-RTMP streams."]
        #[serde(
            rename = "rtmpsBackupIngestionAddress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rtmps_backup_ingestion_address: ::std::option::Option<String>,
        #[doc = "This ingestion url may be used instead of\n<code>ingestionAddress</code> in order to stream via RTMPS. Not applicable\nto non-RTMP streams."]
        #[serde(
            rename = "rtmpsIngestionAddress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rtmps_ingestion_address: ::std::option::Option<String>,
        #[doc = "The HTTP or RTMP stream name that YouTube assigns to the video stream."]
        #[serde(
            rename = "streamName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub stream_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for IngestionInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for IngestionInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoBranding {
        #[doc = "The bytes the uploaded image. Only used in api to youtube communication."]
        #[serde(
            rename = "imageBytes",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_bytes: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The url of the uploaded image. Only used in apiary to api communication."]
        #[serde(
            rename = "imageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub image_url: ::std::option::Option<String>,
        #[doc = "The spatial position within the video where the branding watermark will be\ndisplayed."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::InvideoPosition>,
        #[doc = "The channel to which this branding links. If not present it defaults to\nthe current channel."]
        #[serde(
            rename = "targetChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub target_channel_id: ::std::option::Option<String>,
        #[doc = "The temporal position within the video where watermark will be displayed."]
        #[serde(
            rename = "timing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub timing: ::std::option::Option<crate::schemas::InvideoTiming>,
    }
    impl ::google_field_selector::FieldSelector for InvideoBranding {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoBranding {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoPosition {
        #[doc = "Describes in which corner of the video the visual widget will appear."]
        #[serde(
            rename = "cornerPosition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub corner_position: ::std::option::Option<crate::schemas::InvideoPositionCornerPosition>,
        #[doc = "Defines the position type."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::InvideoPositionType>,
    }
    impl ::google_field_selector::FieldSelector for InvideoPosition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPosition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InvideoPositionCornerPosition {
        BottomLeft,
        BottomRight,
        TopLeft,
        TopRight,
    }
    impl InvideoPositionCornerPosition {
        pub fn as_str(self) -> &'static str {
            match self {
                InvideoPositionCornerPosition::BottomLeft => "bottomLeft",
                InvideoPositionCornerPosition::BottomRight => "bottomRight",
                InvideoPositionCornerPosition::TopLeft => "topLeft",
                InvideoPositionCornerPosition::TopRight => "topRight",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InvideoPositionCornerPosition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InvideoPositionCornerPosition {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InvideoPositionCornerPosition, ()> {
            Ok(match s {
                "bottomLeft" => InvideoPositionCornerPosition::BottomLeft,
                "bottomRight" => InvideoPositionCornerPosition::BottomRight,
                "topLeft" => InvideoPositionCornerPosition::TopLeft,
                "topRight" => InvideoPositionCornerPosition::TopRight,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InvideoPositionCornerPosition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InvideoPositionCornerPosition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InvideoPositionCornerPosition {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bottomLeft" => InvideoPositionCornerPosition::BottomLeft,
                "bottomRight" => InvideoPositionCornerPosition::BottomRight,
                "topLeft" => InvideoPositionCornerPosition::TopLeft,
                "topRight" => InvideoPositionCornerPosition::TopRight,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InvideoPositionCornerPosition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPositionCornerPosition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InvideoPositionType {
        Corner,
    }
    impl InvideoPositionType {
        pub fn as_str(self) -> &'static str {
            match self {
                InvideoPositionType::Corner => "corner",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InvideoPositionType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InvideoPositionType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InvideoPositionType, ()> {
            Ok(match s {
                "corner" => InvideoPositionType::Corner,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InvideoPositionType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InvideoPositionType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InvideoPositionType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "corner" => InvideoPositionType::Corner,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InvideoPositionType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPositionType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoPromotion {
        #[doc = "The default temporal position within the video where the promoted item will\nbe displayed. Can be overridden by more specific timing in the item."]
        #[serde(
            rename = "defaultTiming",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_timing: ::std::option::Option<crate::schemas::InvideoTiming>,
        #[doc = "List of promoted items in decreasing priority."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::PromotedItem>>,
        #[doc = "The spatial position within the video where the promoted item will be\ndisplayed."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<crate::schemas::InvideoPosition>,
        #[doc = "Indicates whether the channel's promotional campaign uses \"smart timing.\"\nThis feature attempts to show promotions at a point in the video when they\nare more likely to be clicked and less likely to disrupt the viewing\nexperience. This feature also picks up a single promotion to show on each\nvideo."]
        #[serde(
            rename = "useSmartTiming",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub use_smart_timing: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for InvideoPromotion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoPromotion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct InvideoTiming {
        #[doc = "Defines the duration in milliseconds for which the promotion should be\ndisplayed. If missing, the client should use the default."]
        #[serde(
            rename = "durationMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub duration_ms: ::std::option::Option<u64>,
        #[doc = "Defines the time at which the promotion will appear. Depending on the value\nof <code>type</code> the value of the <code>offsetMs</code> field will\nrepresent a time offset from the start or from the end of the video,\nexpressed in milliseconds."]
        #[serde(
            rename = "offsetMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub offset_ms: ::std::option::Option<u64>,
        #[doc = "Describes a timing type. If the value is <code>offsetFromStart</code>, then\nthe <code>offsetMs</code> field represents an offset from the start of the\nvideo. If the value is <code>offsetFromEnd</code>, then the\n<code>offsetMs</code> field represents an offset from the end of the video."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::InvideoTimingType>,
    }
    impl ::google_field_selector::FieldSelector for InvideoTiming {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoTiming {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum InvideoTimingType {
        OffsetFromEnd,
        OffsetFromStart,
    }
    impl InvideoTimingType {
        pub fn as_str(self) -> &'static str {
            match self {
                InvideoTimingType::OffsetFromEnd => "offsetFromEnd",
                InvideoTimingType::OffsetFromStart => "offsetFromStart",
            }
        }
    }
    impl ::std::convert::AsRef<str> for InvideoTimingType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for InvideoTimingType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<InvideoTimingType, ()> {
            Ok(match s {
                "offsetFromEnd" => InvideoTimingType::OffsetFromEnd,
                "offsetFromStart" => InvideoTimingType::OffsetFromStart,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for InvideoTimingType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for InvideoTimingType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for InvideoTimingType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "offsetFromEnd" => InvideoTimingType::OffsetFromEnd,
                "offsetFromStart" => InvideoTimingType::OffsetFromStart,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for InvideoTimingType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for InvideoTimingType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LanguageTag {
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LanguageTag {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LanguageTag {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LevelDetails {
        #[doc = "The name that should be used when referring to this level."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LevelDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LevelDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcast {
        #[doc = "The <code>contentDetails</code> object contains information about the\nevent's video content, such as whether the content can be shown in an\nembedded video player or if it will be archived and therefore available\nfor viewing after the event has concluded."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::LiveBroadcastContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the broadcast."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveBroadcast\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the event,\nincluding its title, description, start time, and end time."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveBroadcastSnippet>,
        #[doc = "The <code>statistics</code> object contains info about the event's current\nstats. These include concurrent viewers and total chat count. Statistics\ncan change (in either direction) during the lifetime of an event.\nStatistics are only returned while the event is live."]
        #[serde(
            rename = "statistics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statistics: ::std::option::Option<crate::schemas::LiveBroadcastStatistics>,
        #[doc = "The <code>status</code> object contains information about the event's\nstatus."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::LiveBroadcastStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcast {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcast {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastContentDetails {
        #[doc = "This value uniquely identifies the\n<code><a href=\"/youtube/v3/live/docs/liveStreams\">live stream</a></code>\nbound to the broadcast."]
        #[serde(
            rename = "boundStreamId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bound_stream_id: ::std::option::Option<String>,
        #[doc = "The date and time that the live stream referenced by\n<code>boundStreamId</code> was last updated."]
        #[serde(
            rename = "boundStreamLastUpdateTimeMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub bound_stream_last_update_time_ms: ::std::option::Option<String>,
        #[serde(
            rename = "closedCaptionsType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub closed_captions_type:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsClosedCaptionsType>,
        #[doc = "This setting indicates whether auto start is enabled for this broadcast.\nThe default value for this property is <code>false</code>.<br><br>\nThis setting can only be used by Events."]
        #[serde(
            rename = "enableAutoStart",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_auto_start: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether auto stop is enabled for this broadcast.\nThe default value for this property is <code>false</code>.<br><br>\nThis setting can only be used by Events."]
        #[serde(
            rename = "enableAutoStop",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_auto_stop: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether HTTP POST closed captioning is enabled for\nthis broadcast. The ingestion URL of the closed captions is returned\nthrough the liveStreams API.  This is mutually exclusive with using the\n<code>closed_captions_type</code> property, and is equivalent to setting\n<code>closed_captions_type</code> to CLOSED_CAPTIONS_HTTP_POST."]
        #[serde(
            rename = "enableClosedCaptions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_closed_captions: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether YouTube should enable content encryption\nfor the broadcast."]
        #[serde(
            rename = "enableContentEncryption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_content_encryption: ::std::option::Option<bool>,
        #[doc = "This setting determines whether viewers can access DVR controls while\nwatching the video. DVR controls enable the viewer to control the video\nplayback experience by pausing, rewinding, or fast forwarding content.\nThe default value for this property is <code>true</code>.<br><br>\n\n<strong>Important:</strong> You must set the value to <code>true</code>\nand also set the <code>enableArchive</code> property's value to\n<code>true</code> if you want to make playback available immediately\nafter the broadcast ends."]
        #[serde(
            rename = "enableDvr",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_dvr: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether the broadcast video can be played in an\nembedded player. If you choose to archive the video (using the\n<code>enableArchive</code> property), this setting will also apply to\nthe archived video."]
        #[serde(
            rename = "enableEmbed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_embed: ::std::option::Option<bool>,
        #[doc = "Indicates whether this broadcast has low latency enabled."]
        #[serde(
            rename = "enableLowLatency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_low_latency: ::std::option::Option<bool>,
        #[doc = "If both this and enable_low_latency are set, they must match.\nLATENCY_NORMAL should match enable_low_latency=false\nLATENCY_LOW should match enable_low_latency=true\nLATENCY_ULTRA_LOW should have enable_low_latency omitted."]
        #[serde(
            rename = "latencyPreference",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub latency_preference:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsLatencyPreference>,
        #[doc = "The mesh for projecting the video if <code>projection</code> is\n<code>mesh</code>. The mesh value must be a UTF-8 string containing the\nbase-64 encoding of 3D mesh data that follows the <a\nhref=\"https://github.com/google/spatial-media/blob/master/docs/spherical-video-v2-rfc.md\">\nSpherical Video V2 RFC specification</a> for an mshp box, excluding the box\nsize and type but including the following four reserved zero bytes for the\nversion and flags."]
        #[serde(
            rename = "mesh",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub mesh: ::std::option::Option<::google_api_bytes::Bytes>,
        #[doc = "The <code>monitorStream</code> object contains information about the\nmonitor stream, which the broadcaster can use to review the event\ncontent before the broadcast stream is shown publicly."]
        #[serde(
            rename = "monitorStream",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub monitor_stream: ::std::option::Option<crate::schemas::MonitorStreamInfo>,
        #[doc = "The projection format of this broadcast. This defaults to\n<code>rectangular</code>."]
        #[serde(
            rename = "projection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub projection:
            ::std::option::Option<crate::schemas::LiveBroadcastContentDetailsProjection>,
        #[doc = "Automatically start recording after the event goes live.\nThe default value for this property is <code>true</code>.<br><br>\n\n<strong>Important:</strong> You must also set the <code>enableDvr</code>\nproperty's value to\n<code>true</code> if you want the playback to be available immediately\nafter the broadcast ends. If you set this property's value to\n<code>true</code> but do not also set the <code>enableDvr</code> property\nto <code>true</code>, there may be a delay of around one day before the\narchived video will be available for playback."]
        #[serde(
            rename = "recordFromStart",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub record_from_start: ::std::option::Option<bool>,
        #[doc = "This setting indicates whether the broadcast should automatically begin\nwith an <a\nhref=\"/youtube/v3/live/getting-started#Displaying_Slates\">in-stream\nslate</a> when you update the broadcast's status to <code>live</code>.\nAfter updating the status, you then need to send a\n<code><a\nhref=\"/youtube/v3/live/docs/liveCuepoints/insert\">liveCuepoints.insert</a></code>\nrequest that sets the cuepoint's <code>eventState</code> to\n<code>end</code> to remove the in-stream slate and make your broadcast\nstream visible to viewers."]
        #[serde(
            rename = "startWithSlate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_with_slate: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsClosedCaptionsType {
        ClosedCaptionsDisabled,
        ClosedCaptionsEmbedded,
        ClosedCaptionsHttpPost,
        ClosedCaptionsTypeUnspecified,
    }
    impl LiveBroadcastContentDetailsClosedCaptionsType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsDisabled => {
                    "closedCaptionsDisabled"
                }
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsEmbedded => {
                    "closedCaptionsEmbedded"
                }
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsHttpPost => {
                    "closedCaptionsHttpPost"
                }
                LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsTypeUnspecified => {
                    "closedCaptionsTypeUnspecified"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsClosedCaptionsType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsClosedCaptionsType {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<LiveBroadcastContentDetailsClosedCaptionsType, ()> {
            Ok(match s {
                "closedCaptionsDisabled" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsDisabled
                }
                "closedCaptionsEmbedded" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsEmbedded
                }
                "closedCaptionsHttpPost" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsHttpPost
                }
                "closedCaptionsTypeUnspecified" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsTypeUnspecified
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsClosedCaptionsType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsClosedCaptionsType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsClosedCaptionsType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "closedCaptionsDisabled" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsDisabled
                }
                "closedCaptionsEmbedded" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsEmbedded
                }
                "closedCaptionsHttpPost" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsHttpPost
                }
                "closedCaptionsTypeUnspecified" => {
                    LiveBroadcastContentDetailsClosedCaptionsType::ClosedCaptionsTypeUnspecified
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsClosedCaptionsType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsClosedCaptionsType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsLatencyPreference {
        LatencyPreferenceUnspecified,
        #[doc = "Best for: near real-time interaction, with minimal playback buffering."]
        Low,
        #[doc = "Best for: highest quality viewer playbacks and higher resolutions."]
        Normal,
        #[doc = "Best for: real-time interaction\nDoes not support: Closed captions, 1440p, and 4k resolutions"]
        UltraLow,
    }
    impl LiveBroadcastContentDetailsLatencyPreference {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsLatencyPreference::LatencyPreferenceUnspecified => {
                    "latencyPreferenceUnspecified"
                }
                LiveBroadcastContentDetailsLatencyPreference::Low => "low",
                LiveBroadcastContentDetailsLatencyPreference::Normal => "normal",
                LiveBroadcastContentDetailsLatencyPreference::UltraLow => "ultraLow",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsLatencyPreference {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsLatencyPreference {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<LiveBroadcastContentDetailsLatencyPreference, ()> {
            Ok(match s {
                "latencyPreferenceUnspecified" => {
                    LiveBroadcastContentDetailsLatencyPreference::LatencyPreferenceUnspecified
                }
                "low" => LiveBroadcastContentDetailsLatencyPreference::Low,
                "normal" => LiveBroadcastContentDetailsLatencyPreference::Normal,
                "ultraLow" => LiveBroadcastContentDetailsLatencyPreference::UltraLow,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsLatencyPreference {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsLatencyPreference {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsLatencyPreference {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "latencyPreferenceUnspecified" => {
                    LiveBroadcastContentDetailsLatencyPreference::LatencyPreferenceUnspecified
                }
                "low" => LiveBroadcastContentDetailsLatencyPreference::Low,
                "normal" => LiveBroadcastContentDetailsLatencyPreference::Normal,
                "ultraLow" => LiveBroadcastContentDetailsLatencyPreference::UltraLow,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsLatencyPreference {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsLatencyPreference {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastContentDetailsProjection {
        Mesh,
        ProjectionUnspecified,
        Rectangular,
        _360,
    }
    impl LiveBroadcastContentDetailsProjection {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastContentDetailsProjection::Mesh => "mesh",
                LiveBroadcastContentDetailsProjection::ProjectionUnspecified => {
                    "projectionUnspecified"
                }
                LiveBroadcastContentDetailsProjection::Rectangular => "rectangular",
                LiveBroadcastContentDetailsProjection::_360 => "360",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastContentDetailsProjection {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastContentDetailsProjection {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastContentDetailsProjection, ()> {
            Ok(match s {
                "mesh" => LiveBroadcastContentDetailsProjection::Mesh,
                "projectionUnspecified" => {
                    LiveBroadcastContentDetailsProjection::ProjectionUnspecified
                }
                "rectangular" => LiveBroadcastContentDetailsProjection::Rectangular,
                "360" => LiveBroadcastContentDetailsProjection::_360,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastContentDetailsProjection {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastContentDetailsProjection {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastContentDetailsProjection {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "mesh" => LiveBroadcastContentDetailsProjection::Mesh,
                "projectionUnspecified" => {
                    LiveBroadcastContentDetailsProjection::ProjectionUnspecified
                }
                "rectangular" => LiveBroadcastContentDetailsProjection::Rectangular,
                "360" => LiveBroadcastContentDetailsProjection::_360,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastContentDetailsProjection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastContentDetailsProjection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of broadcasts that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveBroadcast>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveBroadcastListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastSnippet {
        #[doc = "The date and time that the broadcast actually ended. This information is\nonly available once the broadcast's state is <code>complete</code>. The\nvalue is specified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "actualEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_end_time: ::std::option::Option<String>,
        #[doc = "The date and time that the broadcast actually started. This information is\nonly available once the broadcast's state is <code>live</code>. The\nvalue is specified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "actualStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_start_time: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel that\nis publishing the broadcast."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The broadcast's description. As with the <code>title</code>, you can set\nthis field by modifying the broadcast resource or by setting the\n<code><a\nhref=\"/youtube/v3/docs/videos#snippet.description\">description</a></code>\nfield of the corresponding video resource."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Indicates whether this broadcast is the default broadcast.\nInternal only."]
        #[serde(
            rename = "isDefaultBroadcast",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_default_broadcast: ::std::option::Option<bool>,
        #[doc = "The id of the live chat for this broadcast."]
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[doc = "The date and time that the broadcast was added to YouTube's live broadcast\nschedule. The value is specified in\n<a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The date and time that the broadcast is scheduled to end. The value\nis specified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "scheduledEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_end_time: ::std::option::Option<String>,
        #[doc = "The date and time that the broadcast is scheduled to start. The value\nis specified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "scheduledStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_start_time: ::std::option::Option<String>,
        #[doc = "A map of thumbnail images associated with the broadcast. For each nested\nobject in this object, the key is the name of the thumbnail image, and\nthe value is an object that contains other information about the\nthumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The broadcast's title. Note that the broadcast represents exactly one\nYouTube video. You can set this field by modifying the broadcast resource\nor by setting the\n<code><a href=\"/youtube/v3/docs/videos#snippet.title\">title</a></code>\nfield of the corresponding video resource."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastStatistics {
        #[doc = "The total number of live chat messages currently on the broadcast. The\nproperty and its value will be present if the broadcast is public, has\nthe live chat feature enabled, and has at least one message. Note that\nthis field will not be filled after the broadcast ends. So this property\nwould not identify the number of chat messages for an archived video of a\ncompleted live broadcast."]
        #[serde(
            rename = "totalChatCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub total_chat_count: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatistics {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatistics {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveBroadcastStatus {
        #[doc = "The broadcast's status. The status can be updated using the API's\n<code><a\nhref=\"/youtube/v3/live/docs/liveBroadcasts/transition\"\n>liveBroadcasts.transition</a></code> method."]
        #[serde(
            rename = "lifeCycleStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub life_cycle_status:
            ::std::option::Option<crate::schemas::LiveBroadcastStatusLifeCycleStatus>,
        #[doc = "Priority of the live broadcast event (internal state)."]
        #[serde(
            rename = "liveBroadcastPriority",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_broadcast_priority:
            ::std::option::Option<crate::schemas::LiveBroadcastStatusLiveBroadcastPriority>,
        #[doc = "Whether the broadcast is made for kids or not, decided by YouTube instead\nof the creator. This field is read only."]
        #[serde(
            rename = "madeForKids",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub made_for_kids: ::std::option::Option<bool>,
        #[doc = "The broadcast's privacy status. Note that the broadcast represents\nexactly one YouTube video, so the privacy settings are identical to\nthose supported for videos. In addition, you can set this field by\nmodifying the broadcast resource or by setting the\n<code><a\nhref=\"/youtube/v3/docs/videos#status.privacyStatus\"\n>privacyStatus</a></code>\nfield of the corresponding video resource."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::LiveBroadcastStatusPrivacyStatus>,
        #[doc = "The broadcast's recording status."]
        #[serde(
            rename = "recordingStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recording_status:
            ::std::option::Option<crate::schemas::LiveBroadcastStatusRecordingStatus>,
        #[doc = "This field will be set to True if the creator declares the broadcast to be\nkids only: go/live-cw-work."]
        #[serde(
            rename = "selfDeclaredMadeForKids",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub self_declared_made_for_kids: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusLifeCycleStatus {
        #[doc = "The broadcast is finished."]
        Complete,
        #[doc = "Incomplete settings, but otherwise valid"]
        Created,
        #[doc = "No value or the value is unknown."]
        LifeCycleStatusUnspecified,
        #[doc = "Viper is recording; this means the \"clock\" is running"]
        Live,
        #[doc = "Transition into LIVE has been requested"]
        LiveStarting,
        #[doc = "Complete settings"]
        Ready,
        #[doc = "This broadcast was removed by admin action"]
        Revoked,
        #[doc = "Transition into TESTING has been requested"]
        TestStarting,
        #[doc = "Visible only to partner, may need special UI treatment"]
        Testing,
    }
    impl LiveBroadcastStatusLifeCycleStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusLifeCycleStatus::Complete => "complete",
                LiveBroadcastStatusLifeCycleStatus::Created => "created",
                LiveBroadcastStatusLifeCycleStatus::LifeCycleStatusUnspecified => {
                    "lifeCycleStatusUnspecified"
                }
                LiveBroadcastStatusLifeCycleStatus::Live => "live",
                LiveBroadcastStatusLifeCycleStatus::LiveStarting => "liveStarting",
                LiveBroadcastStatusLifeCycleStatus::Ready => "ready",
                LiveBroadcastStatusLifeCycleStatus::Revoked => "revoked",
                LiveBroadcastStatusLifeCycleStatus::TestStarting => "testStarting",
                LiveBroadcastStatusLifeCycleStatus::Testing => "testing",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusLifeCycleStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusLifeCycleStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastStatusLifeCycleStatus, ()> {
            Ok(match s {
                "complete" => LiveBroadcastStatusLifeCycleStatus::Complete,
                "created" => LiveBroadcastStatusLifeCycleStatus::Created,
                "lifeCycleStatusUnspecified" => {
                    LiveBroadcastStatusLifeCycleStatus::LifeCycleStatusUnspecified
                }
                "live" => LiveBroadcastStatusLifeCycleStatus::Live,
                "liveStarting" => LiveBroadcastStatusLifeCycleStatus::LiveStarting,
                "ready" => LiveBroadcastStatusLifeCycleStatus::Ready,
                "revoked" => LiveBroadcastStatusLifeCycleStatus::Revoked,
                "testStarting" => LiveBroadcastStatusLifeCycleStatus::TestStarting,
                "testing" => LiveBroadcastStatusLifeCycleStatus::Testing,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusLifeCycleStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusLifeCycleStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusLifeCycleStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "complete" => LiveBroadcastStatusLifeCycleStatus::Complete,
                "created" => LiveBroadcastStatusLifeCycleStatus::Created,
                "lifeCycleStatusUnspecified" => {
                    LiveBroadcastStatusLifeCycleStatus::LifeCycleStatusUnspecified
                }
                "live" => LiveBroadcastStatusLifeCycleStatus::Live,
                "liveStarting" => LiveBroadcastStatusLifeCycleStatus::LiveStarting,
                "ready" => LiveBroadcastStatusLifeCycleStatus::Ready,
                "revoked" => LiveBroadcastStatusLifeCycleStatus::Revoked,
                "testStarting" => LiveBroadcastStatusLifeCycleStatus::TestStarting,
                "testing" => LiveBroadcastStatusLifeCycleStatus::Testing,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusLifeCycleStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusLifeCycleStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusLiveBroadcastPriority {
        #[doc = "High priority broadcast: for high profile HoAs, like PixelCorp ones."]
        High,
        LiveBroadcastPriorityUnspecified,
        #[doc = "Low priority broadcast: for low view count HoAs or other\nlow priority broadcasts."]
        Low,
        #[doc = "Normal priority broadcast: for regular HoAs and broadcasts."]
        Normal,
    }
    impl LiveBroadcastStatusLiveBroadcastPriority {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusLiveBroadcastPriority::High => "high",
                LiveBroadcastStatusLiveBroadcastPriority::LiveBroadcastPriorityUnspecified => {
                    "liveBroadcastPriorityUnspecified"
                }
                LiveBroadcastStatusLiveBroadcastPriority::Low => "low",
                LiveBroadcastStatusLiveBroadcastPriority::Normal => "normal",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusLiveBroadcastPriority {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusLiveBroadcastPriority {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<LiveBroadcastStatusLiveBroadcastPriority, ()> {
            Ok(match s {
                "high" => LiveBroadcastStatusLiveBroadcastPriority::High,
                "liveBroadcastPriorityUnspecified" => {
                    LiveBroadcastStatusLiveBroadcastPriority::LiveBroadcastPriorityUnspecified
                }
                "low" => LiveBroadcastStatusLiveBroadcastPriority::Low,
                "normal" => LiveBroadcastStatusLiveBroadcastPriority::Normal,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusLiveBroadcastPriority {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusLiveBroadcastPriority {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusLiveBroadcastPriority {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "high" => LiveBroadcastStatusLiveBroadcastPriority::High,
                "liveBroadcastPriorityUnspecified" => {
                    LiveBroadcastStatusLiveBroadcastPriority::LiveBroadcastPriorityUnspecified
                }
                "low" => LiveBroadcastStatusLiveBroadcastPriority::Low,
                "normal" => LiveBroadcastStatusLiveBroadcastPriority::Normal,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusLiveBroadcastPriority {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusLiveBroadcastPriority {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl LiveBroadcastStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusPrivacyStatus::Private => "private",
                LiveBroadcastStatusPrivacyStatus::Public => "public",
                LiveBroadcastStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => LiveBroadcastStatusPrivacyStatus::Private,
                "public" => LiveBroadcastStatusPrivacyStatus::Public,
                "unlisted" => LiveBroadcastStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => LiveBroadcastStatusPrivacyStatus::Private,
                "public" => LiveBroadcastStatusPrivacyStatus::Public,
                "unlisted" => LiveBroadcastStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveBroadcastStatusRecordingStatus {
        #[doc = "No value or the value is unknown."]
        LiveBroadcastRecordingStatusUnspecified,
        #[doc = "The recording has not yet been started."]
        NotRecording,
        #[doc = "The recording is completed, and cannot be started again."]
        Recorded,
        #[doc = "The recording is currently on."]
        Recording,
    }
    impl LiveBroadcastStatusRecordingStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveBroadcastStatusRecordingStatus::LiveBroadcastRecordingStatusUnspecified => {
                    "liveBroadcastRecordingStatusUnspecified"
                }
                LiveBroadcastStatusRecordingStatus::NotRecording => "notRecording",
                LiveBroadcastStatusRecordingStatus::Recorded => "recorded",
                LiveBroadcastStatusRecordingStatus::Recording => "recording",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveBroadcastStatusRecordingStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveBroadcastStatusRecordingStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveBroadcastStatusRecordingStatus, ()> {
            Ok(match s {
                "liveBroadcastRecordingStatusUnspecified" => {
                    LiveBroadcastStatusRecordingStatus::LiveBroadcastRecordingStatusUnspecified
                }
                "notRecording" => LiveBroadcastStatusRecordingStatus::NotRecording,
                "recorded" => LiveBroadcastStatusRecordingStatus::Recorded,
                "recording" => LiveBroadcastStatusRecordingStatus::Recording,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveBroadcastStatusRecordingStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveBroadcastStatusRecordingStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveBroadcastStatusRecordingStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "liveBroadcastRecordingStatusUnspecified" => {
                    LiveBroadcastStatusRecordingStatus::LiveBroadcastRecordingStatusUnspecified
                }
                "notRecording" => LiveBroadcastStatusRecordingStatus::NotRecording,
                "recorded" => LiveBroadcastStatusRecordingStatus::Recorded,
                "recording" => LiveBroadcastStatusRecordingStatus::Recording,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveBroadcastStatusRecordingStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveBroadcastStatusRecordingStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatBan {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the ban."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n`\"youtube#liveChatBan\"`."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The `snippet` object contains basic details about the ban."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveChatBanSnippet>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatBan {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatBan {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatBanSnippet {
        #[doc = "The duration of a ban, only filled if the ban has type TEMPORARY."]
        #[serde(
            rename = "banDurationSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub ban_duration_seconds: ::std::option::Option<u64>,
        #[serde(
            rename = "bannedUserDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banned_user_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
        #[doc = "The chat this ban is pertinent to."]
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[doc = "The type of ban."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LiveChatBanSnippetType>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatBanSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatBanSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveChatBanSnippetType {
        #[doc = "An invalid ban type."]
        LiveChatBanTypeUnspecified,
        #[doc = "A permanent ban."]
        Permanent,
        #[doc = "A temporary ban."]
        Temporary,
    }
    impl LiveChatBanSnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveChatBanSnippetType::LiveChatBanTypeUnspecified => "liveChatBanTypeUnspecified",
                LiveChatBanSnippetType::Permanent => "permanent",
                LiveChatBanSnippetType::Temporary => "temporary",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveChatBanSnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveChatBanSnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveChatBanSnippetType, ()> {
            Ok(match s {
                "liveChatBanTypeUnspecified" => LiveChatBanSnippetType::LiveChatBanTypeUnspecified,
                "permanent" => LiveChatBanSnippetType::Permanent,
                "temporary" => LiveChatBanSnippetType::Temporary,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveChatBanSnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveChatBanSnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveChatBanSnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "liveChatBanTypeUnspecified" => LiveChatBanSnippetType::LiveChatBanTypeUnspecified,
                "permanent" => LiveChatBanSnippetType::Permanent,
                "temporary" => LiveChatBanSnippetType::Temporary,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveChatBanSnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatBanSnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatFanFundingEventDetails {
        #[doc = "A rendered string that displays the fund amount and currency to the user."]
        #[serde(
            rename = "amountDisplayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub amount_display_string: ::std::option::Option<String>,
        #[doc = "The amount of the fund."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "The currency in which the fund was made."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "The comment added by the user to this fan funding event."]
        #[serde(
            rename = "userComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_comment: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatFanFundingEventDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatFanFundingEventDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessage {
        #[doc = "The <code>authorDetails</code> object contains basic details about the\nuser that posted this message."]
        #[serde(
            rename = "authorDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_details: ::std::option::Option<crate::schemas::LiveChatMessageAuthorDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the message."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveChatMessage\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the message."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveChatMessageSnippet>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessage {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessage {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageAuthorDetails {
        #[doc = "The YouTube channel ID."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The channel's URL."]
        #[serde(
            rename = "channelUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_url: ::std::option::Option<String>,
        #[doc = "The channel's display name."]
        #[serde(
            rename = "displayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_name: ::std::option::Option<String>,
        #[doc = "Whether the author is a moderator of the live chat."]
        #[serde(
            rename = "isChatModerator",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_chat_moderator: ::std::option::Option<bool>,
        #[doc = "Whether the author is the owner of the live chat."]
        #[serde(
            rename = "isChatOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_chat_owner: ::std::option::Option<bool>,
        #[doc = "Whether the author is a sponsor of the live chat."]
        #[serde(
            rename = "isChatSponsor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_chat_sponsor: ::std::option::Option<bool>,
        #[doc = "Whether the author's identity has been verified by YouTube."]
        #[serde(
            rename = "isVerified",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_verified: ::std::option::Option<bool>,
        #[doc = "The channels's avatar URL."]
        #[serde(
            rename = "profileImageUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub profile_image_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageAuthorDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageAuthorDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageDeletedDetails {
        #[serde(
            rename = "deletedMessageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub deleted_message_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageDeletedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageDeletedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveChatMessage>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveChatMessageListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "The date and time when the underlying stream went offline. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "offlineAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub offline_at: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The amount of time the client should wait before polling again."]
        #[serde(
            rename = "pollingIntervalMillis",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub polling_interval_millis: ::std::option::Option<u32>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageRetractedDetails {
        #[serde(
            rename = "retractedMessageId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub retracted_message_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageRetractedDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageRetractedDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatMessageSnippet {
        #[doc = "The ID of the user that authored this message, this field is not always\nfilled.\ntextMessageEvent - the user that wrote the message\nfanFundingEvent - the user that funded the broadcast\nnewSponsorEvent - the user that just became a sponsor\nmessageDeletedEvent - the moderator that took the action\nmessageRetractedEvent - the author that retracted their message\nuserBannedEvent - the moderator that took the action\nsuperChatEvent - the user that made the purchase"]
        #[serde(
            rename = "authorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub author_channel_id: ::std::option::Option<String>,
        #[doc = "Contains a string that can be displayed to the user.\nIf this field is not present the message is silent, at the moment only\nmessages of type TOMBSTONE and CHAT_ENDED_EVENT are silent."]
        #[serde(
            rename = "displayMessage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_message: ::std::option::Option<String>,
        #[doc = "Details about the funding event, this is only set if the type is\n'fanFundingEvent'."]
        #[serde(
            rename = "fanFundingEventDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub fan_funding_event_details:
            ::std::option::Option<crate::schemas::LiveChatFanFundingEventDetails>,
        #[doc = "Whether the message has display content that should be displayed to users."]
        #[serde(
            rename = "hasDisplayContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub has_display_content: ::std::option::Option<bool>,
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[serde(
            rename = "messageDeletedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_deleted_details:
            ::std::option::Option<crate::schemas::LiveChatMessageDeletedDetails>,
        #[serde(
            rename = "messageRetractedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_retracted_details:
            ::std::option::Option<crate::schemas::LiveChatMessageRetractedDetails>,
        #[doc = "The date and time when the message was orignally published. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The type of message, this will always be present, it determines the\ncontents of the message as well as which fields will be present."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LiveChatMessageSnippetType>,
        #[doc = "Details about the Super Chat event, this is only set if the type is\n'superChatEvent'."]
        #[serde(
            rename = "superChatDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_chat_details: ::std::option::Option<crate::schemas::LiveChatSuperChatDetails>,
        #[doc = "Details about the Super Sticker event, this is only set if the type is\n'superStickerEvent'."]
        #[serde(
            rename = "superStickerDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_sticker_details:
            ::std::option::Option<crate::schemas::LiveChatSuperStickerDetails>,
        #[doc = "Details about the text message, this is only set if the type is\n'textMessageEvent'."]
        #[serde(
            rename = "textMessageDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_message_details: ::std::option::Option<crate::schemas::LiveChatTextMessageDetails>,
        #[serde(
            rename = "userBannedDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_banned_details:
            ::std::option::Option<crate::schemas::LiveChatUserBannedMessageDetails>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveChatMessageSnippetType {
        ChatEndedEvent,
        FanFundingEvent,
        InvalidType,
        MessageDeletedEvent,
        MessageRetractedEvent,
        NewSponsorEvent,
        SponsorOnlyModeEndedEvent,
        SponsorOnlyModeStartedEvent,
        SuperChatEvent,
        SuperStickerEvent,
        TextMessageEvent,
        Tombstone,
        UserBannedEvent,
    }
    impl LiveChatMessageSnippetType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveChatMessageSnippetType::ChatEndedEvent => "chatEndedEvent",
                LiveChatMessageSnippetType::FanFundingEvent => "fanFundingEvent",
                LiveChatMessageSnippetType::InvalidType => "invalidType",
                LiveChatMessageSnippetType::MessageDeletedEvent => "messageDeletedEvent",
                LiveChatMessageSnippetType::MessageRetractedEvent => "messageRetractedEvent",
                LiveChatMessageSnippetType::NewSponsorEvent => "newSponsorEvent",
                LiveChatMessageSnippetType::SponsorOnlyModeEndedEvent => {
                    "sponsorOnlyModeEndedEvent"
                }
                LiveChatMessageSnippetType::SponsorOnlyModeStartedEvent => {
                    "sponsorOnlyModeStartedEvent"
                }
                LiveChatMessageSnippetType::SuperChatEvent => "superChatEvent",
                LiveChatMessageSnippetType::SuperStickerEvent => "superStickerEvent",
                LiveChatMessageSnippetType::TextMessageEvent => "textMessageEvent",
                LiveChatMessageSnippetType::Tombstone => "tombstone",
                LiveChatMessageSnippetType::UserBannedEvent => "userBannedEvent",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveChatMessageSnippetType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveChatMessageSnippetType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveChatMessageSnippetType, ()> {
            Ok(match s {
                "chatEndedEvent" => LiveChatMessageSnippetType::ChatEndedEvent,
                "fanFundingEvent" => LiveChatMessageSnippetType::FanFundingEvent,
                "invalidType" => LiveChatMessageSnippetType::InvalidType,
                "messageDeletedEvent" => LiveChatMessageSnippetType::MessageDeletedEvent,
                "messageRetractedEvent" => LiveChatMessageSnippetType::MessageRetractedEvent,
                "newSponsorEvent" => LiveChatMessageSnippetType::NewSponsorEvent,
                "sponsorOnlyModeEndedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeEndedEvent
                }
                "sponsorOnlyModeStartedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeStartedEvent
                }
                "superChatEvent" => LiveChatMessageSnippetType::SuperChatEvent,
                "superStickerEvent" => LiveChatMessageSnippetType::SuperStickerEvent,
                "textMessageEvent" => LiveChatMessageSnippetType::TextMessageEvent,
                "tombstone" => LiveChatMessageSnippetType::Tombstone,
                "userBannedEvent" => LiveChatMessageSnippetType::UserBannedEvent,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveChatMessageSnippetType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveChatMessageSnippetType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveChatMessageSnippetType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "chatEndedEvent" => LiveChatMessageSnippetType::ChatEndedEvent,
                "fanFundingEvent" => LiveChatMessageSnippetType::FanFundingEvent,
                "invalidType" => LiveChatMessageSnippetType::InvalidType,
                "messageDeletedEvent" => LiveChatMessageSnippetType::MessageDeletedEvent,
                "messageRetractedEvent" => LiveChatMessageSnippetType::MessageRetractedEvent,
                "newSponsorEvent" => LiveChatMessageSnippetType::NewSponsorEvent,
                "sponsorOnlyModeEndedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeEndedEvent
                }
                "sponsorOnlyModeStartedEvent" => {
                    LiveChatMessageSnippetType::SponsorOnlyModeStartedEvent
                }
                "superChatEvent" => LiveChatMessageSnippetType::SuperChatEvent,
                "superStickerEvent" => LiveChatMessageSnippetType::SuperStickerEvent,
                "textMessageEvent" => LiveChatMessageSnippetType::TextMessageEvent,
                "tombstone" => LiveChatMessageSnippetType::Tombstone,
                "userBannedEvent" => LiveChatMessageSnippetType::UserBannedEvent,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveChatMessageSnippetType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatMessageSnippetType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatModerator {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the moderator."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveChatModerator\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the\nmoderator."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveChatModeratorSnippet>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatModerator {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatModerator {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatModeratorListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of moderators that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveChatModerator>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveChatModeratorListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatModeratorListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatModeratorListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatModeratorSnippet {
        #[doc = "The ID of the live chat this moderator can act on."]
        #[serde(
            rename = "liveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_chat_id: ::std::option::Option<String>,
        #[doc = "Details about the moderator."]
        #[serde(
            rename = "moderatorDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub moderator_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatModeratorSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatModeratorSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatSuperChatDetails {
        #[doc = "A rendered string that displays the fund amount and currency to the user."]
        #[serde(
            rename = "amountDisplayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub amount_display_string: ::std::option::Option<String>,
        #[doc = "The amount purchased by the user, in micros (1,750,000 micros = 1.75)."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "The currency in which the purchase was made."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "The tier in which the amount belongs. Lower amounts belong to lower\ntiers. The lowest tier is <code>1</code>."]
        #[serde(
            rename = "tier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tier: ::std::option::Option<u32>,
        #[doc = "The comment added by the user to this Super Chat event."]
        #[serde(
            rename = "userComment",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub user_comment: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatSuperChatDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatSuperChatDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatSuperStickerDetails {
        #[doc = "A rendered string that displays the fund amount and currency to the user."]
        #[serde(
            rename = "amountDisplayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub amount_display_string: ::std::option::Option<String>,
        #[doc = "The amount purchased by the user, in micros (1,750,000 micros = 1.75)."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "The currency in which the purchase was made."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "Information about the Super Sticker."]
        #[serde(
            rename = "superStickerMetadata",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_sticker_metadata: ::std::option::Option<crate::schemas::SuperStickerMetadata>,
        #[doc = "The tier in which the amount belongs. Lower amounts belong to lower\ntiers. The lowest tier is <code>1</code>."]
        #[serde(
            rename = "tier",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tier: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatSuperStickerDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatSuperStickerDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatTextMessageDetails {
        #[doc = "The user's message."]
        #[serde(
            rename = "messageText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_text: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatTextMessageDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatTextMessageDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveChatUserBannedMessageDetails {
        #[doc = "The duration of the ban. This property is only present if the\n<code>banType</code> is <code>temporary</code>."]
        #[serde(
            rename = "banDurationSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub ban_duration_seconds: ::std::option::Option<u64>,
        #[doc = "The type of ban."]
        #[serde(
            rename = "banType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub ban_type:
            ::std::option::Option<crate::schemas::LiveChatUserBannedMessageDetailsBanType>,
        #[doc = "The details of the user that was banned."]
        #[serde(
            rename = "bannedUserDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub banned_user_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
    }
    impl ::google_field_selector::FieldSelector for LiveChatUserBannedMessageDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatUserBannedMessageDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveChatUserBannedMessageDetailsBanType {
        Permanent,
        Temporary,
    }
    impl LiveChatUserBannedMessageDetailsBanType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveChatUserBannedMessageDetailsBanType::Permanent => "permanent",
                LiveChatUserBannedMessageDetailsBanType::Temporary => "temporary",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveChatUserBannedMessageDetailsBanType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveChatUserBannedMessageDetailsBanType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveChatUserBannedMessageDetailsBanType, ()> {
            Ok(match s {
                "permanent" => LiveChatUserBannedMessageDetailsBanType::Permanent,
                "temporary" => LiveChatUserBannedMessageDetailsBanType::Temporary,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveChatUserBannedMessageDetailsBanType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveChatUserBannedMessageDetailsBanType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveChatUserBannedMessageDetailsBanType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "permanent" => LiveChatUserBannedMessageDetailsBanType::Permanent,
                "temporary" => LiveChatUserBannedMessageDetailsBanType::Temporary,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveChatUserBannedMessageDetailsBanType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveChatUserBannedMessageDetailsBanType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStream {
        #[doc = "The <code>cdn</code> object defines the live stream's content delivery\nnetwork (CDN) settings. These settings provide details about the manner\nin which you stream your content to YouTube."]
        #[serde(
            rename = "cdn",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cdn: ::std::option::Option<crate::schemas::CdnSettings>,
        #[doc = "The <code>content_details</code> object contains information about the\nstream, including the closed captions ingestion URL."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::LiveStreamContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the stream."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveStream\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the\nstream, including its channel, title, and description."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::LiveStreamSnippet>,
        #[doc = "The <code>status</code> object contains information about\nlive stream's status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::LiveStreamStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveStream {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStream {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamConfigurationIssue {
        #[doc = "The long-form description of the issue and how to resolve it."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The kind of error happening."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::LiveStreamConfigurationIssueType>,
        #[doc = "The short-form reason for this issue."]
        #[serde(
            rename = "reason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reason: ::std::option::Option<String>,
        #[doc = "How severe this issue is to the stream."]
        #[serde(
            rename = "severity",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub severity: ::std::option::Option<crate::schemas::LiveStreamConfigurationIssueSeverity>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamConfigurationIssue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamConfigurationIssue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamConfigurationIssueType {
        AudioBitrateHigh,
        AudioBitrateLow,
        AudioBitrateMismatch,
        AudioCodec,
        AudioCodecMismatch,
        AudioSampleRate,
        AudioSampleRateMismatch,
        AudioStereoMismatch,
        AudioTooManyChannels,
        BadContainer,
        BitrateHigh,
        BitrateLow,
        FrameRateHigh,
        FramerateMismatch,
        GopMismatch,
        GopSizeLong,
        GopSizeOver,
        GopSizeShort,
        InterlacedVideo,
        MultipleAudioStreams,
        MultipleVideoStreams,
        NoAudioStream,
        NoVideoStream,
        OpenGop,
        ResolutionMismatch,
        VideoBitrateMismatch,
        VideoCodec,
        VideoCodecMismatch,
        VideoIngestionFasterThanRealtime,
        VideoIngestionStarved,
        VideoInterlaceMismatch,
        VideoProfileMismatch,
        VideoResolutionSuboptimal,
        VideoResolutionUnsupported,
    }
    impl LiveStreamConfigurationIssueType {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamConfigurationIssueType::AudioBitrateHigh => "audioBitrateHigh",
                LiveStreamConfigurationIssueType::AudioBitrateLow => "audioBitrateLow",
                LiveStreamConfigurationIssueType::AudioBitrateMismatch => "audioBitrateMismatch",
                LiveStreamConfigurationIssueType::AudioCodec => "audioCodec",
                LiveStreamConfigurationIssueType::AudioCodecMismatch => "audioCodecMismatch",
                LiveStreamConfigurationIssueType::AudioSampleRate => "audioSampleRate",
                LiveStreamConfigurationIssueType::AudioSampleRateMismatch => {
                    "audioSampleRateMismatch"
                }
                LiveStreamConfigurationIssueType::AudioStereoMismatch => "audioStereoMismatch",
                LiveStreamConfigurationIssueType::AudioTooManyChannels => "audioTooManyChannels",
                LiveStreamConfigurationIssueType::BadContainer => "badContainer",
                LiveStreamConfigurationIssueType::BitrateHigh => "bitrateHigh",
                LiveStreamConfigurationIssueType::BitrateLow => "bitrateLow",
                LiveStreamConfigurationIssueType::FrameRateHigh => "frameRateHigh",
                LiveStreamConfigurationIssueType::FramerateMismatch => "framerateMismatch",
                LiveStreamConfigurationIssueType::GopMismatch => "gopMismatch",
                LiveStreamConfigurationIssueType::GopSizeLong => "gopSizeLong",
                LiveStreamConfigurationIssueType::GopSizeOver => "gopSizeOver",
                LiveStreamConfigurationIssueType::GopSizeShort => "gopSizeShort",
                LiveStreamConfigurationIssueType::InterlacedVideo => "interlacedVideo",
                LiveStreamConfigurationIssueType::MultipleAudioStreams => "multipleAudioStreams",
                LiveStreamConfigurationIssueType::MultipleVideoStreams => "multipleVideoStreams",
                LiveStreamConfigurationIssueType::NoAudioStream => "noAudioStream",
                LiveStreamConfigurationIssueType::NoVideoStream => "noVideoStream",
                LiveStreamConfigurationIssueType::OpenGop => "openGop",
                LiveStreamConfigurationIssueType::ResolutionMismatch => "resolutionMismatch",
                LiveStreamConfigurationIssueType::VideoBitrateMismatch => "videoBitrateMismatch",
                LiveStreamConfigurationIssueType::VideoCodec => "videoCodec",
                LiveStreamConfigurationIssueType::VideoCodecMismatch => "videoCodecMismatch",
                LiveStreamConfigurationIssueType::VideoIngestionFasterThanRealtime => {
                    "videoIngestionFasterThanRealtime"
                }
                LiveStreamConfigurationIssueType::VideoIngestionStarved => "videoIngestionStarved",
                LiveStreamConfigurationIssueType::VideoInterlaceMismatch => {
                    "videoInterlaceMismatch"
                }
                LiveStreamConfigurationIssueType::VideoProfileMismatch => "videoProfileMismatch",
                LiveStreamConfigurationIssueType::VideoResolutionSuboptimal => {
                    "videoResolutionSuboptimal"
                }
                LiveStreamConfigurationIssueType::VideoResolutionUnsupported => {
                    "videoResolutionUnsupported"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamConfigurationIssueType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamConfigurationIssueType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamConfigurationIssueType, ()> {
            Ok(match s {
                "audioBitrateHigh" => LiveStreamConfigurationIssueType::AudioBitrateHigh,
                "audioBitrateLow" => LiveStreamConfigurationIssueType::AudioBitrateLow,
                "audioBitrateMismatch" => LiveStreamConfigurationIssueType::AudioBitrateMismatch,
                "audioCodec" => LiveStreamConfigurationIssueType::AudioCodec,
                "audioCodecMismatch" => LiveStreamConfigurationIssueType::AudioCodecMismatch,
                "audioSampleRate" => LiveStreamConfigurationIssueType::AudioSampleRate,
                "audioSampleRateMismatch" => {
                    LiveStreamConfigurationIssueType::AudioSampleRateMismatch
                }
                "audioStereoMismatch" => LiveStreamConfigurationIssueType::AudioStereoMismatch,
                "audioTooManyChannels" => LiveStreamConfigurationIssueType::AudioTooManyChannels,
                "badContainer" => LiveStreamConfigurationIssueType::BadContainer,
                "bitrateHigh" => LiveStreamConfigurationIssueType::BitrateHigh,
                "bitrateLow" => LiveStreamConfigurationIssueType::BitrateLow,
                "frameRateHigh" => LiveStreamConfigurationIssueType::FrameRateHigh,
                "framerateMismatch" => LiveStreamConfigurationIssueType::FramerateMismatch,
                "gopMismatch" => LiveStreamConfigurationIssueType::GopMismatch,
                "gopSizeLong" => LiveStreamConfigurationIssueType::GopSizeLong,
                "gopSizeOver" => LiveStreamConfigurationIssueType::GopSizeOver,
                "gopSizeShort" => LiveStreamConfigurationIssueType::GopSizeShort,
                "interlacedVideo" => LiveStreamConfigurationIssueType::InterlacedVideo,
                "multipleAudioStreams" => LiveStreamConfigurationIssueType::MultipleAudioStreams,
                "multipleVideoStreams" => LiveStreamConfigurationIssueType::MultipleVideoStreams,
                "noAudioStream" => LiveStreamConfigurationIssueType::NoAudioStream,
                "noVideoStream" => LiveStreamConfigurationIssueType::NoVideoStream,
                "openGop" => LiveStreamConfigurationIssueType::OpenGop,
                "resolutionMismatch" => LiveStreamConfigurationIssueType::ResolutionMismatch,
                "videoBitrateMismatch" => LiveStreamConfigurationIssueType::VideoBitrateMismatch,
                "videoCodec" => LiveStreamConfigurationIssueType::VideoCodec,
                "videoCodecMismatch" => LiveStreamConfigurationIssueType::VideoCodecMismatch,
                "videoIngestionFasterThanRealtime" => {
                    LiveStreamConfigurationIssueType::VideoIngestionFasterThanRealtime
                }
                "videoIngestionStarved" => LiveStreamConfigurationIssueType::VideoIngestionStarved,
                "videoInterlaceMismatch" => {
                    LiveStreamConfigurationIssueType::VideoInterlaceMismatch
                }
                "videoProfileMismatch" => LiveStreamConfigurationIssueType::VideoProfileMismatch,
                "videoResolutionSuboptimal" => {
                    LiveStreamConfigurationIssueType::VideoResolutionSuboptimal
                }
                "videoResolutionUnsupported" => {
                    LiveStreamConfigurationIssueType::VideoResolutionUnsupported
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamConfigurationIssueType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamConfigurationIssueType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamConfigurationIssueType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "audioBitrateHigh" => LiveStreamConfigurationIssueType::AudioBitrateHigh,
                "audioBitrateLow" => LiveStreamConfigurationIssueType::AudioBitrateLow,
                "audioBitrateMismatch" => LiveStreamConfigurationIssueType::AudioBitrateMismatch,
                "audioCodec" => LiveStreamConfigurationIssueType::AudioCodec,
                "audioCodecMismatch" => LiveStreamConfigurationIssueType::AudioCodecMismatch,
                "audioSampleRate" => LiveStreamConfigurationIssueType::AudioSampleRate,
                "audioSampleRateMismatch" => {
                    LiveStreamConfigurationIssueType::AudioSampleRateMismatch
                }
                "audioStereoMismatch" => LiveStreamConfigurationIssueType::AudioStereoMismatch,
                "audioTooManyChannels" => LiveStreamConfigurationIssueType::AudioTooManyChannels,
                "badContainer" => LiveStreamConfigurationIssueType::BadContainer,
                "bitrateHigh" => LiveStreamConfigurationIssueType::BitrateHigh,
                "bitrateLow" => LiveStreamConfigurationIssueType::BitrateLow,
                "frameRateHigh" => LiveStreamConfigurationIssueType::FrameRateHigh,
                "framerateMismatch" => LiveStreamConfigurationIssueType::FramerateMismatch,
                "gopMismatch" => LiveStreamConfigurationIssueType::GopMismatch,
                "gopSizeLong" => LiveStreamConfigurationIssueType::GopSizeLong,
                "gopSizeOver" => LiveStreamConfigurationIssueType::GopSizeOver,
                "gopSizeShort" => LiveStreamConfigurationIssueType::GopSizeShort,
                "interlacedVideo" => LiveStreamConfigurationIssueType::InterlacedVideo,
                "multipleAudioStreams" => LiveStreamConfigurationIssueType::MultipleAudioStreams,
                "multipleVideoStreams" => LiveStreamConfigurationIssueType::MultipleVideoStreams,
                "noAudioStream" => LiveStreamConfigurationIssueType::NoAudioStream,
                "noVideoStream" => LiveStreamConfigurationIssueType::NoVideoStream,
                "openGop" => LiveStreamConfigurationIssueType::OpenGop,
                "resolutionMismatch" => LiveStreamConfigurationIssueType::ResolutionMismatch,
                "videoBitrateMismatch" => LiveStreamConfigurationIssueType::VideoBitrateMismatch,
                "videoCodec" => LiveStreamConfigurationIssueType::VideoCodec,
                "videoCodecMismatch" => LiveStreamConfigurationIssueType::VideoCodecMismatch,
                "videoIngestionFasterThanRealtime" => {
                    LiveStreamConfigurationIssueType::VideoIngestionFasterThanRealtime
                }
                "videoIngestionStarved" => LiveStreamConfigurationIssueType::VideoIngestionStarved,
                "videoInterlaceMismatch" => {
                    LiveStreamConfigurationIssueType::VideoInterlaceMismatch
                }
                "videoProfileMismatch" => LiveStreamConfigurationIssueType::VideoProfileMismatch,
                "videoResolutionSuboptimal" => {
                    LiveStreamConfigurationIssueType::VideoResolutionSuboptimal
                }
                "videoResolutionUnsupported" => {
                    LiveStreamConfigurationIssueType::VideoResolutionUnsupported
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamConfigurationIssueType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamConfigurationIssueType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamConfigurationIssueSeverity {
        Error,
        Info,
        Warning,
    }
    impl LiveStreamConfigurationIssueSeverity {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamConfigurationIssueSeverity::Error => "error",
                LiveStreamConfigurationIssueSeverity::Info => "info",
                LiveStreamConfigurationIssueSeverity::Warning => "warning",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamConfigurationIssueSeverity {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamConfigurationIssueSeverity {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamConfigurationIssueSeverity, ()> {
            Ok(match s {
                "error" => LiveStreamConfigurationIssueSeverity::Error,
                "info" => LiveStreamConfigurationIssueSeverity::Info,
                "warning" => LiveStreamConfigurationIssueSeverity::Warning,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamConfigurationIssueSeverity {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamConfigurationIssueSeverity {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamConfigurationIssueSeverity {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "error" => LiveStreamConfigurationIssueSeverity::Error,
                "info" => LiveStreamConfigurationIssueSeverity::Info,
                "warning" => LiveStreamConfigurationIssueSeverity::Warning,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamConfigurationIssueSeverity {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamConfigurationIssueSeverity {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamContentDetails {
        #[doc = "The ingestion URL where the closed captions of this stream are sent."]
        #[serde(
            rename = "closedCaptionsIngestionUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub closed_captions_ingestion_url: ::std::option::Option<String>,
        #[doc = "Indicates whether the stream is reusable, which means that it\ncan be bound to multiple broadcasts. It is common for\nbroadcasters to reuse the same stream for many different\nbroadcasts if those broadcasts occur at different times.<br><br>\nIf you set this value to <code>false</code>, then the stream\nwill not be reusable, which means that it can only be bound to\none broadcast. Non-reusable streams differ from reusable streams in the\nfollowing ways:\n\n<ul>\n  <li>A non-reusable stream can only be bound to one broadcast.</li>\n  <li>A non-reusable stream might be deleted by an automated process\n    after the broadcast ends.</li>\n  <li>The <code><a href=\"/youtube/v3/live/docs/liveStreams/list\">\n    liveStreams.list</a></code> method does not list non-reusable streams\n    if you call the method and set the <code>mine</code> parameter to\n    <code>true</code>. The only way to use that method to retrieve the\n    resource for a non-reusable stream is to use the <code>id</code>\n    parameter to identify the stream.</li>\n</ul>"]
        #[serde(
            rename = "isReusable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_reusable: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamHealthStatus {
        #[doc = "The configurations issues on this stream"]
        #[serde(
            rename = "configurationIssues",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub configuration_issues:
            ::std::option::Option<Vec<crate::schemas::LiveStreamConfigurationIssue>>,
        #[doc = "The last time this status was updated (in seconds)"]
        #[serde(
            rename = "lastUpdateTimeSeconds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub last_update_time_seconds: ::std::option::Option<u64>,
        #[doc = "The status code of this stream"]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::LiveStreamHealthStatusStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamHealthStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamHealthStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamHealthStatusStatus {
        Bad,
        Good,
        NoData,
        Ok,
        Revoked,
    }
    impl LiveStreamHealthStatusStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamHealthStatusStatus::Bad => "bad",
                LiveStreamHealthStatusStatus::Good => "good",
                LiveStreamHealthStatusStatus::NoData => "noData",
                LiveStreamHealthStatusStatus::Ok => "ok",
                LiveStreamHealthStatusStatus::Revoked => "revoked",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamHealthStatusStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamHealthStatusStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamHealthStatusStatus, ()> {
            Ok(match s {
                "bad" => LiveStreamHealthStatusStatus::Bad,
                "good" => LiveStreamHealthStatusStatus::Good,
                "noData" => LiveStreamHealthStatusStatus::NoData,
                "ok" => LiveStreamHealthStatusStatus::Ok,
                "revoked" => LiveStreamHealthStatusStatus::Revoked,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamHealthStatusStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamHealthStatusStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamHealthStatusStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "bad" => LiveStreamHealthStatusStatus::Bad,
                "good" => LiveStreamHealthStatusStatus::Good,
                "noData" => LiveStreamHealthStatusStatus::NoData,
                "ok" => LiveStreamHealthStatusStatus::Ok,
                "revoked" => LiveStreamHealthStatusStatus::Revoked,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamHealthStatusStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamHealthStatusStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of live streams that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::LiveStream>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#liveStreamListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel that\nis transmitting the stream."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The stream's description. The value cannot be longer than 10000\ncharacters."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[serde(
            rename = "isDefaultStream",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_default_stream: ::std::option::Option<bool>,
        #[doc = "The date and time that the stream was created. The value is specified in\n<a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The stream's title. The value must be between 1 and 128 characters long."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LiveStreamStatus {
        #[doc = "The health status of the stream."]
        #[serde(
            rename = "healthStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub health_status: ::std::option::Option<crate::schemas::LiveStreamHealthStatus>,
        #[serde(
            rename = "streamStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub stream_status: ::std::option::Option<crate::schemas::LiveStreamStatusStreamStatus>,
    }
    impl ::google_field_selector::FieldSelector for LiveStreamStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum LiveStreamStatusStreamStatus {
        Active,
        Created,
        Error,
        Inactive,
        Ready,
    }
    impl LiveStreamStatusStreamStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                LiveStreamStatusStreamStatus::Active => "active",
                LiveStreamStatusStreamStatus::Created => "created",
                LiveStreamStatusStreamStatus::Error => "error",
                LiveStreamStatusStreamStatus::Inactive => "inactive",
                LiveStreamStatusStreamStatus::Ready => "ready",
            }
        }
    }
    impl ::std::convert::AsRef<str> for LiveStreamStatusStreamStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for LiveStreamStatusStreamStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<LiveStreamStatusStreamStatus, ()> {
            Ok(match s {
                "active" => LiveStreamStatusStreamStatus::Active,
                "created" => LiveStreamStatusStreamStatus::Created,
                "error" => LiveStreamStatusStreamStatus::Error,
                "inactive" => LiveStreamStatusStreamStatus::Inactive,
                "ready" => LiveStreamStatusStreamStatus::Ready,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for LiveStreamStatusStreamStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for LiveStreamStatusStreamStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for LiveStreamStatusStreamStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "active" => LiveStreamStatusStreamStatus::Active,
                "created" => LiveStreamStatusStreamStatus::Created,
                "error" => LiveStreamStatusStreamStatus::Error,
                "inactive" => LiveStreamStatusStreamStatus::Inactive,
                "ready" => LiveStreamStatusStreamStatus::Ready,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for LiveStreamStatusStreamStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LiveStreamStatusStreamStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LocalizedProperty {
        #[serde(
            rename = "default",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default: ::std::option::Option<String>,
        #[doc = "The language of the default property."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<crate::schemas::LanguageTag>,
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<Vec<crate::schemas::LocalizedString>>,
    }
    impl ::google_field_selector::FieldSelector for LocalizedProperty {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocalizedProperty {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct LocalizedString {
        #[serde(
            rename = "language",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language: ::std::option::Option<String>,
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for LocalizedString {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for LocalizedString {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Member {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#member\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the member."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::MemberSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Member {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Member {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MemberListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of members that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Member>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#memberListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MemberListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MemberListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MemberSnippet {
        #[doc = "The id of the channel that's offering memberships."]
        #[serde(
            rename = "creatorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creator_channel_id: ::std::option::Option<String>,
        #[doc = "Details about the member."]
        #[serde(
            rename = "memberDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
        #[doc = "Details about the user's membership."]
        #[serde(
            rename = "membershipsDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub memberships_details: ::std::option::Option<crate::schemas::MembershipsDetails>,
    }
    impl ::google_field_selector::FieldSelector for MemberSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MemberSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsDetails {
        #[doc = "Ids of all levels that the user has access to. This includes the currently\nactive level and all other levels that are included because of a higher\npurchase."]
        #[serde(
            rename = "accessibleLevels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub accessible_levels: ::std::option::Option<Vec<String>>,
        #[doc = "Id of the highest level that the user has access to at the moment."]
        #[serde(
            rename = "highestAccessibleLevel",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub highest_accessible_level: ::std::option::Option<String>,
        #[doc = "Display name for the highest level that the user has access to at the\nmoment."]
        #[serde(
            rename = "highestAccessibleLevelDisplayName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub highest_accessible_level_display_name: ::std::option::Option<String>,
        #[doc = "Data about memberships duration without taking into consideration pricing\nlevels."]
        #[serde(
            rename = "membershipsDuration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub memberships_duration: ::std::option::Option<crate::schemas::MembershipsDuration>,
        #[doc = "Data about memberships duration on particular pricing levels."]
        #[serde(
            rename = "membershipsDurationAtLevels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub memberships_duration_at_levels:
            ::std::option::Option<Vec<crate::schemas::MembershipsDurationAtLevel>>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsDuration {
        #[doc = "The date and time when the user became a continuous member across all\nlevels."]
        #[serde(
            rename = "memberSince",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_since: ::std::option::Option<String>,
        #[doc = "The cumulative time the user has been a member across all levels in\ncomplete months (the time is rounded down to the nearest integer)."]
        #[serde(
            rename = "memberTotalDurationMonths",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_total_duration_months: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsDuration {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsDuration {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsDurationAtLevel {
        #[doc = "Pricing level ID."]
        #[serde(
            rename = "level",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub level: ::std::option::Option<String>,
        #[doc = "The date and time when the user became a continuous member for the given\nlevel."]
        #[serde(
            rename = "memberSince",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_since: ::std::option::Option<String>,
        #[doc = "The cumulative time the user has been a member for the given level in\ncomplete months (the time is rounded down to the nearest integer)."]
        #[serde(
            rename = "memberTotalDurationMonths",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub member_total_duration_months: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsDurationAtLevel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsDurationAtLevel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsLevel {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the memberships level."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#membershipsLevelListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the level."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::MembershipsLevelSnippet>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsLevel {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsLevel {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsLevelListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of pricing levels offered by a creator to the fans."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::MembershipsLevel>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#membershipsLevelListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsLevelListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsLevelListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MembershipsLevelSnippet {
        #[doc = "The id of the channel that's offering channel memberships."]
        #[serde(
            rename = "creatorChannelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creator_channel_id: ::std::option::Option<String>,
        #[doc = "Details about the pricing level."]
        #[serde(
            rename = "levelDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub level_details: ::std::option::Option<crate::schemas::LevelDetails>,
    }
    impl ::google_field_selector::FieldSelector for MembershipsLevelSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MembershipsLevelSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct MonitorStreamInfo {
        #[doc = "If you have set the\n<code><a href=\"#enableMonitorStream\">enableMonitorStream</a></code>\nproperty to <code>true</code>, then this property determines the\nlength of the live broadcast delay."]
        #[serde(
            rename = "broadcastStreamDelayMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub broadcast_stream_delay_ms: ::std::option::Option<u32>,
        #[doc = "HTML code that embeds a player that plays the monitor stream."]
        #[serde(
            rename = "embedHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embed_html: ::std::option::Option<String>,
        #[doc = "This value determines whether the monitor stream is enabled for the\nbroadcast. If the monitor stream is enabled, then YouTube will\nbroadcast the event content on a special stream intended only for\nthe broadcaster's consumption. The broadcaster can use the stream\nto review the event content and also to identify the optimal times\nto insert cuepoints.<br><br>\nYou need to set this value to <code>true</code> if you intend to have\na broadcast delay for your event.<br><br>\n<strong>Note:</strong> This property cannot be updated once the\nbroadcast is in the <code>testing</code> or <code>live</code> state."]
        #[serde(
            rename = "enableMonitorStream",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub enable_monitor_stream: ::std::option::Option<bool>,
    }
    impl ::google_field_selector::FieldSelector for MonitorStreamInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for MonitorStreamInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PageInfo {
        #[doc = "The number of results included in the API response."]
        #[serde(
            rename = "resultsPerPage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub results_per_page: ::std::option::Option<i32>,
        #[doc = "The total number of results in the result set."]
        #[serde(
            rename = "totalResults",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_results: ::std::option::Option<i32>,
    }
    impl ::google_field_selector::FieldSelector for PageInfo {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PageInfo {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Playlist {
        #[doc = "The <code>contentDetails</code> object contains information like\nvideo count."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::PlaylistContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the playlist."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#playlist\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "Localizations for different languages"]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::PlaylistLocalization>,
        >,
        #[doc = "The <code>player</code> object contains information that you would use\nto play the playlist in an embedded player."]
        #[serde(
            rename = "player",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub player: ::std::option::Option<crate::schemas::PlaylistPlayer>,
        #[doc = "The <code>snippet</code> object contains basic details about the\nplaylist, such as its title and description."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::PlaylistSnippet>,
        #[doc = "The <code>status</code> object contains status information for the\nplaylist."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::PlaylistStatus>,
    }
    impl ::google_field_selector::FieldSelector for Playlist {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Playlist {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistContentDetails {
        #[doc = "The number of videos in the playlist."]
        #[serde(
            rename = "itemCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub item_count: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItem {
        #[doc = "The <code>contentDetails</code> object is included in the resource if\nthe included item is a YouTube video. The object contains additional\ninformation about the video."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::PlaylistItemContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the playlist item."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#playlistItem\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the\nplaylist item, such as its title and position in the playlist."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::PlaylistItemSnippet>,
        #[doc = "The <code>status</code> object contains information about the playlist\nitem's privacy status."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::PlaylistItemStatus>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemContentDetails {
        #[doc = "The time, measured in seconds from the start of the video, when the video\nshould stop playing. (The playlist owner can specify the times when the\nvideo should start and stop playing when the video is played in the context\nof the playlist.) By default, assume that the <code>video.endTime</code> is\nthe end of the video."]
        #[serde(
            rename = "endAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub end_at: ::std::option::Option<String>,
        #[doc = "A user-generated note for this item."]
        #[serde(
            rename = "note",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub note: ::std::option::Option<String>,
        #[doc = "The time, measured in seconds from the start of the video, when the video\nshould start playing. (The playlist owner can specify the times when the\nvideo should start and stop playing when the video is played in the context\nof the playlist.) The default value is <code>0</code>."]
        #[serde(
            rename = "startAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub start_at: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify a video. To <a\nhref=\"/youtube/v3/docs/video/list.html\">retrieve the <code>video</code>\nresource</a>, set the <code>id</code> query parameter to this value in your\nAPI request."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
        #[doc = "The date and time that the video was published to YouTube. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "videoPublishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_published_at: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemListResponse {
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of playlist items that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::PlaylistItem>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#playlistItemListResponse\"</code>.\nEtag of this resource."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the user that added\nthe item to the playlist."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel that the playlist item belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The item's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify thGe playlist that the\nplaylist item is in."]
        #[serde(
            rename = "playlistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_id: ::std::option::Option<String>,
        #[doc = "The order in which the item appears in the playlist. The value uses a\nzero-based index, so the first item has a position of <code>0</code>,\nthe second item has a position of <code>1</code>, and so forth."]
        #[serde(
            rename = "position",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub position: ::std::option::Option<u32>,
        #[doc = "The date and time that the item was added to the playlist. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The <code>id</code> object contains information that can be used to\nuniquely identify the resource that is included in the playlist as\nthe playlist item."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "A map of thumbnail images associated with the playlist item. For each\nobject in the map, the key is the name of the thumbnail image, and the\nvalue is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The item's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistItemStatus {
        #[doc = "This resource's privacy status."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::PlaylistItemStatusPrivacyStatus>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlaylistItemStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl PlaylistItemStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                PlaylistItemStatusPrivacyStatus::Private => "private",
                PlaylistItemStatusPrivacyStatus::Public => "public",
                PlaylistItemStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlaylistItemStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlaylistItemStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlaylistItemStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => PlaylistItemStatusPrivacyStatus::Private,
                "public" => PlaylistItemStatusPrivacyStatus::Public,
                "unlisted" => PlaylistItemStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlaylistItemStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlaylistItemStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlaylistItemStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => PlaylistItemStatusPrivacyStatus::Private,
                "public" => PlaylistItemStatusPrivacyStatus::Public,
                "unlisted" => PlaylistItemStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlaylistItemStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistItemStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of playlists that match the request criteria"]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Playlist>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#playlistListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistLocalization {
        #[doc = "The localized strings for playlist's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The localized strings for playlist's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistPlayer {
        #[doc = "An <code><iframe></code> tag that embeds a player that will\nplay the playlist."]
        #[serde(
            rename = "embedHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embed_html: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistPlayer {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistPlayer {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the channel that\npublished the playlist."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The channel title of the channel that the video belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The language of the playlist's default title and description."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "The playlist's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Localized title and description, read-only."]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::PlaylistLocalization>,
        #[doc = "The date and time that the playlist was created. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "Keyword tags associated with the playlist."]
        #[serde(
            rename = "tags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tags: ::std::option::Option<Vec<String>>,
        #[doc = "A map of thumbnail images associated with the playlist. For each object\nin the map, the key is the name of the thumbnail image, and the value\nis an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The playlist's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PlaylistStatus {
        #[doc = "The playlist's privacy status."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::PlaylistStatusPrivacyStatus>,
    }
    impl ::google_field_selector::FieldSelector for PlaylistStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PlaylistStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl PlaylistStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                PlaylistStatusPrivacyStatus::Private => "private",
                PlaylistStatusPrivacyStatus::Public => "public",
                PlaylistStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PlaylistStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PlaylistStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PlaylistStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => PlaylistStatusPrivacyStatus::Private,
                "public" => PlaylistStatusPrivacyStatus::Public,
                "unlisted" => PlaylistStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PlaylistStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PlaylistStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PlaylistStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => PlaylistStatusPrivacyStatus::Private,
                "public" => PlaylistStatusPrivacyStatus::Public,
                "unlisted" => PlaylistStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PlaylistStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PlaylistStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PromotedItem {
        #[doc = "A custom message to display for this promotion. This field is currently\nignored unless the promoted item is a website."]
        #[serde(
            rename = "customMessage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub custom_message: ::std::option::Option<String>,
        #[doc = "Identifies the promoted item."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<crate::schemas::PromotedItemId>,
        #[doc = "If true, the content owner's name will be used when displaying the\npromotion. This field can only be set when the update is made on behalf of\nthe content owner."]
        #[serde(
            rename = "promotedByContentOwner",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub promoted_by_content_owner: ::std::option::Option<bool>,
        #[doc = "The temporal position within the video where the promoted item will be\ndisplayed. If present, it overrides the default timing."]
        #[serde(
            rename = "timing",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub timing: ::std::option::Option<crate::schemas::InvideoTiming>,
    }
    impl ::google_field_selector::FieldSelector for PromotedItem {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PromotedItem {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PromotedItemId {
        #[doc = "Describes the type of the promoted item."]
        #[serde(
            rename = "type",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub r#type: ::std::option::Option<crate::schemas::PromotedItemIdType>,
        #[doc = "If type is recentUpload, this field identifies the channel from which to\ntake the recent upload. If missing, the channel is assumed to be the same\nchannel for which the invideoPromotion is set."]
        #[serde(
            rename = "recentlyUploadedBy",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recently_uploaded_by: ::std::option::Option<String>,
        #[doc = "If the promoted item represents a video, this field represents the unique\nYouTube ID identifying it. This field will be present only if\n<code>type</code> has the value <code>video</code>."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
        #[doc = "If the promoted item represents a website, this field represents the url\npointing to the website. This field will be present only if\n<code>type</code> has the value <code>website</code>."]
        #[serde(
            rename = "websiteUrl",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub website_url: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PromotedItemId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PromotedItemId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum PromotedItemIdType {
        RecentUpload,
        Video,
        Website,
    }
    impl PromotedItemIdType {
        pub fn as_str(self) -> &'static str {
            match self {
                PromotedItemIdType::RecentUpload => "recentUpload",
                PromotedItemIdType::Video => "video",
                PromotedItemIdType::Website => "website",
            }
        }
    }
    impl ::std::convert::AsRef<str> for PromotedItemIdType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for PromotedItemIdType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<PromotedItemIdType, ()> {
            Ok(match s {
                "recentUpload" => PromotedItemIdType::RecentUpload,
                "video" => PromotedItemIdType::Video,
                "website" => PromotedItemIdType::Website,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for PromotedItemIdType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for PromotedItemIdType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for PromotedItemIdType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "recentUpload" => PromotedItemIdType::RecentUpload,
                "video" => PromotedItemIdType::Video,
                "website" => PromotedItemIdType::Website,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for PromotedItemIdType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PromotedItemIdType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct PropertyValue {
        #[doc = "A property."]
        #[serde(
            rename = "property",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub property: ::std::option::Option<String>,
        #[doc = "The property's value."]
        #[serde(
            rename = "value",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub value: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for PropertyValue {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for PropertyValue {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ResourceId {
        #[doc = "The ID that YouTube uses to uniquely identify the referred resource, if\nthat resource is a channel. This property is only present if the\n<code>resourceId.kind</code> value is <code>youtube#channel</code>."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The type of the API resource."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the referred resource, if\nthat resource is a playlist. This property is only present if the\n<code>resourceId.kind</code> value is <code>youtube#playlist</code>."]
        #[serde(
            rename = "playlistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub playlist_id: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the referred resource, if\nthat resource is a video. This property is only present if the\n<code>resourceId.kind</code> value is <code>youtube#video</code>."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ResourceId {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ResourceId {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SearchListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "Pagination information for token pagination."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::SearchResult>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#searchListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "regionCode",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub region_code: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SearchListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SearchResult {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The <code>id</code> object contains information that can be used to\nuniquely identify the resource that matches the search request."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#searchResult\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about a search\nresult, such as its title or description. For example, if the search result\nis a video, then the title will be the\nvideo's title and the description will be the video's description."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SearchResultSnippet>,
    }
    impl ::google_field_selector::FieldSelector for SearchResult {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchResult {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SearchResultSnippet {
        #[doc = "The value that YouTube uses to uniquely identify the channel that\npublished the resource that the search result identifies."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The title of the channel that published the resource that the search result\nidentifies."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "A description of the search result."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "It indicates if the resource (video or channel) has upcoming/active live\nbroadcast content. Or it's \"none\" if there is not any upcoming/active\nlive broadcasts."]
        #[serde(
            rename = "liveBroadcastContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_broadcast_content:
            ::std::option::Option<crate::schemas::SearchResultSnippetLiveBroadcastContent>,
        #[doc = "The creation date and time of the resource that the search result\nidentifies. The value is specified in <a\nhref=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "A map of thumbnail images associated with the search result. For each\nobject in the map, the key is the name of the thumbnail image, and the\nvalue is an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The title of the search result."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SearchResultSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchResultSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SearchResultSnippetLiveBroadcastContent {
        Completed,
        Live,
        None,
        Upcoming,
    }
    impl SearchResultSnippetLiveBroadcastContent {
        pub fn as_str(self) -> &'static str {
            match self {
                SearchResultSnippetLiveBroadcastContent::Completed => "completed",
                SearchResultSnippetLiveBroadcastContent::Live => "live",
                SearchResultSnippetLiveBroadcastContent::None => "none",
                SearchResultSnippetLiveBroadcastContent::Upcoming => "upcoming",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SearchResultSnippetLiveBroadcastContent {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SearchResultSnippetLiveBroadcastContent {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SearchResultSnippetLiveBroadcastContent, ()> {
            Ok(match s {
                "completed" => SearchResultSnippetLiveBroadcastContent::Completed,
                "live" => SearchResultSnippetLiveBroadcastContent::Live,
                "none" => SearchResultSnippetLiveBroadcastContent::None,
                "upcoming" => SearchResultSnippetLiveBroadcastContent::Upcoming,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SearchResultSnippetLiveBroadcastContent {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SearchResultSnippetLiveBroadcastContent {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SearchResultSnippetLiveBroadcastContent {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "completed" => SearchResultSnippetLiveBroadcastContent::Completed,
                "live" => SearchResultSnippetLiveBroadcastContent::Live,
                "none" => SearchResultSnippetLiveBroadcastContent::None,
                "upcoming" => SearchResultSnippetLiveBroadcastContent::Upcoming,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SearchResultSnippetLiveBroadcastContent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SearchResultSnippetLiveBroadcastContent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Sponsor {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n`\"youtube#sponsor\"`."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The `snippet` object contains basic details about the sponsor."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SponsorSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Sponsor {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Sponsor {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SponsorListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of sponsors that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Sponsor>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n`\"youtube#sponsorListResponse\"."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the `pageToken` parameter to\nretrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The `visitorId` identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SponsorListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SponsorListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SponsorSnippet {
        #[doc = "The id of the channel being sponsored."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The cumulative time a user has been a sponsor in months."]
        #[serde(
            rename = "cumulativeDurationMonths",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub cumulative_duration_months: ::std::option::Option<i32>,
        #[doc = "Details about the sponsor."]
        #[serde(
            rename = "sponsorDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sponsor_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
        #[doc = "The date and time when the user became a sponsor. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\n(`YYYY-MM-DDThh:mm:ss.sZ`) format."]
        #[serde(
            rename = "sponsorSince",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sponsor_since: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SponsorSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SponsorSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Subscription {
        #[doc = "The <code>contentDetails</code> object contains basic statistics about the\nsubscription."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::SubscriptionContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the subscription."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#subscription\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the\nsubscription, including its title and the channel that the user subscribed\nto."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SubscriptionSnippet>,
        #[doc = "The <code>subscriberSnippet</code> object contains basic details about the\nsubscriber."]
        #[serde(
            rename = "subscriberSnippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub subscriber_snippet:
            ::std::option::Option<crate::schemas::SubscriptionSubscriberSnippet>,
    }
    impl ::google_field_selector::FieldSelector for Subscription {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Subscription {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionContentDetails {
        #[doc = "The type of activity this subscription is for\n(only uploads, everything)."]
        #[serde(
            rename = "activityType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub activity_type:
            ::std::option::Option<crate::schemas::SubscriptionContentDetailsActivityType>,
        #[doc = "The number of new items in the subscription since its content was last\nread."]
        #[serde(
            rename = "newItemCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub new_item_count: ::std::option::Option<u32>,
        #[doc = "The approximate number of items that the subscription points to."]
        #[serde(
            rename = "totalItemCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub total_item_count: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum SubscriptionContentDetailsActivityType {
        All,
        SubscriptionActivityTypeUnspecified,
        Uploads,
    }
    impl SubscriptionContentDetailsActivityType {
        pub fn as_str(self) -> &'static str {
            match self {
                SubscriptionContentDetailsActivityType::All => "all",
                SubscriptionContentDetailsActivityType::SubscriptionActivityTypeUnspecified => {
                    "subscriptionActivityTypeUnspecified"
                }
                SubscriptionContentDetailsActivityType::Uploads => "uploads",
            }
        }
    }
    impl ::std::convert::AsRef<str> for SubscriptionContentDetailsActivityType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for SubscriptionContentDetailsActivityType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<SubscriptionContentDetailsActivityType, ()> {
            Ok(match s {
                "all" => SubscriptionContentDetailsActivityType::All,
                "subscriptionActivityTypeUnspecified" => {
                    SubscriptionContentDetailsActivityType::SubscriptionActivityTypeUnspecified
                }
                "uploads" => SubscriptionContentDetailsActivityType::Uploads,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for SubscriptionContentDetailsActivityType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for SubscriptionContentDetailsActivityType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for SubscriptionContentDetailsActivityType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "all" => SubscriptionContentDetailsActivityType::All,
                "subscriptionActivityTypeUnspecified" => {
                    SubscriptionContentDetailsActivityType::SubscriptionActivityTypeUnspecified
                }
                "uploads" => SubscriptionContentDetailsActivityType::Uploads,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for SubscriptionContentDetailsActivityType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionContentDetailsActivityType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of subscriptions that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Subscription>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#subscriptionListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionSnippet {
        #[doc = "The ID that YouTube uses to uniquely identify the subscriber's channel."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel that the subscription belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The subscription's details."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "The date and time that the subscription was created. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "The <code>id</code> object contains information about the channel that\nthe user subscribed to."]
        #[serde(
            rename = "resourceId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub resource_id: ::std::option::Option<crate::schemas::ResourceId>,
        #[doc = "A map of thumbnail images associated with the video. For each object\nin the map, the key is the name of the thumbnail image, and the value\nis an object that contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The subscription's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SubscriptionSubscriberSnippet {
        #[doc = "The channel ID of the subscriber."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The description of the subscriber."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Thumbnails for this subscriber."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The title of the subscriber."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SubscriptionSubscriberSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SubscriptionSubscriberSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperChatEvent {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube assigns to uniquely identify the Super Chat event."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n`\"youtube#superChatEvent\"`."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The `snippet` object contains basic details about the Super Chat event."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::SuperChatEventSnippet>,
    }
    impl ::google_field_selector::FieldSelector for SuperChatEvent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperChatEvent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperChatEventListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of Super Chat purchases that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::SuperChatEvent>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#superChatEventListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SuperChatEventListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperChatEventListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperChatEventSnippet {
        #[doc = "The purchase amount, in micros of the purchase currency.  e.g., 1 is\nrepresented as 1000000."]
        #[serde(
            rename = "amountMicros",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub amount_micros: ::std::option::Option<u64>,
        #[doc = "Channel id where the event occurred."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The text contents of the comment left by the user."]
        #[serde(
            rename = "commentText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comment_text: ::std::option::Option<String>,
        #[doc = "The date and time when the event occurred. The value is\nspecified in <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "createdAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub created_at: ::std::option::Option<String>,
        #[doc = "The currency in which the purchase was made.  ISO 4217."]
        #[serde(
            rename = "currency",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub currency: ::std::option::Option<String>,
        #[doc = "A rendered string that displays the purchase amount and currency\n(e.g., \"$1.00\").  The string is rendered for the given language."]
        #[serde(
            rename = "displayString",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub display_string: ::std::option::Option<String>,
        #[doc = "True if this event is a Super Sticker event."]
        #[serde(
            rename = "isSuperStickerEvent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub is_super_sticker_event: ::std::option::Option<bool>,
        #[doc = "The tier for the paid message, which is based on the amount of money spent\nto purchase the message."]
        #[serde(
            rename = "messageType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub message_type: ::std::option::Option<u32>,
        #[doc = "If this event is a Super Sticker event, this field will contain metadata\nabout the Super Sticker."]
        #[serde(
            rename = "superStickerMetadata",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub super_sticker_metadata: ::std::option::Option<crate::schemas::SuperStickerMetadata>,
        #[doc = "Details about the supporter."]
        #[serde(
            rename = "supporterDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub supporter_details: ::std::option::Option<crate::schemas::ChannelProfileDetails>,
    }
    impl ::google_field_selector::FieldSelector for SuperChatEventSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperChatEventSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct SuperStickerMetadata {
        #[doc = "Internationalized alt text that describes the sticker image and any\nanimation associated with it."]
        #[serde(
            rename = "altText",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alt_text: ::std::option::Option<String>,
        #[doc = "Specifies the localization language in which the alt text is returned."]
        #[serde(
            rename = "altTextLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alt_text_language: ::std::option::Option<String>,
        #[doc = "Unique identifier of the Super Sticker. This is a shorter form of the\nalt_text that includes pack name and a recognizable characteristic of the\nsticker."]
        #[serde(
            rename = "stickerId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub sticker_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for SuperStickerMetadata {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for SuperStickerMetadata {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct Thumbnail {
        #[doc = "(Optional) Height of the thumbnail image."]
        #[serde(
            rename = "height",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height: ::std::option::Option<u32>,
        #[doc = "The thumbnail image's URL."]
        #[serde(
            rename = "url",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub url: ::std::option::Option<String>,
        #[doc = "(Optional) Width of the thumbnail image."]
        #[serde(
            rename = "width",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for Thumbnail {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Thumbnail {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThumbnailDetails {
        #[doc = "The default image for this resource."]
        #[serde(
            rename = "default",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The high quality image for this resource."]
        #[serde(
            rename = "high",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub high: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The maximum resolution quality image for this resource."]
        #[serde(
            rename = "maxres",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub maxres: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The medium quality image for this resource."]
        #[serde(
            rename = "medium",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub medium: ::std::option::Option<crate::schemas::Thumbnail>,
        #[doc = "The standard quality image for this resource."]
        #[serde(
            rename = "standard",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub standard: ::std::option::Option<crate::schemas::Thumbnail>,
    }
    impl ::google_field_selector::FieldSelector for ThumbnailDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThumbnailDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct ThumbnailSetResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of thumbnails."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::ThumbnailDetails>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#thumbnailSetResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for ThumbnailSetResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for ThumbnailSetResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Copy,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct TokenPagination {}
    impl ::google_field_selector::FieldSelector for TokenPagination {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for TokenPagination {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct Video {
        #[doc = "Age restriction details related to a video. This data can only be retrieved\nby the video owner."]
        #[serde(
            rename = "ageGating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub age_gating: ::std::option::Option<crate::schemas::VideoAgeGating>,
        #[doc = "The <code>contentDetails</code> object contains information about the video\ncontent, including the length of the video and its aspect ratio."]
        #[serde(
            rename = "contentDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_details: ::std::option::Option<crate::schemas::VideoContentDetails>,
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The <code>fileDetails</code> object encapsulates information about the\nvideo file that was uploaded to YouTube, including the file's resolution,\nduration, audio and video codecs, stream bitrates, and more. This data can\nonly be retrieved by the video owner."]
        #[serde(
            rename = "fileDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_details: ::std::option::Option<crate::schemas::VideoFileDetails>,
        #[doc = "The ID that YouTube uses to uniquely identify the video."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#video\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>liveStreamingDetails</code> object contains metadata about a live\nvideo broadcast. The object will only be present in a <code>video</code>\nresource if the video is an upcoming, live, or completed live broadcast."]
        #[serde(
            rename = "liveStreamingDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_streaming_details:
            ::std::option::Option<crate::schemas::VideoLiveStreamingDetails>,
        #[doc = "The <code>localizations</code> object contains localized versions of the\nbasic details about the video, such as its title and description."]
        #[serde(
            rename = "localizations",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localizations: ::std::option::Option<
            ::std::collections::BTreeMap<String, crate::schemas::VideoLocalization>,
        >,
        #[doc = "The <code>monetizationDetails</code> object encapsulates information\nabout the monetization status of the video."]
        #[serde(
            rename = "monetizationDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub monetization_details: ::std::option::Option<crate::schemas::VideoMonetizationDetails>,
        #[doc = "The <code>player</code> object contains information that you would use to\nplay the video in an embedded player."]
        #[serde(
            rename = "player",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub player: ::std::option::Option<crate::schemas::VideoPlayer>,
        #[doc = "The <code>processingDetails</code> object encapsulates information about\nYouTube's progress in processing the uploaded video file. The properties\nin the object identify the current processing status and an estimate of\nthe time remaining until YouTube finishes processing the video. This part\nalso indicates whether different types of data or content, such as file\ndetails or thumbnail images, are available for the video.<br><br>\nThe <code>processingProgress</code> object is designed to be polled so\nthat the video uploaded can track the progress that YouTube has made in\nprocessing the uploaded video file. This data can only be retrieved by\nthe video owner."]
        #[serde(
            rename = "processingDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_details: ::std::option::Option<crate::schemas::VideoProcessingDetails>,
        #[doc = "The <code>projectDetails</code> object contains information about the\nproject specific video metadata."]
        #[serde(
            rename = "projectDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub project_details: ::std::option::Option<crate::schemas::VideoProjectDetails>,
        #[doc = "The <code>recordingDetails</code> object encapsulates information about the\nlocation, date and address where the video was recorded."]
        #[serde(
            rename = "recordingDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recording_details: ::std::option::Option<crate::schemas::VideoRecordingDetails>,
        #[doc = "The <code>snippet</code> object contains basic details about the video,\nsuch as its title, description, and category."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::VideoSnippet>,
        #[doc = "The <code>statistics</code> object contains statistics about the video."]
        #[serde(
            rename = "statistics",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub statistics: ::std::option::Option<crate::schemas::VideoStatistics>,
        #[doc = "The <code>status</code> object contains information about the video's\nuploading, processing, and privacy statuses."]
        #[serde(
            rename = "status",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub status: ::std::option::Option<crate::schemas::VideoStatus>,
        #[doc = "The <code>suggestions</code> object encapsulates suggestions that identify\nopportunities to improve the video quality or the metadata for the uploaded\nvideo. This data can only be retrieved by the video owner."]
        #[serde(
            rename = "suggestions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub suggestions: ::std::option::Option<crate::schemas::VideoSuggestions>,
        #[doc = "The <code>topicDetails</code> object encapsulates information about <a\nhref=\"http://www.freebase.com\">Freebase</a> topics associated with the\nvideo."]
        #[serde(
            rename = "topicDetails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_details: ::std::option::Option<crate::schemas::VideoTopicDetails>,
    }
    impl ::google_field_selector::FieldSelector for Video {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Video {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReport {
        #[doc = "Additional comments regarding the abuse report."]
        #[serde(
            rename = "comments",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub comments: ::std::option::Option<String>,
        #[doc = "The language that the content was viewed in."]
        #[serde(
            rename = "language",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub language: ::std::option::Option<String>,
        #[doc = "The high-level, or primary, reason that the content is abusive. The value\nis an abuse report reason ID."]
        #[serde(
            rename = "reasonId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub reason_id: ::std::option::Option<String>,
        #[doc = "The specific, or secondary, reason that this content is abusive (if\navailable). The value is an abuse report reason ID that is a valid\nsecondary reason for the primary reason."]
        #[serde(
            rename = "secondaryReasonId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub secondary_reason_id: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReport {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReport {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportReason {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID of this abuse report reason."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n`\"youtube#videoAbuseReportReason\"`."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The `snippet` object contains basic details about the abuse report reason."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::VideoAbuseReportReasonSnippet>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportReasonListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of valid abuse reasons that are used with `video.ReportAbuse`."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::VideoAbuseReportReason>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n`\"youtube#videoAbuseReportReasonListResponse\"`."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The `visitorId` identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportReasonListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportReasonListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportReasonSnippet {
        #[doc = "The localized label belonging to this abuse report reason."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
        #[doc = "The secondary reasons associated with this reason, if any are available.\n(There might be 0 or more.)"]
        #[serde(
            rename = "secondaryReasons",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub secondary_reasons:
            ::std::option::Option<Vec<crate::schemas::VideoAbuseReportSecondaryReason>>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportReasonSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportReasonSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAbuseReportSecondaryReason {
        #[doc = "The ID of this abuse report secondary reason."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "The localized label for this abuse report secondary reason."]
        #[serde(
            rename = "label",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub label: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoAbuseReportSecondaryReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAbuseReportSecondaryReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoAgeGating {
        #[doc = "Indicates whether or not the video has alcoholic beverage content. Only\nusers of legal purchasing age in a particular country, as identified by\nICAP, can view the content."]
        #[serde(
            rename = "alcoholContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub alcohol_content: ::std::option::Option<bool>,
        #[doc = "Age-restricted trailers. For redband trailers and adult-rated video-games.\nOnly users aged 18+ can view the content. The the field is\n<code>true</code> the content is restricted to viewers aged 18+. Otherwise\nThe field won't be present."]
        #[serde(
            rename = "restricted",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub restricted: ::std::option::Option<bool>,
        #[doc = "Video game rating, if any."]
        #[serde(
            rename = "videoGameRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_game_rating: ::std::option::Option<crate::schemas::VideoAgeGatingVideoGameRating>,
    }
    impl ::google_field_selector::FieldSelector for VideoAgeGating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAgeGating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoAgeGatingVideoGameRating {
        Anyone,
        M15Plus,
        M16Plus,
        M17Plus,
    }
    impl VideoAgeGatingVideoGameRating {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoAgeGatingVideoGameRating::Anyone => "anyone",
                VideoAgeGatingVideoGameRating::M15Plus => "m15Plus",
                VideoAgeGatingVideoGameRating::M16Plus => "m16Plus",
                VideoAgeGatingVideoGameRating::M17Plus => "m17Plus",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoAgeGatingVideoGameRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoAgeGatingVideoGameRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoAgeGatingVideoGameRating, ()> {
            Ok(match s {
                "anyone" => VideoAgeGatingVideoGameRating::Anyone,
                "m15Plus" => VideoAgeGatingVideoGameRating::M15Plus,
                "m16Plus" => VideoAgeGatingVideoGameRating::M16Plus,
                "m17Plus" => VideoAgeGatingVideoGameRating::M17Plus,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoAgeGatingVideoGameRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoAgeGatingVideoGameRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoAgeGatingVideoGameRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "anyone" => VideoAgeGatingVideoGameRating::Anyone,
                "m15Plus" => VideoAgeGatingVideoGameRating::M15Plus,
                "m16Plus" => VideoAgeGatingVideoGameRating::M16Plus,
                "m17Plus" => VideoAgeGatingVideoGameRating::M17Plus,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoAgeGatingVideoGameRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoAgeGatingVideoGameRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoCategory {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the video category."]
        #[serde(
            rename = "id",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub id: ::std::option::Option<String>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#videoCategory\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>snippet</code> object contains basic details about the video\ncategory, including its title."]
        #[serde(
            rename = "snippet",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub snippet: ::std::option::Option<crate::schemas::VideoCategorySnippet>,
    }
    impl ::google_field_selector::FieldSelector for VideoCategory {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoCategory {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoCategoryListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of video categories that can be associated with YouTube videos. In\nthis map, the video category ID is the map key, and its value is the\ncorresponding <code>videoCategory</code> resource."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::VideoCategory>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#videoCategoryListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoCategoryListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoCategoryListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoCategorySnippet {
        #[serde(
            rename = "assignable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub assignable: ::std::option::Option<bool>,
        #[doc = "The YouTube channel that created the video category."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "The video category's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoCategorySnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoCategorySnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoContentDetails {
        #[doc = "The value of <code>captions</code> indicates whether the video\nhas captions or not."]
        #[serde(
            rename = "caption",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub caption: ::std::option::Option<crate::schemas::VideoContentDetailsCaption>,
        #[doc = "Specifies the ratings that the video received under various rating schemes."]
        #[serde(
            rename = "contentRating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub content_rating: ::std::option::Option<crate::schemas::ContentRating>,
        #[doc = "The <code>countryRestriction</code> object contains information about the\ncountries where a video is (or is not) viewable."]
        #[serde(
            rename = "countryRestriction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub country_restriction: ::std::option::Option<crate::schemas::AccessPolicy>,
        #[doc = "The value of <code>definition</code> indicates whether the video is\navailable in high definition or only in standard definition."]
        #[serde(
            rename = "definition",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub definition: ::std::option::Option<crate::schemas::VideoContentDetailsDefinition>,
        #[doc = "The value of <code>dimension</code> indicates whether the video is\navailable in 3D or in 2D."]
        #[serde(
            rename = "dimension",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub dimension: ::std::option::Option<String>,
        #[doc = "The length of the video. The tag value is an <a\nhref=\"//en.wikipedia.org/wiki/ISO_8601#Durations\">ISO 8601</a> duration in\nthe format <code>PT#M#S</code>, in which the letters <code>PT</code>\nindicate that the value specifies a period of time, and the letters\n<code>M</code> and <code>S</code> refer to length in minutes and seconds,\nrespectively. The <code>#</code> characters preceding the <code>M</code>\nand <code>S</code> letters are both integers that specify the number of\nminutes (or seconds) of the video. For example, a value of\n<code>PT15M51S</code> indicates that the video is 15 minutes and 51 seconds\nlong."]
        #[serde(
            rename = "duration",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub duration: ::std::option::Option<String>,
        #[doc = "Indicates whether the video uploader has provided a custom\nthumbnail image for the video.\nThis property is only visible to the video uploader."]
        #[serde(
            rename = "hasCustomThumbnail",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub has_custom_thumbnail: ::std::option::Option<bool>,
        #[doc = "The value of <code>is_license_content</code> indicates whether the video is\nlicensed content."]
        #[serde(
            rename = "licensedContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub licensed_content: ::std::option::Option<bool>,
        #[doc = "Specifies the projection format of the video."]
        #[serde(
            rename = "projection",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub projection: ::std::option::Option<crate::schemas::VideoContentDetailsProjection>,
        #[doc = "The <code>regionRestriction</code> object contains information about the\ncountries where a video is (or is not) viewable. The object will contain\neither the <code>contentDetails.regionRestriction.allowed</code> property\nor the <code>contentDetails.regionRestriction.blocked</code> property."]
        #[serde(
            rename = "regionRestriction",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub region_restriction:
            ::std::option::Option<crate::schemas::VideoContentDetailsRegionRestriction>,
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoContentDetailsCaption {
        False,
        True,
    }
    impl VideoContentDetailsCaption {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoContentDetailsCaption::False => "false",
                VideoContentDetailsCaption::True => "true",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoContentDetailsCaption {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoContentDetailsCaption {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoContentDetailsCaption, ()> {
            Ok(match s {
                "false" => VideoContentDetailsCaption::False,
                "true" => VideoContentDetailsCaption::True,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoContentDetailsCaption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoContentDetailsCaption {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoContentDetailsCaption {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "false" => VideoContentDetailsCaption::False,
                "true" => VideoContentDetailsCaption::True,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsCaption {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsCaption {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoContentDetailsDefinition {
        #[doc = "hd"]
        Hd,
        #[doc = "sd"]
        Sd,
    }
    impl VideoContentDetailsDefinition {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoContentDetailsDefinition::Hd => "hd",
                VideoContentDetailsDefinition::Sd => "sd",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoContentDetailsDefinition {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoContentDetailsDefinition {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoContentDetailsDefinition, ()> {
            Ok(match s {
                "hd" => VideoContentDetailsDefinition::Hd,
                "sd" => VideoContentDetailsDefinition::Sd,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoContentDetailsDefinition {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoContentDetailsDefinition {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoContentDetailsDefinition {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "hd" => VideoContentDetailsDefinition::Hd,
                "sd" => VideoContentDetailsDefinition::Sd,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsDefinition {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsDefinition {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoContentDetailsProjection {
        Rectangular,
        _360,
    }
    impl VideoContentDetailsProjection {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoContentDetailsProjection::Rectangular => "rectangular",
                VideoContentDetailsProjection::_360 => "360",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoContentDetailsProjection {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoContentDetailsProjection {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoContentDetailsProjection, ()> {
            Ok(match s {
                "rectangular" => VideoContentDetailsProjection::Rectangular,
                "360" => VideoContentDetailsProjection::_360,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoContentDetailsProjection {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoContentDetailsProjection {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoContentDetailsProjection {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "rectangular" => VideoContentDetailsProjection::Rectangular,
                "360" => VideoContentDetailsProjection::_360,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsProjection {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsProjection {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoContentDetailsRegionRestriction {
        #[doc = "A list of region codes that identify countries where the video is\nviewable. If this property is present and a country is not listed\nin its value, then the video is blocked from appearing in that\ncountry. If this property is present and contains an empty list,\nthe video is blocked in all countries."]
        #[serde(
            rename = "allowed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub allowed: ::std::option::Option<Vec<String>>,
        #[doc = "A list of region codes that identify countries where the video is\nblocked. If this property is present and a country is not listed in\nits value, then the video is viewable in that country. If this\nproperty is present and contains an empty list, the video is\nviewable in all countries."]
        #[serde(
            rename = "blocked",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub blocked: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for VideoContentDetailsRegionRestriction {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoContentDetailsRegionRestriction {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoFileDetails {
        #[doc = "A list of audio streams contained in the uploaded video file. Each item\nin the list contains detailed metadata about an audio stream."]
        #[serde(
            rename = "audioStreams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub audio_streams: ::std::option::Option<Vec<crate::schemas::VideoFileDetailsAudioStream>>,
        #[doc = "The uploaded video file's combined (video and audio) bitrate in bits\nper second."]
        #[serde(
            rename = "bitrateBps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bitrate_bps: ::std::option::Option<u64>,
        #[doc = "The uploaded video file's container format."]
        #[serde(
            rename = "container",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub container: ::std::option::Option<String>,
        #[doc = "The date and time when the uploaded video file was created. The value is\nspecified in <a href=\"http://www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat. Currently, the following ISO 8601 formats are supported:\n\n<ul>\n<li>Date only: <code>YYYY-MM-DD</code></li>\n<li>Naive time: <code>YYYY-MM-DDTHH:MM:SS</code></li>\n<li>Time with timezone: <code>YYYY-MM-DDTHH:MM:SS+HH:MM</code></li>\n</ul>"]
        #[serde(
            rename = "creationTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub creation_time: ::std::option::Option<String>,
        #[doc = "The length of the uploaded video in milliseconds."]
        #[serde(
            rename = "durationMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub duration_ms: ::std::option::Option<u64>,
        #[doc = "The uploaded file's name. This field is present whether a video file or\nanother type of file was uploaded."]
        #[serde(
            rename = "fileName",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_name: ::std::option::Option<String>,
        #[doc = "The uploaded file's size in bytes. This field is present whether\na video file or another type of file was uploaded."]
        #[serde(
            rename = "fileSize",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub file_size: ::std::option::Option<u64>,
        #[doc = "The uploaded file's type as detected by YouTube's video processing\nengine. Currently, YouTube only processes video files, but this field\nis present whether a video file or another type of file was uploaded."]
        #[serde(
            rename = "fileType",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_type: ::std::option::Option<crate::schemas::VideoFileDetailsFileType>,
        #[doc = "A list of video streams contained in the uploaded video file. Each item\nin the list contains detailed metadata about a video stream."]
        #[serde(
            rename = "videoStreams",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_streams: ::std::option::Option<Vec<crate::schemas::VideoFileDetailsVideoStream>>,
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoFileDetailsFileType {
        #[doc = "Archive file (e.g., a ZIP archive)."]
        Archive,
        #[doc = "Audio only file (e.g., an MP3 file)."]
        Audio,
        #[doc = "Document or text file (e.g., MS Word document)."]
        Document,
        #[doc = "Image file (e.g., a JPEG image)."]
        Image,
        #[doc = "Other non-video file type."]
        Other,
        #[doc = "Movie project file (e.g., Microsoft Windows Movie Maker project)."]
        Project,
        #[doc = "Known video file (e.g., an MP4 file)."]
        Video,
    }
    impl VideoFileDetailsFileType {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoFileDetailsFileType::Archive => "archive",
                VideoFileDetailsFileType::Audio => "audio",
                VideoFileDetailsFileType::Document => "document",
                VideoFileDetailsFileType::Image => "image",
                VideoFileDetailsFileType::Other => "other",
                VideoFileDetailsFileType::Project => "project",
                VideoFileDetailsFileType::Video => "video",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoFileDetailsFileType {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoFileDetailsFileType {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoFileDetailsFileType, ()> {
            Ok(match s {
                "archive" => VideoFileDetailsFileType::Archive,
                "audio" => VideoFileDetailsFileType::Audio,
                "document" => VideoFileDetailsFileType::Document,
                "image" => VideoFileDetailsFileType::Image,
                "other" => VideoFileDetailsFileType::Other,
                "project" => VideoFileDetailsFileType::Project,
                "video" => VideoFileDetailsFileType::Video,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoFileDetailsFileType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoFileDetailsFileType {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoFileDetailsFileType {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "archive" => VideoFileDetailsFileType::Archive,
                "audio" => VideoFileDetailsFileType::Audio,
                "document" => VideoFileDetailsFileType::Document,
                "image" => VideoFileDetailsFileType::Image,
                "other" => VideoFileDetailsFileType::Other,
                "project" => VideoFileDetailsFileType::Project,
                "video" => VideoFileDetailsFileType::Video,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsFileType {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsFileType {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoFileDetailsAudioStream {
        #[doc = "The audio stream's bitrate, in bits per second."]
        #[serde(
            rename = "bitrateBps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bitrate_bps: ::std::option::Option<u64>,
        #[doc = "The number of audio channels that the stream contains."]
        #[serde(
            rename = "channelCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_count: ::std::option::Option<u32>,
        #[doc = "The audio codec that the stream uses."]
        #[serde(
            rename = "codec",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub codec: ::std::option::Option<String>,
        #[doc = "A value that uniquely identifies a video vendor. Typically, the value\nis a four-letter vendor code."]
        #[serde(
            rename = "vendor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vendor: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsAudioStream {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsAudioStream {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoFileDetailsVideoStream {
        #[doc = "The video content's display aspect ratio, which specifies the aspect\nratio in which the video should be displayed."]
        #[serde(
            rename = "aspectRatio",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub aspect_ratio: ::std::option::Option<f64>,
        #[doc = "The video stream's bitrate, in bits per second."]
        #[serde(
            rename = "bitrateBps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub bitrate_bps: ::std::option::Option<u64>,
        #[doc = "The video codec that the stream uses."]
        #[serde(
            rename = "codec",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub codec: ::std::option::Option<String>,
        #[doc = "The video stream's frame rate, in frames per second."]
        #[serde(
            rename = "frameRateFps",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub frame_rate_fps: ::std::option::Option<f64>,
        #[doc = "The encoded video content's height in pixels."]
        #[serde(
            rename = "heightPixels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub height_pixels: ::std::option::Option<u32>,
        #[doc = "The amount that YouTube needs to rotate the original source content\nto properly display the video."]
        #[serde(
            rename = "rotation",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rotation: ::std::option::Option<crate::schemas::VideoFileDetailsVideoStreamRotation>,
        #[doc = "A value that uniquely identifies a video vendor. Typically, the value is\na four-letter vendor code."]
        #[serde(
            rename = "vendor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub vendor: ::std::option::Option<String>,
        #[doc = "The encoded video content's width in pixels. You can calculate the\nvideo's encoding aspect ratio as\n<code>width_pixels</code>\u{a0}/\u{a0}<code>height_pixels</code>."]
        #[serde(
            rename = "widthPixels",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub width_pixels: ::std::option::Option<u32>,
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsVideoStream {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsVideoStream {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoFileDetailsVideoStreamRotation {
        Clockwise,
        CounterClockwise,
        None,
        Other,
        UpsideDown,
    }
    impl VideoFileDetailsVideoStreamRotation {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoFileDetailsVideoStreamRotation::Clockwise => "clockwise",
                VideoFileDetailsVideoStreamRotation::CounterClockwise => "counterClockwise",
                VideoFileDetailsVideoStreamRotation::None => "none",
                VideoFileDetailsVideoStreamRotation::Other => "other",
                VideoFileDetailsVideoStreamRotation::UpsideDown => "upsideDown",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoFileDetailsVideoStreamRotation {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoFileDetailsVideoStreamRotation {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoFileDetailsVideoStreamRotation, ()> {
            Ok(match s {
                "clockwise" => VideoFileDetailsVideoStreamRotation::Clockwise,
                "counterClockwise" => VideoFileDetailsVideoStreamRotation::CounterClockwise,
                "none" => VideoFileDetailsVideoStreamRotation::None,
                "other" => VideoFileDetailsVideoStreamRotation::Other,
                "upsideDown" => VideoFileDetailsVideoStreamRotation::UpsideDown,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoFileDetailsVideoStreamRotation {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoFileDetailsVideoStreamRotation {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoFileDetailsVideoStreamRotation {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "clockwise" => VideoFileDetailsVideoStreamRotation::Clockwise,
                "counterClockwise" => VideoFileDetailsVideoStreamRotation::CounterClockwise,
                "none" => VideoFileDetailsVideoStreamRotation::None,
                "other" => VideoFileDetailsVideoStreamRotation::Other,
                "upsideDown" => VideoFileDetailsVideoStreamRotation::UpsideDown,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoFileDetailsVideoStreamRotation {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoFileDetailsVideoStreamRotation {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::Video>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#videoListResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the next page in the result set."]
        #[serde(
            rename = "nextPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub next_page_token: ::std::option::Option<String>,
        #[doc = "General pagination information."]
        #[serde(
            rename = "pageInfo",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub page_info: ::std::option::Option<crate::schemas::PageInfo>,
        #[doc = "The token that can be used as the value of the <code>pageToken</code>\nparameter to retrieve the previous page in the result set."]
        #[serde(
            rename = "prevPageToken",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub prev_page_token: ::std::option::Option<String>,
        #[serde(
            rename = "tokenPagination",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub token_pagination: ::std::option::Option<crate::schemas::TokenPagination>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoLiveStreamingDetails {
        #[doc = "The ID of the currently active live chat attached to this video. This\nfield is filled only if the video is a currently live broadcast that has\nlive chat. Once the broadcast transitions to complete this field will be\nremoved and the live chat closed down. For persistent broadcasts that live\nchat id will no longer be tied to this video but rather to the new video\nbeing displayed at the persistent page."]
        #[serde(
            rename = "activeLiveChatId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub active_live_chat_id: ::std::option::Option<String>,
        #[doc = "The time that the broadcast actually ended. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat. This value will not be\navailable until the broadcast is over."]
        #[serde(
            rename = "actualEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_end_time: ::std::option::Option<String>,
        #[doc = "The time that the broadcast actually started. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat. This value will not be\navailable until the broadcast begins."]
        #[serde(
            rename = "actualStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub actual_start_time: ::std::option::Option<String>,
        #[doc = "The number of viewers currently watching the broadcast. The property and\nits value will be present if the broadcast has current viewers and the\nbroadcast owner has not hidden the viewcount for the video. Note that\nYouTube stops tracking the number of concurrent viewers for a broadcast\nwhen the broadcast ends. So, this property would not identify the number\nof viewers watching an archived video of a live broadcast that already\nended."]
        #[serde(
            rename = "concurrentViewers",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub concurrent_viewers: ::std::option::Option<u64>,
        #[doc = "The time that the broadcast is scheduled to end. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat. If the value is empty or\nthe property is not present, then the broadcast is scheduled to continue\nindefinitely."]
        #[serde(
            rename = "scheduledEndTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_end_time: ::std::option::Option<String>,
        #[doc = "The time that the broadcast is scheduled to begin. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "scheduledStartTime",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub scheduled_start_time: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoLiveStreamingDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoLiveStreamingDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoLocalization {
        #[doc = "Localized version of the video's description."]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Localized version of the video's title."]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoLocalization {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoLocalization {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoMonetizationDetails {
        #[doc = "The value of <code>access</code> indicates whether the video can be\nmonetized or not."]
        #[serde(
            rename = "access",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub access: ::std::option::Option<crate::schemas::AccessPolicy>,
    }
    impl ::google_field_selector::FieldSelector for VideoMonetizationDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoMonetizationDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoPlayer {
        #[serde(
            rename = "embedHeight",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub embed_height: ::std::option::Option<i64>,
        #[doc = "An <code><iframe></code> tag that embeds a player that will\nplay the video."]
        #[serde(
            rename = "embedHtml",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embed_html: ::std::option::Option<String>,
        #[doc = "The embed width"]
        #[serde(
            rename = "embedWidth",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub embed_width: ::std::option::Option<i64>,
    }
    impl ::google_field_selector::FieldSelector for VideoPlayer {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoPlayer {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoProcessingDetails {
        #[doc = "This value indicates whether video editing suggestions, which might\nimprove video quality or the playback experience, are available for\nthe video. You can retrieve these suggestions by requesting the\n<code>suggestions</code> part in your <code>videos.list()</code> request."]
        #[serde(
            rename = "editorSuggestionsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub editor_suggestions_availability: ::std::option::Option<String>,
        #[doc = "This value indicates whether file details are available for the uploaded\nvideo. You can retrieve a video's file details by requesting the\n<code>fileDetails</code> part in your <code>videos.list()</code> request."]
        #[serde(
            rename = "fileDetailsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub file_details_availability: ::std::option::Option<String>,
        #[doc = "The reason that YouTube failed to process the video. This property will\nonly have a value if the <code>processingStatus</code>\nproperty's value is <code>failed</code>."]
        #[serde(
            rename = "processingFailureReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_failure_reason:
            ::std::option::Option<crate::schemas::VideoProcessingDetailsProcessingFailureReason>,
        #[doc = "This value indicates whether the video processing engine has generated\nsuggestions that might improve YouTube's ability to process the\nthe video, warnings that explain video processing problems, or\nerrors that cause video processing problems. You can retrieve these\nsuggestions by requesting the <code>suggestions</code> part in your\n<code>videos.list()</code> request."]
        #[serde(
            rename = "processingIssuesAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_issues_availability: ::std::option::Option<String>,
        #[doc = "The <code>processingProgress</code> object contains information about the\nprogress YouTube has made in processing the video. The values are really\nonly relevant if the video's processing status is <code>processing</code>."]
        #[serde(
            rename = "processingProgress",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_progress:
            ::std::option::Option<crate::schemas::VideoProcessingDetailsProcessingProgress>,
        #[doc = "The video's processing status. This value indicates whether YouTube was\nable to process the video or if the video is still being processed."]
        #[serde(
            rename = "processingStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_status:
            ::std::option::Option<crate::schemas::VideoProcessingDetailsProcessingStatus>,
        #[doc = "This value indicates whether keyword (tag) suggestions are available for\nthe video. Tags can be added to a video's metadata to make it easier for\nother users to find the video. You can retrieve these suggestions by\nrequesting the <code>suggestions</code> part in your\n<code>videos.list()</code> request."]
        #[serde(
            rename = "tagSuggestionsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_suggestions_availability: ::std::option::Option<String>,
        #[doc = "This value indicates whether thumbnail images have been generated for\nthe video."]
        #[serde(
            rename = "thumbnailsAvailability",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails_availability: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoProcessingDetailsProcessingFailureReason {
        Other,
        StreamingFailed,
        TranscodeFailed,
        UploadFailed,
    }
    impl VideoProcessingDetailsProcessingFailureReason {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoProcessingDetailsProcessingFailureReason::Other => "other",
                VideoProcessingDetailsProcessingFailureReason::StreamingFailed => "streamingFailed",
                VideoProcessingDetailsProcessingFailureReason::TranscodeFailed => "transcodeFailed",
                VideoProcessingDetailsProcessingFailureReason::UploadFailed => "uploadFailed",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoProcessingDetailsProcessingFailureReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoProcessingDetailsProcessingFailureReason {
        type Err = ();
        fn from_str(
            s: &str,
        ) -> ::std::result::Result<VideoProcessingDetailsProcessingFailureReason, ()> {
            Ok(match s {
                "other" => VideoProcessingDetailsProcessingFailureReason::Other,
                "streamingFailed" => VideoProcessingDetailsProcessingFailureReason::StreamingFailed,
                "transcodeFailed" => VideoProcessingDetailsProcessingFailureReason::TranscodeFailed,
                "uploadFailed" => VideoProcessingDetailsProcessingFailureReason::UploadFailed,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoProcessingDetailsProcessingFailureReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoProcessingDetailsProcessingFailureReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoProcessingDetailsProcessingFailureReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "other" => VideoProcessingDetailsProcessingFailureReason::Other,
                "streamingFailed" => VideoProcessingDetailsProcessingFailureReason::StreamingFailed,
                "transcodeFailed" => VideoProcessingDetailsProcessingFailureReason::TranscodeFailed,
                "uploadFailed" => VideoProcessingDetailsProcessingFailureReason::UploadFailed,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetailsProcessingFailureReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetailsProcessingFailureReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoProcessingDetailsProcessingStatus {
        Failed,
        Processing,
        Succeeded,
        Terminated,
    }
    impl VideoProcessingDetailsProcessingStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoProcessingDetailsProcessingStatus::Failed => "failed",
                VideoProcessingDetailsProcessingStatus::Processing => "processing",
                VideoProcessingDetailsProcessingStatus::Succeeded => "succeeded",
                VideoProcessingDetailsProcessingStatus::Terminated => "terminated",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoProcessingDetailsProcessingStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoProcessingDetailsProcessingStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoProcessingDetailsProcessingStatus, ()> {
            Ok(match s {
                "failed" => VideoProcessingDetailsProcessingStatus::Failed,
                "processing" => VideoProcessingDetailsProcessingStatus::Processing,
                "succeeded" => VideoProcessingDetailsProcessingStatus::Succeeded,
                "terminated" => VideoProcessingDetailsProcessingStatus::Terminated,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoProcessingDetailsProcessingStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoProcessingDetailsProcessingStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoProcessingDetailsProcessingStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "failed" => VideoProcessingDetailsProcessingStatus::Failed,
                "processing" => VideoProcessingDetailsProcessingStatus::Processing,
                "succeeded" => VideoProcessingDetailsProcessingStatus::Succeeded,
                "terminated" => VideoProcessingDetailsProcessingStatus::Terminated,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetailsProcessingStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetailsProcessingStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoProcessingDetailsProcessingProgress {
        #[doc = "The number of parts of the video that YouTube has already processed.\nYou can estimate the percentage of the video that YouTube has already\nprocessed by calculating:<br>\n<code>100 * parts_processed / parts_total</code><br><br>\nNote that since the estimated number of parts could increase without\na corresponding increase in the number of parts that have already been\nprocessed, it is possible that the calculated progress could\nperiodically decrease while YouTube processes a video."]
        #[serde(
            rename = "partsProcessed",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub parts_processed: ::std::option::Option<u64>,
        #[doc = "An estimate of the total number of parts that need to be processed\nfor the video. The number may be updated with more precise estimates\nwhile YouTube processes the video."]
        #[serde(
            rename = "partsTotal",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub parts_total: ::std::option::Option<u64>,
        #[doc = "An estimate of the amount of time, in millseconds, that YouTube needs\nto finish processing the video."]
        #[serde(
            rename = "timeLeftMs",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub time_left_ms: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for VideoProcessingDetailsProcessingProgress {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProcessingDetailsProcessingProgress {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoProjectDetails {
        #[doc = "A list of project tags associated with the video during the upload."]
        #[serde(
            rename = "tags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tags: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for VideoProjectDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoProjectDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoRating {
        #[doc = "Rating of a video."]
        #[serde(
            rename = "rating",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rating: ::std::option::Option<crate::schemas::VideoRatingRating>,
        #[doc = "The ID that YouTube uses to uniquely identify the video."]
        #[serde(
            rename = "videoId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub video_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoRatingRating {
        Dislike,
        Like,
        None,
    }
    impl VideoRatingRating {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoRatingRating::Dislike => "dislike",
                VideoRatingRating::Like => "like",
                VideoRatingRating::None => "none",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoRatingRating {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoRatingRating {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoRatingRating, ()> {
            Ok(match s {
                "dislike" => VideoRatingRating::Dislike,
                "like" => VideoRatingRating::Like,
                "none" => VideoRatingRating::None,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoRatingRating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoRatingRating {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoRatingRating {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "dislike" => VideoRatingRating::Dislike,
                "like" => VideoRatingRating::Like,
                "none" => VideoRatingRating::None,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoRatingRating {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRatingRating {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoRatingListResponse {
        #[doc = "Etag of this resource."]
        #[serde(
            rename = "etag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub etag: ::std::option::Option<String>,
        #[doc = "Serialized EventId of the request which produced this response."]
        #[serde(
            rename = "eventId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub event_id: ::std::option::Option<String>,
        #[doc = "A list of ratings that match the request criteria."]
        #[serde(
            rename = "items",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub items: ::std::option::Option<Vec<crate::schemas::VideoRating>>,
        #[doc = "Identifies what kind of resource this is. Value: the fixed string\n<code>\"youtube#videoGetRatingResponse\"</code>."]
        #[serde(
            rename = "kind",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub kind: ::std::option::Option<String>,
        #[doc = "The <code>visitorId</code> identifies the visitor."]
        #[serde(
            rename = "visitorId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub visitor_id: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoRatingListResponse {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRatingListResponse {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug, Clone, PartialEq, PartialOrd, Default, :: serde :: Deserialize, :: serde :: Serialize,
    )]
    pub struct VideoRecordingDetails {
        #[doc = "The geolocation information associated with the video."]
        #[serde(
            rename = "location",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub location: ::std::option::Option<crate::schemas::GeoPoint>,
        #[doc = "The text description of the location where the video was recorded."]
        #[serde(
            rename = "locationDescription",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub location_description: ::std::option::Option<String>,
        #[doc = "The date and time when the video was recorded. The value is specified in <a\nhref=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\n(<code>YYYY-MM-DDThh:mm:ss.sssZ</code>) format."]
        #[serde(
            rename = "recordingDate",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub recording_date: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoRecordingDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoRecordingDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSnippet {
        #[doc = "The YouTube <a href=\"/youtube/v3/docs/videoCategories/list\">video\ncategory</a> associated with the video."]
        #[serde(
            rename = "categoryId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub category_id: ::std::option::Option<String>,
        #[doc = "The ID that YouTube uses to uniquely identify the channel that the\nvideo was uploaded to."]
        #[serde(
            rename = "channelId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_id: ::std::option::Option<String>,
        #[doc = "Channel title for the channel that the video belongs to."]
        #[serde(
            rename = "channelTitle",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub channel_title: ::std::option::Option<String>,
        #[doc = "The <code>default_audio_language</code> property specifies the language\nspoken in the video's default audio track."]
        #[serde(
            rename = "defaultAudioLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_audio_language: ::std::option::Option<String>,
        #[doc = "The language of the videos's default snippet."]
        #[serde(
            rename = "defaultLanguage",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub default_language: ::std::option::Option<String>,
        #[doc = "The video's description.\n@mutable youtube.videos.insert youtube.videos.update"]
        #[serde(
            rename = "description",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub description: ::std::option::Option<String>,
        #[doc = "Indicates if the video is an upcoming/active live broadcast.\nOr it's \"none\" if the video is not an upcoming/active live broadcast."]
        #[serde(
            rename = "liveBroadcastContent",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub live_broadcast_content:
            ::std::option::Option<crate::schemas::VideoSnippetLiveBroadcastContent>,
        #[doc = "Localized snippet selected with the hl parameter. If no such localization\nexists, this field is populated with the default snippet. (Read-only)"]
        #[serde(
            rename = "localized",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub localized: ::std::option::Option<crate::schemas::VideoLocalization>,
        #[doc = "The date and time that the video was uploaded. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishedAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub published_at: ::std::option::Option<String>,
        #[doc = "A list of keyword tags associated with the video. Tags may contain spaces."]
        #[serde(
            rename = "tags",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tags: ::std::option::Option<Vec<String>>,
        #[doc = "A map of thumbnail images associated with the video. For each object in the\nmap, the key is the name of the thumbnail image, and the value is an object\nthat contains other information about the thumbnail."]
        #[serde(
            rename = "thumbnails",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub thumbnails: ::std::option::Option<crate::schemas::ThumbnailDetails>,
        #[doc = "The video's title.\n@mutable youtube.videos.insert youtube.videos.update"]
        #[serde(
            rename = "title",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub title: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoSnippet {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSnippet {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSnippetLiveBroadcastContent {
        Completed,
        Live,
        None,
        Upcoming,
    }
    impl VideoSnippetLiveBroadcastContent {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSnippetLiveBroadcastContent::Completed => "completed",
                VideoSnippetLiveBroadcastContent::Live => "live",
                VideoSnippetLiveBroadcastContent::None => "none",
                VideoSnippetLiveBroadcastContent::Upcoming => "upcoming",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSnippetLiveBroadcastContent {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSnippetLiveBroadcastContent {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSnippetLiveBroadcastContent, ()> {
            Ok(match s {
                "completed" => VideoSnippetLiveBroadcastContent::Completed,
                "live" => VideoSnippetLiveBroadcastContent::Live,
                "none" => VideoSnippetLiveBroadcastContent::None,
                "upcoming" => VideoSnippetLiveBroadcastContent::Upcoming,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSnippetLiveBroadcastContent {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSnippetLiveBroadcastContent {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSnippetLiveBroadcastContent {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "completed" => VideoSnippetLiveBroadcastContent::Completed,
                "live" => VideoSnippetLiveBroadcastContent::Live,
                "none" => VideoSnippetLiveBroadcastContent::None,
                "upcoming" => VideoSnippetLiveBroadcastContent::Upcoming,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSnippetLiveBroadcastContent {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSnippetLiveBroadcastContent {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoStatistics {
        #[doc = "The number of comments for the video."]
        #[serde(
            rename = "commentCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub comment_count: ::std::option::Option<u64>,
        #[doc = "The number of users who have indicated that they disliked the video by\ngiving it a negative rating."]
        #[serde(
            rename = "dislikeCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub dislike_count: ::std::option::Option<u64>,
        #[doc = "The number of users who currently have the video marked as a favorite\nvideo."]
        #[serde(
            rename = "favoriteCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub favorite_count: ::std::option::Option<u64>,
        #[doc = "The number of users who have indicated that they liked the video by\ngiving it a positive rating."]
        #[serde(
            rename = "likeCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub like_count: ::std::option::Option<u64>,
        #[doc = "The number of times the video has been viewed."]
        #[serde(
            rename = "viewCount",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        #[serde(with = "crate::parsed_string")]
        pub view_count: ::std::option::Option<u64>,
    }
    impl ::google_field_selector::FieldSelector for VideoStatistics {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatistics {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoStatus {
        #[doc = "This value indicates if the video can be embedded on another website.\n@mutable youtube.videos.insert youtube.videos.update"]
        #[serde(
            rename = "embeddable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub embeddable: ::std::option::Option<bool>,
        #[doc = "This value explains why a video failed to upload. This property is\nonly present if the <code>uploadStatus</code> property indicates that\nthe upload failed."]
        #[serde(
            rename = "failureReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub failure_reason: ::std::option::Option<crate::schemas::VideoStatusFailureReason>,
        #[doc = "The video's license.\n@mutable youtube.videos.insert youtube.videos.update"]
        #[serde(
            rename = "license",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub license: ::std::option::Option<crate::schemas::VideoStatusLicense>,
        #[serde(
            rename = "madeForKids",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub made_for_kids: ::std::option::Option<bool>,
        #[doc = "The video's privacy status."]
        #[serde(
            rename = "privacyStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub privacy_status: ::std::option::Option<crate::schemas::VideoStatusPrivacyStatus>,
        #[doc = "This value indicates if the extended video statistics on the watch page\ncan be viewed by everyone. Note that the view count, likes, etc will still\nbe visible if this is disabled.\n@mutable youtube.videos.insert youtube.videos.update"]
        #[serde(
            rename = "publicStatsViewable",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub public_stats_viewable: ::std::option::Option<bool>,
        #[doc = "The date and time when the video is scheduled to publish. It can be set\nonly if the privacy status of the video is private. The value is specified\nin <a href=\"//www.w3.org/TR/NOTE-datetime\">ISO 8601</a>\nformat."]
        #[serde(
            rename = "publishAt",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub publish_at: ::std::option::Option<String>,
        #[doc = "This value explains why YouTube rejected an uploaded video. This\nproperty is only present if the <code>uploadStatus</code> property\nindicates that the upload was rejected."]
        #[serde(
            rename = "rejectionReason",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub rejection_reason: ::std::option::Option<crate::schemas::VideoStatusRejectionReason>,
        #[serde(
            rename = "selfDeclaredMadeForKids",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub self_declared_made_for_kids: ::std::option::Option<bool>,
        #[doc = "The status of the uploaded video."]
        #[serde(
            rename = "uploadStatus",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub upload_status: ::std::option::Option<crate::schemas::VideoStatusUploadStatus>,
    }
    impl ::google_field_selector::FieldSelector for VideoStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusFailureReason {
        #[doc = "Unsupported codec."]
        Codec,
        #[doc = "Unable to convert video content."]
        Conversion,
        #[doc = "Empty file."]
        EmptyFile,
        #[doc = "Invalid file format."]
        InvalidFile,
        #[doc = "File was too small."]
        TooSmall,
        #[doc = "Upload wasn't finished."]
        UploadAborted,
    }
    impl VideoStatusFailureReason {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusFailureReason::Codec => "codec",
                VideoStatusFailureReason::Conversion => "conversion",
                VideoStatusFailureReason::EmptyFile => "emptyFile",
                VideoStatusFailureReason::InvalidFile => "invalidFile",
                VideoStatusFailureReason::TooSmall => "tooSmall",
                VideoStatusFailureReason::UploadAborted => "uploadAborted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusFailureReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusFailureReason {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusFailureReason, ()> {
            Ok(match s {
                "codec" => VideoStatusFailureReason::Codec,
                "conversion" => VideoStatusFailureReason::Conversion,
                "emptyFile" => VideoStatusFailureReason::EmptyFile,
                "invalidFile" => VideoStatusFailureReason::InvalidFile,
                "tooSmall" => VideoStatusFailureReason::TooSmall,
                "uploadAborted" => VideoStatusFailureReason::UploadAborted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusFailureReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusFailureReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusFailureReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "codec" => VideoStatusFailureReason::Codec,
                "conversion" => VideoStatusFailureReason::Conversion,
                "emptyFile" => VideoStatusFailureReason::EmptyFile,
                "invalidFile" => VideoStatusFailureReason::InvalidFile,
                "tooSmall" => VideoStatusFailureReason::TooSmall,
                "uploadAborted" => VideoStatusFailureReason::UploadAborted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusFailureReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusFailureReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusLicense {
        CreativeCommon,
        Youtube,
    }
    impl VideoStatusLicense {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusLicense::CreativeCommon => "creativeCommon",
                VideoStatusLicense::Youtube => "youtube",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusLicense {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusLicense {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusLicense, ()> {
            Ok(match s {
                "creativeCommon" => VideoStatusLicense::CreativeCommon,
                "youtube" => VideoStatusLicense::Youtube,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusLicense {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusLicense {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusLicense {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "creativeCommon" => VideoStatusLicense::CreativeCommon,
                "youtube" => VideoStatusLicense::Youtube,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusLicense {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusLicense {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusPrivacyStatus {
        Private,
        Public,
        Unlisted,
    }
    impl VideoStatusPrivacyStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusPrivacyStatus::Private => "private",
                VideoStatusPrivacyStatus::Public => "public",
                VideoStatusPrivacyStatus::Unlisted => "unlisted",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusPrivacyStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusPrivacyStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusPrivacyStatus, ()> {
            Ok(match s {
                "private" => VideoStatusPrivacyStatus::Private,
                "public" => VideoStatusPrivacyStatus::Public,
                "unlisted" => VideoStatusPrivacyStatus::Unlisted,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusPrivacyStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusPrivacyStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusPrivacyStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "private" => VideoStatusPrivacyStatus::Private,
                "public" => VideoStatusPrivacyStatus::Public,
                "unlisted" => VideoStatusPrivacyStatus::Unlisted,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusPrivacyStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusPrivacyStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusRejectionReason {
        #[doc = "Blocked by content owner."]
        Claim,
        #[doc = "Copyright infringement."]
        Copyright,
        #[doc = "Duplicate upload in the same channel."]
        Duplicate,
        #[doc = "Inappropriate video content."]
        Inappropriate,
        #[doc = "An unspecified legal reason."]
        Legal,
        #[doc = "Video duration was too long."]
        Length,
        #[doc = "Terms of use violation."]
        TermsOfUse,
        #[doc = "Trademark infringement."]
        Trademark,
        #[doc = "Uploader closed his/her account."]
        UploaderAccountClosed,
        #[doc = "Uploader account was suspended."]
        UploaderAccountSuspended,
    }
    impl VideoStatusRejectionReason {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusRejectionReason::Claim => "claim",
                VideoStatusRejectionReason::Copyright => "copyright",
                VideoStatusRejectionReason::Duplicate => "duplicate",
                VideoStatusRejectionReason::Inappropriate => "inappropriate",
                VideoStatusRejectionReason::Legal => "legal",
                VideoStatusRejectionReason::Length => "length",
                VideoStatusRejectionReason::TermsOfUse => "termsOfUse",
                VideoStatusRejectionReason::Trademark => "trademark",
                VideoStatusRejectionReason::UploaderAccountClosed => "uploaderAccountClosed",
                VideoStatusRejectionReason::UploaderAccountSuspended => "uploaderAccountSuspended",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusRejectionReason {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusRejectionReason {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusRejectionReason, ()> {
            Ok(match s {
                "claim" => VideoStatusRejectionReason::Claim,
                "copyright" => VideoStatusRejectionReason::Copyright,
                "duplicate" => VideoStatusRejectionReason::Duplicate,
                "inappropriate" => VideoStatusRejectionReason::Inappropriate,
                "legal" => VideoStatusRejectionReason::Legal,
                "length" => VideoStatusRejectionReason::Length,
                "termsOfUse" => VideoStatusRejectionReason::TermsOfUse,
                "trademark" => VideoStatusRejectionReason::Trademark,
                "uploaderAccountClosed" => VideoStatusRejectionReason::UploaderAccountClosed,
                "uploaderAccountSuspended" => VideoStatusRejectionReason::UploaderAccountSuspended,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusRejectionReason {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusRejectionReason {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusRejectionReason {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "claim" => VideoStatusRejectionReason::Claim,
                "copyright" => VideoStatusRejectionReason::Copyright,
                "duplicate" => VideoStatusRejectionReason::Duplicate,
                "inappropriate" => VideoStatusRejectionReason::Inappropriate,
                "legal" => VideoStatusRejectionReason::Legal,
                "length" => VideoStatusRejectionReason::Length,
                "termsOfUse" => VideoStatusRejectionReason::TermsOfUse,
                "trademark" => VideoStatusRejectionReason::Trademark,
                "uploaderAccountClosed" => VideoStatusRejectionReason::UploaderAccountClosed,
                "uploaderAccountSuspended" => VideoStatusRejectionReason::UploaderAccountSuspended,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusRejectionReason {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusRejectionReason {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoStatusUploadStatus {
        #[doc = "Video has been deleted."]
        Deleted,
        #[doc = "Processing has failed. See FailureReason."]
        Failed,
        #[doc = "Video has been successfully processed."]
        Processed,
        #[doc = "Video has been rejected. See RejectionReason."]
        Rejected,
        #[doc = "Video has been uploaded but not processed yet."]
        Uploaded,
    }
    impl VideoStatusUploadStatus {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoStatusUploadStatus::Deleted => "deleted",
                VideoStatusUploadStatus::Failed => "failed",
                VideoStatusUploadStatus::Processed => "processed",
                VideoStatusUploadStatus::Rejected => "rejected",
                VideoStatusUploadStatus::Uploaded => "uploaded",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoStatusUploadStatus {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoStatusUploadStatus {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoStatusUploadStatus, ()> {
            Ok(match s {
                "deleted" => VideoStatusUploadStatus::Deleted,
                "failed" => VideoStatusUploadStatus::Failed,
                "processed" => VideoStatusUploadStatus::Processed,
                "rejected" => VideoStatusUploadStatus::Rejected,
                "uploaded" => VideoStatusUploadStatus::Uploaded,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoStatusUploadStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoStatusUploadStatus {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoStatusUploadStatus {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "deleted" => VideoStatusUploadStatus::Deleted,
                "failed" => VideoStatusUploadStatus::Failed,
                "processed" => VideoStatusUploadStatus::Processed,
                "rejected" => VideoStatusUploadStatus::Rejected,
                "uploaded" => VideoStatusUploadStatus::Uploaded,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoStatusUploadStatus {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoStatusUploadStatus {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSuggestions {
        #[doc = "A list of video editing operations that might improve the video quality\nor playback experience of the uploaded video."]
        #[serde(
            rename = "editorSuggestions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub editor_suggestions:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsEditorSuggestionsItems>>,
        #[doc = "A list of errors that will prevent YouTube from successfully processing\nthe uploaded video video. These errors indicate that, regardless of the\nvideo's current <a href=\"#processingProgress.processingStatus\">processing\nstatus</a>, eventually, that status will almost certainly be\n<code>failed</code>."]
        #[serde(
            rename = "processingErrors",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_errors:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsProcessingErrorsItems>>,
        #[doc = "A list of suggestions that may improve YouTube's ability to process the\nvideo."]
        #[serde(
            rename = "processingHints",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_hints:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsProcessingHintsItems>>,
        #[doc = "A list of reasons why YouTube may have difficulty transcoding the\nuploaded video or that might result in an erroneous transcoding.\nThese warnings are generated before YouTube actually processes the\nuploaded video file. In addition, they identify issues that are unlikely\nto cause the video processing to fail but that might cause problems\nsuch as sync issues, video artifacts, or a missing audio track."]
        #[serde(
            rename = "processingWarnings",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub processing_warnings:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsProcessingWarningsItems>>,
        #[doc = "A list of keyword tags that could be added to the video's metadata to\nincrease the likelihood that users will locate your video when searching\nor browsing on YouTube."]
        #[serde(
            rename = "tagSuggestions",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag_suggestions:
            ::std::option::Option<Vec<crate::schemas::VideoSuggestionsTagSuggestion>>,
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestions {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestions {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsEditorSuggestionsItems {
        AudioQuietAudioSwap,
        VideoAutoLevels,
        VideoCrop,
        VideoStabilize,
    }
    impl VideoSuggestionsEditorSuggestionsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsEditorSuggestionsItems::AudioQuietAudioSwap => {
                    "audioQuietAudioSwap"
                }
                VideoSuggestionsEditorSuggestionsItems::VideoAutoLevels => "videoAutoLevels",
                VideoSuggestionsEditorSuggestionsItems::VideoCrop => "videoCrop",
                VideoSuggestionsEditorSuggestionsItems::VideoStabilize => "videoStabilize",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsEditorSuggestionsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsEditorSuggestionsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsEditorSuggestionsItems, ()> {
            Ok(match s {
                "audioQuietAudioSwap" => {
                    VideoSuggestionsEditorSuggestionsItems::AudioQuietAudioSwap
                }
                "videoAutoLevels" => VideoSuggestionsEditorSuggestionsItems::VideoAutoLevels,
                "videoCrop" => VideoSuggestionsEditorSuggestionsItems::VideoCrop,
                "videoStabilize" => VideoSuggestionsEditorSuggestionsItems::VideoStabilize,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsEditorSuggestionsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsEditorSuggestionsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsEditorSuggestionsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "audioQuietAudioSwap" => {
                    VideoSuggestionsEditorSuggestionsItems::AudioQuietAudioSwap
                }
                "videoAutoLevels" => VideoSuggestionsEditorSuggestionsItems::VideoAutoLevels,
                "videoCrop" => VideoSuggestionsEditorSuggestionsItems::VideoCrop,
                "videoStabilize" => VideoSuggestionsEditorSuggestionsItems::VideoStabilize,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsEditorSuggestionsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsEditorSuggestionsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsProcessingErrorsItems {
        ArchiveFile,
        AudioFile,
        DocFile,
        ImageFile,
        NotAVideoFile,
        ProjectFile,
        UnsupportedSpatialAudioLayout,
    }
    impl VideoSuggestionsProcessingErrorsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsProcessingErrorsItems::ArchiveFile => "archiveFile",
                VideoSuggestionsProcessingErrorsItems::AudioFile => "audioFile",
                VideoSuggestionsProcessingErrorsItems::DocFile => "docFile",
                VideoSuggestionsProcessingErrorsItems::ImageFile => "imageFile",
                VideoSuggestionsProcessingErrorsItems::NotAVideoFile => "notAVideoFile",
                VideoSuggestionsProcessingErrorsItems::ProjectFile => "projectFile",
                VideoSuggestionsProcessingErrorsItems::UnsupportedSpatialAudioLayout => {
                    "unsupportedSpatialAudioLayout"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsProcessingErrorsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsProcessingErrorsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsProcessingErrorsItems, ()> {
            Ok(match s {
                "archiveFile" => VideoSuggestionsProcessingErrorsItems::ArchiveFile,
                "audioFile" => VideoSuggestionsProcessingErrorsItems::AudioFile,
                "docFile" => VideoSuggestionsProcessingErrorsItems::DocFile,
                "imageFile" => VideoSuggestionsProcessingErrorsItems::ImageFile,
                "notAVideoFile" => VideoSuggestionsProcessingErrorsItems::NotAVideoFile,
                "projectFile" => VideoSuggestionsProcessingErrorsItems::ProjectFile,
                "unsupportedSpatialAudioLayout" => {
                    VideoSuggestionsProcessingErrorsItems::UnsupportedSpatialAudioLayout
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsProcessingErrorsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsProcessingErrorsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsProcessingErrorsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "archiveFile" => VideoSuggestionsProcessingErrorsItems::ArchiveFile,
                "audioFile" => VideoSuggestionsProcessingErrorsItems::AudioFile,
                "docFile" => VideoSuggestionsProcessingErrorsItems::DocFile,
                "imageFile" => VideoSuggestionsProcessingErrorsItems::ImageFile,
                "notAVideoFile" => VideoSuggestionsProcessingErrorsItems::NotAVideoFile,
                "projectFile" => VideoSuggestionsProcessingErrorsItems::ProjectFile,
                "unsupportedSpatialAudioLayout" => {
                    VideoSuggestionsProcessingErrorsItems::UnsupportedSpatialAudioLayout
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsProcessingErrorsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsProcessingErrorsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsProcessingHintsItems {
        HdrVideo,
        NonStreamableMov,
        SendBestQualityVideo,
        SpatialAudio,
        SphericalVideo,
        VrVideo,
    }
    impl VideoSuggestionsProcessingHintsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsProcessingHintsItems::HdrVideo => "hdrVideo",
                VideoSuggestionsProcessingHintsItems::NonStreamableMov => "nonStreamableMov",
                VideoSuggestionsProcessingHintsItems::SendBestQualityVideo => {
                    "sendBestQualityVideo"
                }
                VideoSuggestionsProcessingHintsItems::SpatialAudio => "spatialAudio",
                VideoSuggestionsProcessingHintsItems::SphericalVideo => "sphericalVideo",
                VideoSuggestionsProcessingHintsItems::VrVideo => "vrVideo",
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsProcessingHintsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsProcessingHintsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsProcessingHintsItems, ()> {
            Ok(match s {
                "hdrVideo" => VideoSuggestionsProcessingHintsItems::HdrVideo,
                "nonStreamableMov" => VideoSuggestionsProcessingHintsItems::NonStreamableMov,
                "sendBestQualityVideo" => {
                    VideoSuggestionsProcessingHintsItems::SendBestQualityVideo
                }
                "spatialAudio" => VideoSuggestionsProcessingHintsItems::SpatialAudio,
                "sphericalVideo" => VideoSuggestionsProcessingHintsItems::SphericalVideo,
                "vrVideo" => VideoSuggestionsProcessingHintsItems::VrVideo,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsProcessingHintsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsProcessingHintsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsProcessingHintsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "hdrVideo" => VideoSuggestionsProcessingHintsItems::HdrVideo,
                "nonStreamableMov" => VideoSuggestionsProcessingHintsItems::NonStreamableMov,
                "sendBestQualityVideo" => {
                    VideoSuggestionsProcessingHintsItems::SendBestQualityVideo
                }
                "spatialAudio" => VideoSuggestionsProcessingHintsItems::SpatialAudio,
                "sphericalVideo" => VideoSuggestionsProcessingHintsItems::SphericalVideo,
                "vrVideo" => VideoSuggestionsProcessingHintsItems::VrVideo,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsProcessingHintsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsProcessingHintsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum VideoSuggestionsProcessingWarningsItems {
        HasEditlist,
        InconsistentResolution,
        ProblematicAudioCodec,
        ProblematicHdrLookupTable,
        ProblematicVideoCodec,
        UnknownAudioCodec,
        UnknownContainer,
        UnknownVideoCodec,
        UnsupportedHdrColorMetadata,
        UnsupportedHdrPixelFormat,
        UnsupportedSphericalProjectionType,
        UnsupportedVrStereoMode,
    }
    impl VideoSuggestionsProcessingWarningsItems {
        pub fn as_str(self) -> &'static str {
            match self {
                VideoSuggestionsProcessingWarningsItems::HasEditlist => "hasEditlist",
                VideoSuggestionsProcessingWarningsItems::InconsistentResolution => {
                    "inconsistentResolution"
                }
                VideoSuggestionsProcessingWarningsItems::ProblematicAudioCodec => {
                    "problematicAudioCodec"
                }
                VideoSuggestionsProcessingWarningsItems::ProblematicHdrLookupTable => {
                    "problematicHdrLookupTable"
                }
                VideoSuggestionsProcessingWarningsItems::ProblematicVideoCodec => {
                    "problematicVideoCodec"
                }
                VideoSuggestionsProcessingWarningsItems::UnknownAudioCodec => "unknownAudioCodec",
                VideoSuggestionsProcessingWarningsItems::UnknownContainer => "unknownContainer",
                VideoSuggestionsProcessingWarningsItems::UnknownVideoCodec => "unknownVideoCodec",
                VideoSuggestionsProcessingWarningsItems::UnsupportedHdrColorMetadata => {
                    "unsupportedHdrColorMetadata"
                }
                VideoSuggestionsProcessingWarningsItems::UnsupportedHdrPixelFormat => {
                    "unsupportedHdrPixelFormat"
                }
                VideoSuggestionsProcessingWarningsItems::UnsupportedSphericalProjectionType => {
                    "unsupportedSphericalProjectionType"
                }
                VideoSuggestionsProcessingWarningsItems::UnsupportedVrStereoMode => {
                    "unsupportedVrStereoMode"
                }
            }
        }
    }
    impl ::std::convert::AsRef<str> for VideoSuggestionsProcessingWarningsItems {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for VideoSuggestionsProcessingWarningsItems {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<VideoSuggestionsProcessingWarningsItems, ()> {
            Ok(match s {
                "hasEditlist" => VideoSuggestionsProcessingWarningsItems::HasEditlist,
                "inconsistentResolution" => {
                    VideoSuggestionsProcessingWarningsItems::InconsistentResolution
                }
                "problematicAudioCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicAudioCodec
                }
                "problematicHdrLookupTable" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicHdrLookupTable
                }
                "problematicVideoCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicVideoCodec
                }
                "unknownAudioCodec" => VideoSuggestionsProcessingWarningsItems::UnknownAudioCodec,
                "unknownContainer" => VideoSuggestionsProcessingWarningsItems::UnknownContainer,
                "unknownVideoCodec" => VideoSuggestionsProcessingWarningsItems::UnknownVideoCodec,
                "unsupportedHdrColorMetadata" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrColorMetadata
                }
                "unsupportedHdrPixelFormat" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrPixelFormat
                }
                "unsupportedSphericalProjectionType" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedSphericalProjectionType
                }
                "unsupportedVrStereoMode" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedVrStereoMode
                }
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for VideoSuggestionsProcessingWarningsItems {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for VideoSuggestionsProcessingWarningsItems {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for VideoSuggestionsProcessingWarningsItems {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "hasEditlist" => VideoSuggestionsProcessingWarningsItems::HasEditlist,
                "inconsistentResolution" => {
                    VideoSuggestionsProcessingWarningsItems::InconsistentResolution
                }
                "problematicAudioCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicAudioCodec
                }
                "problematicHdrLookupTable" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicHdrLookupTable
                }
                "problematicVideoCodec" => {
                    VideoSuggestionsProcessingWarningsItems::ProblematicVideoCodec
                }
                "unknownAudioCodec" => VideoSuggestionsProcessingWarningsItems::UnknownAudioCodec,
                "unknownContainer" => VideoSuggestionsProcessingWarningsItems::UnknownContainer,
                "unknownVideoCodec" => VideoSuggestionsProcessingWarningsItems::UnknownVideoCodec,
                "unsupportedHdrColorMetadata" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrColorMetadata
                }
                "unsupportedHdrPixelFormat" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedHdrPixelFormat
                }
                "unsupportedSphericalProjectionType" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedSphericalProjectionType
                }
                "unsupportedVrStereoMode" => {
                    VideoSuggestionsProcessingWarningsItems::UnsupportedVrStereoMode
                }
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsProcessingWarningsItems {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsProcessingWarningsItems {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoSuggestionsTagSuggestion {
        #[doc = "A set of video categories for which the tag is relevant. You can use this\ninformation to display appropriate tag suggestions based on the video\ncategory that the video uploader associates with the video. By default,\ntag suggestions are relevant for all categories if there are no restricts\ndefined for the keyword."]
        #[serde(
            rename = "categoryRestricts",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub category_restricts: ::std::option::Option<Vec<String>>,
        #[doc = "The keyword tag suggested for the video."]
        #[serde(
            rename = "tag",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub tag: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for VideoSuggestionsTagSuggestion {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoSuggestionsTagSuggestion {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct VideoTopicDetails {
        #[doc = "Similar to topic_id, except that these topics are merely relevant to the\nvideo. These are topics that may be mentioned in, or appear in the video.\nYou can retrieve information about each topic using <a\nhref=\"http://wiki.freebase.com/wiki/Topic_API\">Freebase Topic API</a>."]
        #[serde(
            rename = "relevantTopicIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub relevant_topic_ids: ::std::option::Option<Vec<String>>,
        #[doc = "A list of Wikipedia URLs that provide a high-level description of the\nvideo's content."]
        #[serde(
            rename = "topicCategories",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_categories: ::std::option::Option<Vec<String>>,
        #[doc = "A list of Freebase topic IDs that are centrally associated with the video.\nThese are topics that are centrally featured in the video, and it can be\nsaid that the video is mainly about each of these. You can retrieve\ninformation about each topic using the < a\nhref=\"http://wiki.freebase.com/wiki/Topic_API\">Freebase Topic API</a>."]
        #[serde(
            rename = "topicIds",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub topic_ids: ::std::option::Option<Vec<String>>,
    }
    impl ::google_field_selector::FieldSelector for VideoTopicDetails {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for VideoTopicDetails {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(
        Debug,
        Clone,
        PartialEq,
        Hash,
        PartialOrd,
        Ord,
        Eq,
        Default,
        :: serde :: Deserialize,
        :: serde :: Serialize,
    )]
    pub struct WatchSettings {
        #[doc = "The text color for the video watch page's branded area."]
        #[serde(
            rename = "backgroundColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub background_color: ::std::option::Option<String>,
        #[doc = "An ID that uniquely identifies a playlist that displays next to the video\nplayer."]
        #[serde(
            rename = "featuredPlaylistId",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub featured_playlist_id: ::std::option::Option<String>,
        #[doc = "The background color for the video watch page's branded area."]
        #[serde(
            rename = "textColor",
            default,
            skip_serializing_if = "std::option::Option::is_none"
        )]
        pub text_color: ::std::option::Option<String>,
    }
    impl ::google_field_selector::FieldSelector for WatchSettings {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for WatchSettings {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub mod params {
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Alt {
        #[doc = "Responses with Content-Type of application/json"]
        Json,
        #[doc = "Media download with context-dependent Content-Type"]
        Media,
        #[doc = "Responses with Content-Type of application/x-protobuf"]
        Proto,
    }
    impl Alt {
        pub fn as_str(self) -> &'static str {
            match self {
                Alt::Json => "json",
                Alt::Media => "media",
                Alt::Proto => "proto",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Alt {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Alt {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Alt, ()> {
            Ok(match s {
                "json" => Alt::Json,
                "media" => Alt::Media,
                "proto" => Alt::Proto,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Alt {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Alt {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Alt {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "json" => Alt::Json,
                "media" => Alt::Media,
                "proto" => Alt::Proto,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Alt {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Alt {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
    #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
    pub enum Xgafv {
        #[doc = "v1 error format"]
        _1,
        #[doc = "v2 error format"]
        _2,
    }
    impl Xgafv {
        pub fn as_str(self) -> &'static str {
            match self {
                Xgafv::_1 => "1",
                Xgafv::_2 => "2",
            }
        }
    }
    impl ::std::convert::AsRef<str> for Xgafv {
        fn as_ref(&self) -> &str {
            self.as_str()
        }
    }
    impl ::std::str::FromStr for Xgafv {
        type Err = ();
        fn from_str(s: &str) -> ::std::result::Result<Xgafv, ()> {
            Ok(match s {
                "1" => Xgafv::_1,
                "2" => Xgafv::_2,
                _ => return Err(()),
            })
        }
    }
    impl ::std::fmt::Display for Xgafv {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.write_str(self.as_str())
        }
    }
    impl ::serde::Serialize for Xgafv {
        fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
        where
            S: ::serde::ser::Serializer,
        {
            serializer.serialize_str(self.as_str())
        }
    }
    impl<'de> ::serde::Deserialize<'de> for Xgafv {
        fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
        where
            D: ::serde::de::Deserializer<'de>,
        {
            let value: &'de str = <&str>::deserialize(deserializer)?;
            Ok(match value {
                "1" => Xgafv::_1,
                "2" => Xgafv::_2,
                _ => {
                    return Err(::serde::de::Error::custom(format!(
                        "invalid enum for #name: {}",
                        value
                    )))
                }
            })
        }
    }
    impl ::google_field_selector::FieldSelector for Xgafv {
        fn fields() -> Vec<::google_field_selector::Field> {
            Vec::new()
        }
    }
    impl ::google_field_selector::ToFieldType for Xgafv {
        fn field_type() -> ::google_field_selector::FieldType {
            ::google_field_selector::FieldType::Leaf
        }
    }
}
pub struct Client {
    reqwest: ::reqwest::blocking::Client,
    auth: Box<dyn ::google_api_auth::GetAccessToken>,
}
impl Client {
    pub fn new<A>(auth: A) -> Self
    where
        A: Into<Box<dyn ::google_api_auth::GetAccessToken>>,
    {
        Client::with_reqwest_client(
            auth,
            ::reqwest::blocking::Client::builder()
                .timeout(None)
                .build()
                .unwrap(),
        )
    }
    pub fn with_reqwest_client<A>(auth: A, reqwest: ::reqwest::blocking::Client) -> Self
    where
        A: Into<Box<dyn ::google_api_auth::GetAccessToken>>,
    {
        Client {
            reqwest,
            auth: auth.into(),
        }
    }
    fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
        self.auth.as_ref()
    }
    #[doc = "Actions that can be performed on the activities resource"]
    pub fn activities(&self) -> crate::resources::activities::ActivitiesActions {
        crate::resources::activities::ActivitiesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the captions resource"]
    pub fn captions(&self) -> crate::resources::captions::CaptionsActions {
        crate::resources::captions::CaptionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the channel_banners resource"]
    pub fn channel_banners(&self) -> crate::resources::channel_banners::ChannelBannersActions {
        crate::resources::channel_banners::ChannelBannersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the channel_sections resource"]
    pub fn channel_sections(&self) -> crate::resources::channel_sections::ChannelSectionsActions {
        crate::resources::channel_sections::ChannelSectionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the channels resource"]
    pub fn channels(&self) -> crate::resources::channels::ChannelsActions {
        crate::resources::channels::ChannelsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the comment_threads resource"]
    pub fn comment_threads(&self) -> crate::resources::comment_threads::CommentThreadsActions {
        crate::resources::comment_threads::CommentThreadsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the comments resource"]
    pub fn comments(&self) -> crate::resources::comments::CommentsActions {
        crate::resources::comments::CommentsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the guide_categories resource"]
    pub fn guide_categories(&self) -> crate::resources::guide_categories::GuideCategoriesActions {
        crate::resources::guide_categories::GuideCategoriesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the i_1_8n_languages resource"]
    pub fn i_1_8n_languages(&self) -> crate::resources::i_1_8n_languages::I18NLanguagesActions {
        crate::resources::i_1_8n_languages::I18NLanguagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the i_1_8n_regions resource"]
    pub fn i_1_8n_regions(&self) -> crate::resources::i_1_8n_regions::I18NRegionsActions {
        crate::resources::i_1_8n_regions::I18NRegionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_broadcasts resource"]
    pub fn live_broadcasts(&self) -> crate::resources::live_broadcasts::LiveBroadcastsActions {
        crate::resources::live_broadcasts::LiveBroadcastsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_chat_bans resource"]
    pub fn live_chat_bans(&self) -> crate::resources::live_chat_bans::LiveChatBansActions {
        crate::resources::live_chat_bans::LiveChatBansActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_chat_messages resource"]
    pub fn live_chat_messages(
        &self,
    ) -> crate::resources::live_chat_messages::LiveChatMessagesActions {
        crate::resources::live_chat_messages::LiveChatMessagesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_chat_moderators resource"]
    pub fn live_chat_moderators(
        &self,
    ) -> crate::resources::live_chat_moderators::LiveChatModeratorsActions {
        crate::resources::live_chat_moderators::LiveChatModeratorsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the live_streams resource"]
    pub fn live_streams(&self) -> crate::resources::live_streams::LiveStreamsActions {
        crate::resources::live_streams::LiveStreamsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the members resource"]
    pub fn members(&self) -> crate::resources::members::MembersActions {
        crate::resources::members::MembersActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the memberships_levels resource"]
    pub fn memberships_levels(
        &self,
    ) -> crate::resources::memberships_levels::MembershipsLevelsActions {
        crate::resources::memberships_levels::MembershipsLevelsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the playlist_items resource"]
    pub fn playlist_items(&self) -> crate::resources::playlist_items::PlaylistItemsActions {
        crate::resources::playlist_items::PlaylistItemsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the playlists resource"]
    pub fn playlists(&self) -> crate::resources::playlists::PlaylistsActions {
        crate::resources::playlists::PlaylistsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the search resource"]
    pub fn search(&self) -> crate::resources::search::SearchActions {
        crate::resources::search::SearchActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the sponsors resource"]
    pub fn sponsors(&self) -> crate::resources::sponsors::SponsorsActions {
        crate::resources::sponsors::SponsorsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the subscriptions resource"]
    pub fn subscriptions(&self) -> crate::resources::subscriptions::SubscriptionsActions {
        crate::resources::subscriptions::SubscriptionsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the super_chat_events resource"]
    pub fn super_chat_events(&self) -> crate::resources::super_chat_events::SuperChatEventsActions {
        crate::resources::super_chat_events::SuperChatEventsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the thumbnails resource"]
    pub fn thumbnails(&self) -> crate::resources::thumbnails::ThumbnailsActions {
        crate::resources::thumbnails::ThumbnailsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the video_abuse_report_reasons resource"]
    pub fn video_abuse_report_reasons(
        &self,
    ) -> crate::resources::video_abuse_report_reasons::VideoAbuseReportReasonsActions {
        crate::resources::video_abuse_report_reasons::VideoAbuseReportReasonsActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the video_categories resource"]
    pub fn video_categories(&self) -> crate::resources::video_categories::VideoCategoriesActions {
        crate::resources::video_categories::VideoCategoriesActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the videos resource"]
    pub fn videos(&self) -> crate::resources::videos::VideosActions {
        crate::resources::videos::VideosActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
    #[doc = "Actions that can be performed on the watermarks resource"]
    pub fn watermarks(&self) -> crate::resources::watermarks::WatermarksActions {
        crate::resources::watermarks::WatermarksActions {
            reqwest: &self.reqwest,
            auth: self.auth_ref(),
        }
    }
}
pub mod resources {
    pub mod activities {
        pub mod params {}
        pub struct ActivitiesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ActivitiesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    channel_id: None,
                    home: None,
                    max_results: None,
                    mine: None,
                    page_token: None,
                    published_after: None,
                    published_before: None,
                    region_code: None,
                }
            }
        }
        #[doc = "Created via [ActivitiesActions::list()](struct.ActivitiesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            channel_id: Option<String>,
            home: Option<bool>,
            max_results: Option<u32>,
            mine: Option<bool>,
            page_token: Option<String>,
            published_after: Option<String>,
            published_before: Option<String>,
            region_code: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn home(mut self, value: bool) -> Self {
                self.home = Some(value);
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = ""]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn published_after(mut self, value: impl Into<String>) -> Self {
                self.published_after = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn published_before(mut self, value: impl Into<String>) -> Self {
                self.published_before = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Activity> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Activity> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ActivityListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ActivityListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ActivityListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ActivityListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/activities");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("home", &self.home)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("publishedAfter", &self.published_after)]);
                let req = req.query(&[("publishedBefore", &self.published_before)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod captions {
        pub mod params {}
        pub struct CaptionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CaptionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Downloads a caption track."]
            pub fn download(&self, id: impl Into<String>) -> DownloadRequestBuilder {
                DownloadRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                    tfmt: None,
                    tlang: None,
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::Caption,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                    sync: None,
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(
                &self,
                video_id: impl Into<String>,
                part: impl Into<Vec<String>>,
            ) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    video_id: video_id.into(),
                    part: part.into(),
                    id: None,
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::Caption,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of: None,
                    on_behalf_of_content_owner: None,
                    sync: None,
                }
            }
        }
        #[doc = "Created via [CaptionsActions::delete()](struct.CaptionsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the request's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified in the parameter\nvalue. This parameter is intended for YouTube content partners that own and\nmanage many different YouTube channels. It allows content owners to\nauthenticate once and get access to all their video and channel data,\nwithout having to provide authentication credentials for each individual\nchannel. The actual CMS account that the user authenticates with must be\nlinked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/captions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::download()](struct.CaptionsActions.html#method.download)"]
        #[derive(Debug, Clone)]
        pub struct DownloadRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            tfmt: Option<String>,
            tlang: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DownloadRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the request's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified in the parameter\nvalue. This parameter is intended for YouTube content partners that own and\nmanage many different YouTube channels. It allows content owners to\nauthenticate once and get access to all their video and channel data,\nwithout having to provide authentication credentials for each individual\nchannel. The actual CMS account that the user authenticates with must be\nlinked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "Convert the captions into this format. Supported options are\nsbv, srt, and vtt."]
            pub fn tfmt(mut self, value: impl Into<String>) -> Self {
                self.tfmt = Some(value.into());
                self
            }
            #[doc = "tlang is the language code; machine translate the captions into\nthis language."]
            pub fn tlang(mut self, value: impl Into<String>) -> Self {
                self.tlang = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _download_path(&self) -> String {
                let mut output = "https://www.googleapis.com/download/".to_owned();
                output.push_str("youtube/v3/captions/");
                {
                    let var_as_str = &self.id;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            pub fn download<W>(mut self, output: &mut W) -> Result<u64, crate::Error>
            where
                W: ::std::io::Write + ?Sized,
            {
                self.alt = Some(crate::params::Alt::Media);
                Ok(
                    crate::error_from_response(self._request(&self._path())?.send()?)?
                        .copy_to(output)?,
                )
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/captions/");
                {
                    let var_as_str = &self.id;
                    output.extend(::percent_encoding::utf8_percent_encode(
                        &var_as_str,
                        crate::SIMPLE,
                    ));
                }
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("tfmt", &self.tfmt)]);
                let req = req.query(&[("tlang", &self.tlang)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::insert()](struct.CaptionsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Caption,
            part: Vec<String>,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            sync: Option<bool>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is be on behalf of"]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the request's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified in the parameter\nvalue. This parameter is intended for YouTube content partners that own and\nmanage many different YouTube channels. It allows content owners to\nauthenticate once and get access to all their video and channel data,\nwithout having to provide authentication credentials for each individual\nchannel. The actual CMS account that the user authenticates with must be\nlinked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "Extra parameter to allow automatically syncing the uploaded\ncaption/transcript with the audio."]
            pub fn sync(mut self, value: bool) -> Self {
                self.sync = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/captions");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/captions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("sync", &self.sync)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::list()](struct.CaptionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            video_id: String,
            part: Vec<String>,
            id: Option<Vec<String>>,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Returns the captions with the given IDs for Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "ID of the Google+ Page for the channel that the request is on behalf of."]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the request's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified in the parameter\nvalue. This parameter is intended for YouTube content partners that own and\nmanage many different YouTube channels. It allows content owners to\nauthenticate once and get access to all their video and channel data,\nwithout having to provide authentication credentials for each individual\nchannel. The actual CMS account that the user authenticates with must be\nlinked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CaptionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CaptionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/captions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CaptionsActions::update()](struct.CaptionsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Caption,
            part: Vec<String>,
            on_behalf_of: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            sync: Option<bool>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "ID of the Google+ Page for the channel that the request is on behalf of."]
            pub fn on_behalf_of(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of = Some(value.into());
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the request's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified in the parameter\nvalue. This parameter is intended for YouTube content partners that own and\nmanage many different YouTube channels. It allows content owners to\nauthenticate once and get access to all their video and channel data,\nwithout having to provide authentication credentials for each individual\nchannel. The actual CMS account that the user authenticates with must be\nlinked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "Extra parameter to allow automatically syncing the uploaded\ncaption/transcript with the audio."]
            pub fn sync(mut self, value: bool) -> Self {
                self.sync = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/captions");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Caption, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/captions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("onBehalfOf", &self.on_behalf_of)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("sync", &self.sync)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod channel_banners {
        pub mod params {}
        pub struct ChannelBannersActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChannelBannersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::ChannelBannerResource,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    channel_id: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
        }
        #[doc = "Created via [ChannelBannersActions::insert()](struct.ChannelBannersActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ChannelBannerResource,
            channel_id: Option<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Unused, channel_id is currently derived from the security context of the\nrequestor."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the request's authorization credentials identify a YouTube CMS user\nwho is acting on behalf of the content owner specified in the parameter\nvalue. This parameter is intended for YouTube content partners that own and\nmanage many different YouTube channels. It allows content owners to\nauthenticate once and get access to all their video and channel data,\nwithout having to provide authentication credentials for each individual\nchannel. The actual CMS account that the user authenticates with must be\nlinked to the specified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/channelBanners/insert");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelBannerResource, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelBannerResource, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channelBanners/insert");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod channel_sections {
        pub mod params {}
        pub struct ChannelSectionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChannelSectionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::ChannelSection,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    channel_id: None,
                    hl: None,
                    id: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::ChannelSection,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ChannelSectionsActions::delete()](struct.ChannelSectionsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channelSections");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChannelSectionsActions::insert()](struct.ChannelSectionsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ChannelSection,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channelSections");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChannelSectionsActions::list()](struct.ChannelSectionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            channel_id: Option<String>,
            hl: Option<String>,
            id: Option<Vec<String>>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return the ChannelSections owned by the specified channel ID."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Return content in specified language"]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "Return the ChannelSections with the given IDs for Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "Return the ChannelSections owned by the authenticated user."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelSectionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelSectionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channelSections");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [ChannelSectionsActions::update()](struct.ChannelSectionsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::ChannelSection,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelSection, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channelSections");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod channels {
        pub mod params {}
        pub struct ChannelsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ChannelsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    category_id: None,
                    for_username: None,
                    hl: None,
                    id: None,
                    managed_by_me: None,
                    max_results: None,
                    mine: None,
                    my_subscribers: None,
                    on_behalf_of_content_owner: None,
                    page_token: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::Channel,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ChannelsActions::list()](struct.ChannelsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            category_id: Option<String>,
            for_username: Option<String>,
            hl: Option<String>,
            id: Option<Vec<String>>,
            managed_by_me: Option<bool>,
            max_results: Option<u32>,
            mine: Option<bool>,
            my_subscribers: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return the channels within the specified guide category ID."]
            pub fn category_id(mut self, value: impl Into<String>) -> Self {
                self.category_id = Some(value.into());
                self
            }
            #[doc = "Return the channel associated with a YouTube username."]
            pub fn for_username(mut self, value: impl Into<String>) -> Self {
                self.for_username = Some(value.into());
                self
            }
            #[doc = "Stands for \"host language\". Specifies the localization language of the\nmetadata to be filled into snippet.localized. The field is filled with the\ndefault metadata if there is no localization in the specified language.\nThe parameter value must be a language code included in the list returned\nby the i18nLanguages.list method (e.g. en_US, es_MX)."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "Return the channels with the specified IDs."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "Return the channels managed by the authenticated user."]
            pub fn managed_by_me(mut self, value: bool) -> Self {
                self.managed_by_me = Some(value);
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Return the ids of channels owned by the authenticated user."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "Return the channels subscribed to the authenticated user"]
            pub fn my_subscribers(mut self, value: bool) -> Self {
                self.my_subscribers = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Channel> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ChannelListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::ChannelListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ChannelListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ChannelListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channels");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("categoryId", &self.category_id)]);
                let req = req.query(&[("forUsername", &self.for_username)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("managedByMe", &self.managed_by_me)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req = req.query(&[("mySubscribers", &self.my_subscribers)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [ChannelsActions::update()](struct.ChannelsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Channel,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "The <code><strong>onBehalfOfContentOwner</strong></code> parameter\nindicates that the authenticated user is acting on behalf of the content\nowner specified in the parameter value. This parameter is intended for\nYouTube content partners that own and manage many different YouTube\nchannels. It allows content owners to authenticate once and get access to\nall their video and channel data, without having to provide authentication\ncredentials for each individual channel. The actual CMS account that the\nuser authenticates with needs to be linked to the specified YouTube content\nowner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Channel, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Channel, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/channels");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod comment_threads {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListModerationStatus {
                HeldForReview,
                LikelySpam,
                Published,
                Rejected,
            }
            impl ListModerationStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListModerationStatus::HeldForReview => "heldForReview",
                        ListModerationStatus::LikelySpam => "likelySpam",
                        ListModerationStatus::Published => "published",
                        ListModerationStatus::Rejected => "rejected",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListModerationStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListModerationStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListModerationStatus, ()> {
                    Ok(match s {
                        "heldForReview" => ListModerationStatus::HeldForReview,
                        "likelySpam" => ListModerationStatus::LikelySpam,
                        "published" => ListModerationStatus::Published,
                        "rejected" => ListModerationStatus::Rejected,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListModerationStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListModerationStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListModerationStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "heldForReview" => ListModerationStatus::HeldForReview,
                        "likelySpam" => ListModerationStatus::LikelySpam,
                        "published" => ListModerationStatus::Published,
                        "rejected" => ListModerationStatus::Rejected,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListModerationStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListModerationStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListOrder {
                OrderUnspecified,
                Relevance,
                Time,
            }
            impl ListOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListOrder::OrderUnspecified => "orderUnspecified",
                        ListOrder::Relevance => "relevance",
                        ListOrder::Time => "time",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListOrder, ()> {
                    Ok(match s {
                        "orderUnspecified" => ListOrder::OrderUnspecified,
                        "relevance" => ListOrder::Relevance,
                        "time" => ListOrder::Time,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "orderUnspecified" => ListOrder::OrderUnspecified,
                        "relevance" => ListOrder::Relevance,
                        "time" => ListOrder::Time,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListTextFormat {
                Html,
                PlainText,
                TextFormatUnspecified,
            }
            impl ListTextFormat {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListTextFormat::Html => "html",
                        ListTextFormat::PlainText => "plainText",
                        ListTextFormat::TextFormatUnspecified => "textFormatUnspecified",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListTextFormat {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListTextFormat {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListTextFormat, ()> {
                    Ok(match s {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        "textFormatUnspecified" => ListTextFormat::TextFormatUnspecified,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListTextFormat {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListTextFormat {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListTextFormat {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        "textFormatUnspecified" => ListTextFormat::TextFormatUnspecified,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListTextFormat {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListTextFormat {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CommentThreadsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CommentThreadsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::CommentThread,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    all_threads_related_to_channel_id: None,
                    channel_id: None,
                    id: None,
                    max_results: None,
                    moderation_status: None,
                    order: None,
                    page_token: None,
                    search_terms: None,
                    text_format: None,
                    video_id: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::CommentThread,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [CommentThreadsActions::insert()](struct.CommentThreadsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CommentThread,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/commentThreads");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentThreadsActions::list()](struct.CommentThreadsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            all_threads_related_to_channel_id: Option<String>,
            channel_id: Option<String>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            moderation_status:
                Option<crate::resources::comment_threads::params::ListModerationStatus>,
            order: Option<crate::resources::comment_threads::params::ListOrder>,
            page_token: Option<String>,
            search_terms: Option<String>,
            text_format: Option<crate::resources::comment_threads::params::ListTextFormat>,
            video_id: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Returns the comment threads of all videos of the channel and the\nchannel comments as well."]
            pub fn all_threads_related_to_channel_id(mut self, value: impl Into<String>) -> Self {
                self.all_threads_related_to_channel_id = Some(value.into());
                self
            }
            #[doc = "Returns the comment threads for all the channel comments (ie does not\ninclude comments left on videos)."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Returns the comment threads with the given IDs for Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Limits the returned comment threads to those with the specified\nmoderation status. Not compatible with the 'id' filter.\nValid values: published, heldForReview, likelySpam."]
            pub fn moderation_status(
                mut self,
                value: crate::resources::comment_threads::params::ListModerationStatus,
            ) -> Self {
                self.moderation_status = Some(value);
                self
            }
            #[doc = ""]
            pub fn order(
                mut self,
                value: crate::resources::comment_threads::params::ListOrder,
            ) -> Self {
                self.order = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Limits the returned comment threads to those matching the specified\nkey words. Not compatible with the 'id' filter."]
            pub fn search_terms(mut self, value: impl Into<String>) -> Self {
                self.search_terms = Some(value.into());
                self
            }
            #[doc = "The requested text format for the returned comments."]
            pub fn text_format(
                mut self,
                value: crate::resources::comment_threads::params::ListTextFormat,
            ) -> Self {
                self.text_format = Some(value);
                self
            }
            #[doc = "Returns the comment threads of the specified video."]
            pub fn video_id(mut self, value: impl Into<String>) -> Self {
                self.video_id = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CommentThread> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::CommentThread> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentThreadListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentThreadListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentThreadListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentThreadListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/commentThreads");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[(
                    "allThreadsRelatedToChannelId",
                    &self.all_threads_related_to_channel_id,
                )]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("moderationStatus", &self.moderation_status)]);
                let req = req.query(&[("order", &self.order)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("searchTerms", &self.search_terms)]);
                let req = req.query(&[("textFormat", &self.text_format)]);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CommentThreadsActions::update()](struct.CommentThreadsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::CommentThread,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentThread, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/commentThreads");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod comments {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListTextFormat {
                Html,
                PlainText,
                TextFormatUnspecified,
            }
            impl ListTextFormat {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListTextFormat::Html => "html",
                        ListTextFormat::PlainText => "plainText",
                        ListTextFormat::TextFormatUnspecified => "textFormatUnspecified",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListTextFormat {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListTextFormat {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListTextFormat, ()> {
                    Ok(match s {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        "textFormatUnspecified" => ListTextFormat::TextFormatUnspecified,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListTextFormat {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListTextFormat {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListTextFormat {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "html" => ListTextFormat::Html,
                        "plainText" => ListTextFormat::PlainText,
                        "textFormatUnspecified" => ListTextFormat::TextFormatUnspecified,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListTextFormat {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListTextFormat {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum SetModerationStatusModerationStatus {
                HeldForReview,
                LikelySpam,
                Published,
                Rejected,
            }
            impl SetModerationStatusModerationStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        SetModerationStatusModerationStatus::HeldForReview => "heldForReview",
                        SetModerationStatusModerationStatus::LikelySpam => "likelySpam",
                        SetModerationStatusModerationStatus::Published => "published",
                        SetModerationStatusModerationStatus::Rejected => "rejected",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for SetModerationStatusModerationStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for SetModerationStatusModerationStatus {
                type Err = ();
                fn from_str(
                    s: &str,
                ) -> ::std::result::Result<SetModerationStatusModerationStatus, ()>
                {
                    Ok(match s {
                        "heldForReview" => SetModerationStatusModerationStatus::HeldForReview,
                        "likelySpam" => SetModerationStatusModerationStatus::LikelySpam,
                        "published" => SetModerationStatusModerationStatus::Published,
                        "rejected" => SetModerationStatusModerationStatus::Rejected,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for SetModerationStatusModerationStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for SetModerationStatusModerationStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for SetModerationStatusModerationStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "heldForReview" => SetModerationStatusModerationStatus::HeldForReview,
                        "likelySpam" => SetModerationStatusModerationStatus::LikelySpam,
                        "published" => SetModerationStatusModerationStatus::Published,
                        "rejected" => SetModerationStatusModerationStatus::Rejected,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for SetModerationStatusModerationStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for SetModerationStatusModerationStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct CommentsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> CommentsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::Comment,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    id: None,
                    max_results: None,
                    page_token: None,
                    parent_id: None,
                    text_format: None,
                }
            }
            #[doc = "Expresses the caller's opinion that one or more comments should be flagged\nas spam."]
            pub fn mark_as_spam(&self, id: impl Into<Vec<String>>) -> MarkAsSpamRequestBuilder {
                MarkAsSpamRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                }
            }
            #[doc = "Sets the moderation status of one or more comments."]
            pub fn set_moderation_status(
                &self,
                id: impl Into<Vec<String>>,
                moderation_status : crate :: resources :: comments :: params :: SetModerationStatusModerationStatus,
            ) -> SetModerationStatusRequestBuilder {
                SetModerationStatusRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    moderation_status,
                    ban_author: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::Comment,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [CommentsActions::delete()](struct.CommentsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/comments");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::insert()](struct.CommentsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Comment,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/comments");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::list()](struct.CommentsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            page_token: Option<String>,
            parent_id: Option<String>,
            text_format: Option<crate::resources::comments::params::ListTextFormat>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Returns the comments with the given IDs for One Platform."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Returns replies to the specified comment.\nNote, currently YouTube features only one level of replies (ie replies\nto top level comments). However replies to replies may be supported in\nthe future."]
            pub fn parent_id(mut self, value: impl Into<String>) -> Self {
                self.parent_id = Some(value.into());
                self
            }
            #[doc = "The requested text format for the returned comments."]
            pub fn text_format(
                mut self,
                value: crate::resources::comments::params::ListTextFormat,
            ) -> Self {
                self.text_format = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Comment> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Comment> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::CommentListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::CommentListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::CommentListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/comments");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("parentId", &self.parent_id)]);
                let req = req.query(&[("textFormat", &self.text_format)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [CommentsActions::mark_as_spam()](struct.CommentsActions.html#method.mark_as_spam)"]
        #[derive(Debug, Clone)]
        pub struct MarkAsSpamRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> MarkAsSpamRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/comments/markAsSpam");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::set_moderation_status()](struct.CommentsActions.html#method.set_moderation_status)"]
        #[derive(Debug, Clone)]
        pub struct SetModerationStatusRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: Vec<String>,
            moderation_status:
                crate::resources::comments::params::SetModerationStatusModerationStatus,
            ban_author: Option<bool>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> SetModerationStatusRequestBuilder<'a> {
            #[doc = "If set to true the author of the comment gets added to the ban list.\nThis means all future comments of the author will autmomatically be\nrejected.\nOnly valid in combination with STATUS_REJECTED."]
            pub fn ban_author(mut self, value: bool) -> Self {
                self.ban_author = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/comments/setModerationStatus");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("moderationStatus", &self.moderation_status)]);
                let req = req.query(&[("banAuthor", &self.ban_author)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [CommentsActions::update()](struct.CommentsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Comment,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Comment, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/comments");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod guide_categories {
        pub mod params {}
        pub struct GuideCategoriesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> GuideCategoriesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of guide categories."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    hl: None,
                    id: None,
                    region_code: None,
                }
            }
        }
        #[doc = "Created via [GuideCategoriesActions::list()](struct.GuideCategoriesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            hl: Option<String>,
            id: Option<Vec<String>>,
            region_code: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "Return the guide categories with the given IDs."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "Return all categories in the given region code."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::GuideCategoryListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::GuideCategoryListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/guideCategories");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod i_1_8n_languages {
        pub mod params {}
        pub struct I18NLanguagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> I18NLanguagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    hl: None,
                }
            }
        }
        #[doc = "Created via [I18NLanguagesActions::list()](struct.I18NLanguagesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            hl: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::I18NlanguageListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::I18NlanguageListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/i18nLanguages");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod i_1_8n_regions {
        pub mod params {}
        pub struct I18NRegionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> I18NRegionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    hl: None,
                }
            }
        }
        #[doc = "Created via [I18NRegionsActions::list()](struct.I18NRegionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            hl: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::I18NregionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::I18NregionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/i18nRegions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod live_broadcasts {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListBroadcastStatus {
                Active,
                All,
                BroadcastStatusFilterUnspecified,
                Completed,
                Upcoming,
            }
            impl ListBroadcastStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListBroadcastStatus::Active => "active",
                        ListBroadcastStatus::All => "all",
                        ListBroadcastStatus::BroadcastStatusFilterUnspecified => {
                            "broadcastStatusFilterUnspecified"
                        }
                        ListBroadcastStatus::Completed => "completed",
                        ListBroadcastStatus::Upcoming => "upcoming",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListBroadcastStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListBroadcastStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListBroadcastStatus, ()> {
                    Ok(match s {
                        "active" => ListBroadcastStatus::Active,
                        "all" => ListBroadcastStatus::All,
                        "broadcastStatusFilterUnspecified" => {
                            ListBroadcastStatus::BroadcastStatusFilterUnspecified
                        }
                        "completed" => ListBroadcastStatus::Completed,
                        "upcoming" => ListBroadcastStatus::Upcoming,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListBroadcastStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListBroadcastStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListBroadcastStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "active" => ListBroadcastStatus::Active,
                        "all" => ListBroadcastStatus::All,
                        "broadcastStatusFilterUnspecified" => {
                            ListBroadcastStatus::BroadcastStatusFilterUnspecified
                        }
                        "completed" => ListBroadcastStatus::Completed,
                        "upcoming" => ListBroadcastStatus::Upcoming,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListBroadcastStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListBroadcastStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListBroadcastType {
                All,
                BroadcastTypeFilterUnspecified,
                Event,
                Persistent,
            }
            impl ListBroadcastType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListBroadcastType::All => "all",
                        ListBroadcastType::BroadcastTypeFilterUnspecified => {
                            "broadcastTypeFilterUnspecified"
                        }
                        ListBroadcastType::Event => "event",
                        ListBroadcastType::Persistent => "persistent",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListBroadcastType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListBroadcastType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListBroadcastType, ()> {
                    Ok(match s {
                        "all" => ListBroadcastType::All,
                        "broadcastTypeFilterUnspecified" => {
                            ListBroadcastType::BroadcastTypeFilterUnspecified
                        }
                        "event" => ListBroadcastType::Event,
                        "persistent" => ListBroadcastType::Persistent,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListBroadcastType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListBroadcastType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListBroadcastType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "all" => ListBroadcastType::All,
                        "broadcastTypeFilterUnspecified" => {
                            ListBroadcastType::BroadcastTypeFilterUnspecified
                        }
                        "event" => ListBroadcastType::Event,
                        "persistent" => ListBroadcastType::Persistent,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListBroadcastType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListBroadcastType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum TransitionBroadcastStatus {
                Complete,
                Live,
                StatusUnspecified,
                Testing,
            }
            impl TransitionBroadcastStatus {
                pub fn as_str(self) -> &'static str {
                    match self {
                        TransitionBroadcastStatus::Complete => "complete",
                        TransitionBroadcastStatus::Live => "live",
                        TransitionBroadcastStatus::StatusUnspecified => "statusUnspecified",
                        TransitionBroadcastStatus::Testing => "testing",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for TransitionBroadcastStatus {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for TransitionBroadcastStatus {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<TransitionBroadcastStatus, ()> {
                    Ok(match s {
                        "complete" => TransitionBroadcastStatus::Complete,
                        "live" => TransitionBroadcastStatus::Live,
                        "statusUnspecified" => TransitionBroadcastStatus::StatusUnspecified,
                        "testing" => TransitionBroadcastStatus::Testing,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for TransitionBroadcastStatus {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for TransitionBroadcastStatus {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for TransitionBroadcastStatus {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "complete" => TransitionBroadcastStatus::Complete,
                        "live" => TransitionBroadcastStatus::Live,
                        "statusUnspecified" => TransitionBroadcastStatus::StatusUnspecified,
                        "testing" => TransitionBroadcastStatus::Testing,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for TransitionBroadcastStatus {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for TransitionBroadcastStatus {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct LiveBroadcastsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveBroadcastsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Bind a broadcast to a stream."]
            pub fn bind(
                &self,
                id: impl Into<String>,
                part: impl Into<Vec<String>>,
            ) -> BindRequestBuilder {
                BindRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    stream_id: None,
                }
            }
            #[doc = "Slate and recording control of the live broadcast.\nSupport actions: slate on/off, recording start/stop/pause/resume.\nDesign doc: goto/yt-api-liveBroadcast-control"]
            pub fn control(
                &self,
                id: impl Into<String>,
                part: impl Into<Vec<String>>,
            ) -> ControlRequestBuilder {
                ControlRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    part: part.into(),
                    display_slate: None,
                    offset_time_ms: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    walltime: None,
                }
            }
            #[doc = "Delete a given broadcast."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Inserts a new stream for the authenticated user."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveBroadcast,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Retrieve the list of broadcasts associated with the given channel."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    broadcast_status: None,
                    broadcast_type: None,
                    id: None,
                    max_results: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    page_token: None,
                }
            }
            #[doc = "Transition a broadcast to a given status."]
            pub fn transition(
                &self,
                id: impl Into<String>,
                broadcast_status : crate :: resources :: live_broadcasts :: params :: TransitionBroadcastStatus,
                part: impl Into<Vec<String>>,
            ) -> TransitionRequestBuilder {
                TransitionRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    broadcast_status,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Updates an existing broadcast for the authenticated user."]
            pub fn update(
                &self,
                request: crate::schemas::LiveBroadcast,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::bind()](struct.LiveBroadcastsActions.html#method.bind)"]
        #[derive(Debug, Clone)]
        pub struct BindRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            stream_id: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> BindRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "Stream to bind, if not set unbind the current one."]
            pub fn stream_id(mut self, value: impl Into<String>) -> Self {
                self.stream_id = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts/bind");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("streamId", &self.stream_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::control()](struct.LiveBroadcastsActions.html#method.control)"]
        #[derive(Debug, Clone)]
        pub struct ControlRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            part: Vec<String>,
            display_slate: Option<bool>,
            offset_time_ms: Option<u64>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            walltime: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ControlRequestBuilder<'a> {
            #[doc = "Whether display or hide slate."]
            pub fn display_slate(mut self, value: bool) -> Self {
                self.display_slate = Some(value);
                self
            }
            #[doc = "The exact time when the actions (e.g. slate on) are executed.\nIt is an offset from the first frame of the monitor stream.\nIf not set, it means \"now\" or ASAP.\nThis field should not be set if the monitor stream is disabled,\notherwise an error will be returned."]
            pub fn offset_time_ms(mut self, value: u64) -> Self {
                self.offset_time_ms = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The wall clock time at which the action should be executed.\nOnly one of offset_time_ms and walltime may be set at a time."]
            pub fn walltime(mut self, value: impl Into<String>) -> Self {
                self.walltime = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts/control");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("displaySlate", &self.display_slate)]);
                let req = req.query(&[("offsetTimeMs", &self.offset_time_ms)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("walltime", &self.walltime)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::delete()](struct.LiveBroadcastsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::insert()](struct.LiveBroadcastsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveBroadcast,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::list()](struct.LiveBroadcastsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            broadcast_status:
                Option<crate::resources::live_broadcasts::params::ListBroadcastStatus>,
            broadcast_type: Option<crate::resources::live_broadcasts::params::ListBroadcastType>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return broadcasts with a certain status, e.g. active broadcasts."]
            pub fn broadcast_status(
                mut self,
                value: crate::resources::live_broadcasts::params::ListBroadcastStatus,
            ) -> Self {
                self.broadcast_status = Some(value);
                self
            }
            #[doc = "Return only broadcasts with the selected type."]
            pub fn broadcast_type(
                mut self,
                value: crate::resources::live_broadcasts::params::ListBroadcastType,
            ) -> Self {
                self.broadcast_type = Some(value);
                self
            }
            #[doc = "Return broadcasts with the given ids from Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = ""]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveBroadcast> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveBroadcast> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveBroadcastListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveBroadcastListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcastListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcastListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("broadcastStatus", &self.broadcast_status)]);
                let req = req.query(&[("broadcastType", &self.broadcast_type)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::transition()](struct.LiveBroadcastsActions.html#method.transition)"]
        #[derive(Debug, Clone)]
        pub struct TransitionRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            broadcast_status: crate::resources::live_broadcasts::params::TransitionBroadcastStatus,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> TransitionRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts/transition");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("broadcastStatus", &self.broadcast_status)]);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveBroadcastsActions::update()](struct.LiveBroadcastsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveBroadcast,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveBroadcast, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveBroadcasts");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod live_chat_bans {
        pub mod params {}
        pub struct LiveChatBansActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveChatBansActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a chat ban."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveChatBan,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [LiveChatBansActions::delete()](struct.LiveChatBansActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/bans");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatBansActions::insert()](struct.LiveChatBansActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveChatBan,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatBan, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatBan, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/bans");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod live_chat_messages {
        pub mod params {}
        pub struct LiveChatMessagesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveChatMessagesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a chat message."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveChatMessage,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(
                &self,
                live_chat_id: impl Into<String>,
                part: impl Into<Vec<String>>,
            ) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    live_chat_id: live_chat_id.into(),
                    part: part.into(),
                    hl: None,
                    max_results: None,
                    page_token: None,
                    profile_image_size: None,
                }
            }
        }
        #[doc = "Created via [LiveChatMessagesActions::delete()](struct.LiveChatMessagesActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/messages");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatMessagesActions::insert()](struct.LiveChatMessagesActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveChatMessage,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessage, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessage, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/messages");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatMessagesActions::list()](struct.LiveChatMessagesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            live_chat_id: String,
            part: Vec<String>,
            hl: Option<String>,
            max_results: Option<u32>,
            page_token: Option<String>,
            profile_image_size: Option<u32>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Specifies the localization language in which the system messages\nshould be returned."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> property identify other pages that could be\nretrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Specifies the size of the profile image that should be\nreturned for each user."]
            pub fn profile_image_size(mut self, value: u32) -> Self {
                self.profile_image_size = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatMessage> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatMessage> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatMessageListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatMessageListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessageListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatMessageListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/messages");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("liveChatId", &self.live_chat_id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("profileImageSize", &self.profile_image_size)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod live_chat_moderators {
        pub mod params {}
        pub struct LiveChatModeratorsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveChatModeratorsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a chat moderator."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveChatModerator,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(
                &self,
                live_chat_id: impl Into<String>,
                part: impl Into<Vec<String>>,
            ) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    live_chat_id: live_chat_id.into(),
                    part: part.into(),
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [LiveChatModeratorsActions::delete()](struct.LiveChatModeratorsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/moderators");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatModeratorsActions::insert()](struct.LiveChatModeratorsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveChatModerator,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModerator, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModerator, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/moderators");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveChatModeratorsActions::list()](struct.LiveChatModeratorsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            live_chat_id: String,
            part: Vec<String>,
            max_results: Option<u32>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatModerator> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveChatModerator> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatModeratorListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveChatModeratorListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModeratorListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveChatModeratorListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveChat/moderators");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("liveChatId", &self.live_chat_id)]);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod live_streams {
        pub mod params {}
        pub struct LiveStreamsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> LiveStreamsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes an existing stream for the authenticated user."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Inserts a new stream for the authenticated user."]
            pub fn insert(
                &self,
                request: crate::schemas::LiveStream,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Retrieve the list of streams associated with the given channel. --"]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    id: None,
                    max_results: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    page_token: None,
                }
            }
            #[doc = "Updates an existing stream for the authenticated user."]
            pub fn update(
                &self,
                request: crate::schemas::LiveStream,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
        }
        #[doc = "Created via [LiveStreamsActions::delete()](struct.LiveStreamsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveStreams");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveStreamsActions::insert()](struct.LiveStreamsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveStream,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveStreams");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [LiveStreamsActions::list()](struct.LiveStreamsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return LiveStreams with the given ids from Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = ""]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveStream> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::LiveStream> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveStreamListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::LiveStreamListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveStreamListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveStreamListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveStreams");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [LiveStreamsActions::update()](struct.LiveStreamsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::LiveStream,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::LiveStream, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/liveStreams");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod members {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListMode {
                AllCurrent,
                ListMembersModeUnknown,
                Updates,
            }
            impl ListMode {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListMode::AllCurrent => "all_current",
                        ListMode::ListMembersModeUnknown => "listMembersModeUnknown",
                        ListMode::Updates => "updates",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListMode {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListMode {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListMode, ()> {
                    Ok(match s {
                        "all_current" => ListMode::AllCurrent,
                        "listMembersModeUnknown" => ListMode::ListMembersModeUnknown,
                        "updates" => ListMode::Updates,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListMode {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListMode {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListMode {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "all_current" => ListMode::AllCurrent,
                        "listMembersModeUnknown" => ListMode::ListMembersModeUnknown,
                        "updates" => ListMode::Updates,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListMode {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListMode {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct MembersActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MembersActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of members that match the request criteria for a channel."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    filter_by_member_channel_id: None,
                    has_access_to_level: None,
                    max_results: None,
                    mode: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [MembersActions::list()](struct.MembersActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            filter_by_member_channel_id: Option<String>,
            has_access_to_level: Option<String>,
            max_results: Option<u32>,
            mode: Option<crate::resources::members::params::ListMode>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Comma separated list of channel IDs. Only data about members that are part\nof this list will be included in the response."]
            pub fn filter_by_member_channel_id(mut self, value: impl Into<String>) -> Self {
                self.filter_by_member_channel_id = Some(value.into());
                self
            }
            #[doc = "Filter members in the results set to the ones that have access to a level."]
            pub fn has_access_to_level(mut self, value: impl Into<String>) -> Self {
                self.has_access_to_level = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Parameter that specifies which channel members to return."]
            pub fn mode(mut self, value: crate::resources::members::params::ListMode) -> Self {
                self.mode = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Member> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Member> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::MemberListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::MemberListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MemberListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MemberListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/members");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("filterByMemberChannelId", &self.filter_by_member_channel_id)]);
                let req = req.query(&[("hasAccessToLevel", &self.has_access_to_level)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mode", &self.mode)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod memberships_levels {
        pub mod params {}
        pub struct MembershipsLevelsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> MembershipsLevelsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of all pricing levels offered by a creator to the fans."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
        }
        #[doc = "Created via [MembershipsLevelsActions::list()](struct.MembershipsLevelsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::MembershipsLevelListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::MembershipsLevelListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/membershipsLevels");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod playlist_items {
        pub mod params {}
        pub struct PlaylistItemsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlaylistItemsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::PlaylistItem,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    id: None,
                    max_results: None,
                    on_behalf_of_content_owner: None,
                    page_token: None,
                    playlist_id: None,
                    video_id: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::PlaylistItem,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [PlaylistItemsActions::delete()](struct.PlaylistItemsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlistItems");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistItemsActions::insert()](struct.PlaylistItemsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlaylistItem,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlistItems");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistItemsActions::list()](struct.PlaylistItemsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            on_behalf_of_content_owner: Option<String>,
            page_token: Option<String>,
            playlist_id: Option<String>,
            video_id: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Return the playlist items within the given playlist."]
            pub fn playlist_id(mut self, value: impl Into<String>) -> Self {
                self.playlist_id = Some(value.into());
                self
            }
            #[doc = "Return the playlist items associated with the given video ID."]
            pub fn video_id(mut self, value: impl Into<String>) -> Self {
                self.video_id = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlaylistItem> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::PlaylistItem> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistItemListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistItemListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItemListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItemListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlistItems");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("playlistId", &self.playlist_id)]);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlaylistItemsActions::update()](struct.PlaylistItemsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::PlaylistItem,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistItem, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlistItems");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod playlists {
        pub mod params {}
        pub struct PlaylistsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> PlaylistsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::Playlist,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    channel_id: None,
                    hl: None,
                    id: None,
                    max_results: None,
                    mine: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    page_token: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::Playlist,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [PlaylistsActions::delete()](struct.PlaylistsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlists");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistsActions::insert()](struct.PlaylistsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Playlist,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlists");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [PlaylistsActions::list()](struct.PlaylistsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            channel_id: Option<String>,
            hl: Option<String>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            mine: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return the playlists owned by the specified channel ID."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Returen content in specified language"]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "Return the playlists with the given IDs for Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Return the playlists owned by the authenticated user."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Playlist> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Playlist> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::PlaylistListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::PlaylistListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::PlaylistListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlists");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [PlaylistsActions::update()](struct.PlaylistsActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Playlist,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Playlist, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/playlists");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod search {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListChannelType {
                Any,
                ChannelTypeUnspecified,
                Show,
            }
            impl ListChannelType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListChannelType::Any => "any",
                        ListChannelType::ChannelTypeUnspecified => "channelTypeUnspecified",
                        ListChannelType::Show => "show",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListChannelType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListChannelType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListChannelType, ()> {
                    Ok(match s {
                        "any" => ListChannelType::Any,
                        "channelTypeUnspecified" => ListChannelType::ChannelTypeUnspecified,
                        "show" => ListChannelType::Show,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListChannelType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListChannelType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListChannelType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListChannelType::Any,
                        "channelTypeUnspecified" => ListChannelType::ChannelTypeUnspecified,
                        "show" => ListChannelType::Show,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListChannelType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListChannelType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListEventType {
                Completed,
                Live,
                None,
                Upcoming,
            }
            impl ListEventType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListEventType::Completed => "completed",
                        ListEventType::Live => "live",
                        ListEventType::None => "none",
                        ListEventType::Upcoming => "upcoming",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListEventType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListEventType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListEventType, ()> {
                    Ok(match s {
                        "completed" => ListEventType::Completed,
                        "live" => ListEventType::Live,
                        "none" => ListEventType::None,
                        "upcoming" => ListEventType::Upcoming,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListEventType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListEventType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListEventType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "completed" => ListEventType::Completed,
                        "live" => ListEventType::Live,
                        "none" => ListEventType::None,
                        "upcoming" => ListEventType::Upcoming,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListEventType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListEventType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListOrder {
                Date,
                Rating,
                Relevance,
                SearchSortUnspecified,
                Title,
                VideoCount,
                ViewCount,
            }
            impl ListOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListOrder::Date => "date",
                        ListOrder::Rating => "rating",
                        ListOrder::Relevance => "relevance",
                        ListOrder::SearchSortUnspecified => "searchSortUnspecified",
                        ListOrder::Title => "title",
                        ListOrder::VideoCount => "videoCount",
                        ListOrder::ViewCount => "viewCount",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListOrder, ()> {
                    Ok(match s {
                        "date" => ListOrder::Date,
                        "rating" => ListOrder::Rating,
                        "relevance" => ListOrder::Relevance,
                        "searchSortUnspecified" => ListOrder::SearchSortUnspecified,
                        "title" => ListOrder::Title,
                        "videoCount" => ListOrder::VideoCount,
                        "viewCount" => ListOrder::ViewCount,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "date" => ListOrder::Date,
                        "rating" => ListOrder::Rating,
                        "relevance" => ListOrder::Relevance,
                        "searchSortUnspecified" => ListOrder::SearchSortUnspecified,
                        "title" => ListOrder::Title,
                        "videoCount" => ListOrder::VideoCount,
                        "viewCount" => ListOrder::ViewCount,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListSafeSearch {
                Moderate,
                None,
                SafeSearchSettingUnspecified,
                Strict,
            }
            impl ListSafeSearch {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListSafeSearch::Moderate => "moderate",
                        ListSafeSearch::None => "none",
                        ListSafeSearch::SafeSearchSettingUnspecified => {
                            "safeSearchSettingUnspecified"
                        }
                        ListSafeSearch::Strict => "strict",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListSafeSearch {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListSafeSearch {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListSafeSearch, ()> {
                    Ok(match s {
                        "moderate" => ListSafeSearch::Moderate,
                        "none" => ListSafeSearch::None,
                        "safeSearchSettingUnspecified" => {
                            ListSafeSearch::SafeSearchSettingUnspecified
                        }
                        "strict" => ListSafeSearch::Strict,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListSafeSearch {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListSafeSearch {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListSafeSearch {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "moderate" => ListSafeSearch::Moderate,
                        "none" => ListSafeSearch::None,
                        "safeSearchSettingUnspecified" => {
                            ListSafeSearch::SafeSearchSettingUnspecified
                        }
                        "strict" => ListSafeSearch::Strict,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListSafeSearch {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListSafeSearch {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoCaption {
                Any,
                ClosedCaption,
                None,
                VideoCaptionUnspecified,
            }
            impl ListVideoCaption {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoCaption::Any => "any",
                        ListVideoCaption::ClosedCaption => "closedCaption",
                        ListVideoCaption::None => "none",
                        ListVideoCaption::VideoCaptionUnspecified => "videoCaptionUnspecified",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoCaption {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoCaption {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoCaption, ()> {
                    Ok(match s {
                        "any" => ListVideoCaption::Any,
                        "closedCaption" => ListVideoCaption::ClosedCaption,
                        "none" => ListVideoCaption::None,
                        "videoCaptionUnspecified" => ListVideoCaption::VideoCaptionUnspecified,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoCaption {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoCaption {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoCaption {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoCaption::Any,
                        "closedCaption" => ListVideoCaption::ClosedCaption,
                        "none" => ListVideoCaption::None,
                        "videoCaptionUnspecified" => ListVideoCaption::VideoCaptionUnspecified,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoCaption {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoCaption {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoDefinition {
                Any,
                High,
                Standard,
            }
            impl ListVideoDefinition {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoDefinition::Any => "any",
                        ListVideoDefinition::High => "high",
                        ListVideoDefinition::Standard => "standard",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoDefinition {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoDefinition {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoDefinition, ()> {
                    Ok(match s {
                        "any" => ListVideoDefinition::Any,
                        "high" => ListVideoDefinition::High,
                        "standard" => ListVideoDefinition::Standard,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoDefinition {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoDefinition {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoDefinition {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoDefinition::Any,
                        "high" => ListVideoDefinition::High,
                        "standard" => ListVideoDefinition::Standard,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoDefinition {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoDefinition {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoDimension {
                Any,
                _2D,
                _3D,
            }
            impl ListVideoDimension {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoDimension::Any => "any",
                        ListVideoDimension::_2D => "2d",
                        ListVideoDimension::_3D => "3d",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoDimension {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoDimension {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoDimension, ()> {
                    Ok(match s {
                        "any" => ListVideoDimension::Any,
                        "2d" => ListVideoDimension::_2D,
                        "3d" => ListVideoDimension::_3D,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoDimension {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoDimension {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoDimension {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoDimension::Any,
                        "2d" => ListVideoDimension::_2D,
                        "3d" => ListVideoDimension::_3D,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoDimension {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoDimension {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoDuration {
                Any,
                Long,
                Medium,
                Short,
                VideoDurationUnspecified,
            }
            impl ListVideoDuration {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoDuration::Any => "any",
                        ListVideoDuration::Long => "long",
                        ListVideoDuration::Medium => "medium",
                        ListVideoDuration::Short => "short",
                        ListVideoDuration::VideoDurationUnspecified => "videoDurationUnspecified",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoDuration {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoDuration {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoDuration, ()> {
                    Ok(match s {
                        "any" => ListVideoDuration::Any,
                        "long" => ListVideoDuration::Long,
                        "medium" => ListVideoDuration::Medium,
                        "short" => ListVideoDuration::Short,
                        "videoDurationUnspecified" => ListVideoDuration::VideoDurationUnspecified,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoDuration {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoDuration {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoDuration {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoDuration::Any,
                        "long" => ListVideoDuration::Long,
                        "medium" => ListVideoDuration::Medium,
                        "short" => ListVideoDuration::Short,
                        "videoDurationUnspecified" => ListVideoDuration::VideoDurationUnspecified,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoDuration {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoDuration {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoEmbeddable {
                Any,
                True,
                VideoEmbeddableUnspecified,
            }
            impl ListVideoEmbeddable {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoEmbeddable::Any => "any",
                        ListVideoEmbeddable::True => "true",
                        ListVideoEmbeddable::VideoEmbeddableUnspecified => {
                            "videoEmbeddableUnspecified"
                        }
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoEmbeddable {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoEmbeddable {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoEmbeddable, ()> {
                    Ok(match s {
                        "any" => ListVideoEmbeddable::Any,
                        "true" => ListVideoEmbeddable::True,
                        "videoEmbeddableUnspecified" => {
                            ListVideoEmbeddable::VideoEmbeddableUnspecified
                        }
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoEmbeddable {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoEmbeddable {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoEmbeddable {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoEmbeddable::Any,
                        "true" => ListVideoEmbeddable::True,
                        "videoEmbeddableUnspecified" => {
                            ListVideoEmbeddable::VideoEmbeddableUnspecified
                        }
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoEmbeddable {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoEmbeddable {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoLicense {
                Any,
                CreativeCommon,
                Youtube,
            }
            impl ListVideoLicense {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoLicense::Any => "any",
                        ListVideoLicense::CreativeCommon => "creativeCommon",
                        ListVideoLicense::Youtube => "youtube",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoLicense {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoLicense {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoLicense, ()> {
                    Ok(match s {
                        "any" => ListVideoLicense::Any,
                        "creativeCommon" => ListVideoLicense::CreativeCommon,
                        "youtube" => ListVideoLicense::Youtube,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoLicense {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoLicense {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoLicense {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoLicense::Any,
                        "creativeCommon" => ListVideoLicense::CreativeCommon,
                        "youtube" => ListVideoLicense::Youtube,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoLicense {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoLicense {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoSyndicated {
                Any,
                True,
                VideoSyndicatedUnspecified,
            }
            impl ListVideoSyndicated {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoSyndicated::Any => "any",
                        ListVideoSyndicated::True => "true",
                        ListVideoSyndicated::VideoSyndicatedUnspecified => {
                            "videoSyndicatedUnspecified"
                        }
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoSyndicated {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoSyndicated {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoSyndicated, ()> {
                    Ok(match s {
                        "any" => ListVideoSyndicated::Any,
                        "true" => ListVideoSyndicated::True,
                        "videoSyndicatedUnspecified" => {
                            ListVideoSyndicated::VideoSyndicatedUnspecified
                        }
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoSyndicated {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoSyndicated {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoSyndicated {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoSyndicated::Any,
                        "true" => ListVideoSyndicated::True,
                        "videoSyndicatedUnspecified" => {
                            ListVideoSyndicated::VideoSyndicatedUnspecified
                        }
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoSyndicated {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoSyndicated {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListVideoType {
                Any,
                Episode,
                Movie,
                VideoTypeUnspecified,
            }
            impl ListVideoType {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListVideoType::Any => "any",
                        ListVideoType::Episode => "episode",
                        ListVideoType::Movie => "movie",
                        ListVideoType::VideoTypeUnspecified => "videoTypeUnspecified",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListVideoType {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListVideoType {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListVideoType, ()> {
                    Ok(match s {
                        "any" => ListVideoType::Any,
                        "episode" => ListVideoType::Episode,
                        "movie" => ListVideoType::Movie,
                        "videoTypeUnspecified" => ListVideoType::VideoTypeUnspecified,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListVideoType {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListVideoType {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListVideoType {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "any" => ListVideoType::Any,
                        "episode" => ListVideoType::Episode,
                        "movie" => ListVideoType::Movie,
                        "videoTypeUnspecified" => ListVideoType::VideoTypeUnspecified,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListVideoType {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListVideoType {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SearchActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SearchActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of search resources"]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    channel_id: None,
                    channel_type: None,
                    event_type: None,
                    for_content_owner: None,
                    for_developer: None,
                    for_mine: None,
                    location: None,
                    location_radius: None,
                    max_results: None,
                    on_behalf_of_content_owner: None,
                    order: None,
                    page_token: None,
                    published_after: None,
                    published_before: None,
                    q: None,
                    r#type: None,
                    region_code: None,
                    related_to_video_id: None,
                    relevance_language: None,
                    safe_search: None,
                    topic_id: None,
                    video_caption: None,
                    video_category_id: None,
                    video_definition: None,
                    video_dimension: None,
                    video_duration: None,
                    video_embeddable: None,
                    video_license: None,
                    video_syndicated: None,
                    video_type: None,
                }
            }
        }
        #[doc = "Created via [SearchActions::list()](struct.SearchActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            channel_id: Option<String>,
            channel_type: Option<crate::resources::search::params::ListChannelType>,
            event_type: Option<crate::resources::search::params::ListEventType>,
            for_content_owner: Option<bool>,
            for_developer: Option<bool>,
            for_mine: Option<bool>,
            location: Option<String>,
            location_radius: Option<String>,
            max_results: Option<u32>,
            on_behalf_of_content_owner: Option<String>,
            order: Option<crate::resources::search::params::ListOrder>,
            page_token: Option<String>,
            published_after: Option<String>,
            published_before: Option<String>,
            q: Option<String>,
            r#type: Option<Vec<String>>,
            region_code: Option<String>,
            related_to_video_id: Option<String>,
            relevance_language: Option<String>,
            safe_search: Option<crate::resources::search::params::ListSafeSearch>,
            topic_id: Option<String>,
            video_caption: Option<crate::resources::search::params::ListVideoCaption>,
            video_category_id: Option<String>,
            video_definition: Option<crate::resources::search::params::ListVideoDefinition>,
            video_dimension: Option<crate::resources::search::params::ListVideoDimension>,
            video_duration: Option<crate::resources::search::params::ListVideoDuration>,
            video_embeddable: Option<crate::resources::search::params::ListVideoEmbeddable>,
            video_license: Option<crate::resources::search::params::ListVideoLicense>,
            video_syndicated: Option<crate::resources::search::params::ListVideoSyndicated>,
            video_type: Option<crate::resources::search::params::ListVideoType>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Filter on resources belonging to this channelId."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Add a filter on the channel search."]
            pub fn channel_type(
                mut self,
                value: crate::resources::search::params::ListChannelType,
            ) -> Self {
                self.channel_type = Some(value);
                self
            }
            #[doc = "Filter on the livestream status of the videos."]
            pub fn event_type(
                mut self,
                value: crate::resources::search::params::ListEventType,
            ) -> Self {
                self.event_type = Some(value);
                self
            }
            #[doc = "Search owned by a content owner."]
            pub fn for_content_owner(mut self, value: bool) -> Self {
                self.for_content_owner = Some(value);
                self
            }
            #[doc = "Restrict the search to only retrieve videos uploaded using the project id\nof the authenticated user."]
            pub fn for_developer(mut self, value: bool) -> Self {
                self.for_developer = Some(value);
                self
            }
            #[doc = "Search for the private videos of the authenticated user."]
            pub fn for_mine(mut self, value: bool) -> Self {
                self.for_mine = Some(value);
                self
            }
            #[doc = "Filter on location of the video"]
            pub fn location(mut self, value: impl Into<String>) -> Self {
                self.location = Some(value.into());
                self
            }
            #[doc = "Filter on distance from the location (specified above)."]
            pub fn location_radius(mut self, value: impl Into<String>) -> Self {
                self.location_radius = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "Sort order of the results."]
            pub fn order(mut self, value: crate::resources::search::params::ListOrder) -> Self {
                self.order = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Filter on resources published after this date."]
            pub fn published_after(mut self, value: impl Into<String>) -> Self {
                self.published_after = Some(value.into());
                self
            }
            #[doc = "Filter on resources published before this date."]
            pub fn published_before(mut self, value: impl Into<String>) -> Self {
                self.published_before = Some(value.into());
                self
            }
            #[doc = "Textual search terms to match."]
            pub fn q(mut self, value: impl Into<String>) -> Self {
                self.q = Some(value.into());
                self
            }
            #[doc = "Restrict results to a particular set of resource types from One Platform."]
            pub fn r#type(mut self, value: impl Into<Vec<String>>) -> Self {
                self.r#type = Some(value.into());
                self
            }
            #[doc = "Display the content as seen by viewers in this country."]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "Search related to a resource."]
            pub fn related_to_video_id(mut self, value: impl Into<String>) -> Self {
                self.related_to_video_id = Some(value.into());
                self
            }
            #[doc = "Return results relevant to this language."]
            pub fn relevance_language(mut self, value: impl Into<String>) -> Self {
                self.relevance_language = Some(value.into());
                self
            }
            #[doc = "Indicates whether the search results should include restricted content as\nwell as standard content."]
            pub fn safe_search(
                mut self,
                value: crate::resources::search::params::ListSafeSearch,
            ) -> Self {
                self.safe_search = Some(value);
                self
            }
            #[doc = "Restrict results to a particular topic."]
            pub fn topic_id(mut self, value: impl Into<String>) -> Self {
                self.topic_id = Some(value.into());
                self
            }
            #[doc = "Filter on the presence of captions on the videos."]
            pub fn video_caption(
                mut self,
                value: crate::resources::search::params::ListVideoCaption,
            ) -> Self {
                self.video_caption = Some(value);
                self
            }
            #[doc = "Filter on videos in a specific category."]
            pub fn video_category_id(mut self, value: impl Into<String>) -> Self {
                self.video_category_id = Some(value.into());
                self
            }
            #[doc = "Filter on the definition of the videos."]
            pub fn video_definition(
                mut self,
                value: crate::resources::search::params::ListVideoDefinition,
            ) -> Self {
                self.video_definition = Some(value);
                self
            }
            #[doc = "Filter on 3d videos."]
            pub fn video_dimension(
                mut self,
                value: crate::resources::search::params::ListVideoDimension,
            ) -> Self {
                self.video_dimension = Some(value);
                self
            }
            #[doc = "Filter on the duration of the videos."]
            pub fn video_duration(
                mut self,
                value: crate::resources::search::params::ListVideoDuration,
            ) -> Self {
                self.video_duration = Some(value);
                self
            }
            #[doc = "Filter on embeddable videos."]
            pub fn video_embeddable(
                mut self,
                value: crate::resources::search::params::ListVideoEmbeddable,
            ) -> Self {
                self.video_embeddable = Some(value);
                self
            }
            #[doc = "Filter on the license of the videos."]
            pub fn video_license(
                mut self,
                value: crate::resources::search::params::ListVideoLicense,
            ) -> Self {
                self.video_license = Some(value);
                self
            }
            #[doc = "Filter on syndicated videos."]
            pub fn video_syndicated(
                mut self,
                value: crate::resources::search::params::ListVideoSyndicated,
            ) -> Self {
                self.video_syndicated = Some(value);
                self
            }
            #[doc = "Filter on videos of a specific type."]
            pub fn video_type(
                mut self,
                value: crate::resources::search::params::ListVideoType,
            ) -> Self {
                self.video_type = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SearchResult> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SearchResult> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SearchListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SearchListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SearchListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SearchListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/search");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("channelType", &self.channel_type)]);
                let req = req.query(&[("eventType", &self.event_type)]);
                let req = req.query(&[("forContentOwner", &self.for_content_owner)]);
                let req = req.query(&[("forDeveloper", &self.for_developer)]);
                let req = req.query(&[("forMine", &self.for_mine)]);
                let req = req.query(&[("location", &self.location)]);
                let req = req.query(&[("locationRadius", &self.location_radius)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("order", &self.order)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("publishedAfter", &self.published_after)]);
                let req = req.query(&[("publishedBefore", &self.published_before)]);
                let req = req.query(&[("q", &self.q)]);
                let req = req.query(&[("type", &self.r#type)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("relatedToVideoId", &self.related_to_video_id)]);
                let req = req.query(&[("relevanceLanguage", &self.relevance_language)]);
                let req = req.query(&[("safeSearch", &self.safe_search)]);
                let req = req.query(&[("topicId", &self.topic_id)]);
                let req = req.query(&[("videoCaption", &self.video_caption)]);
                let req = req.query(&[("videoCategoryId", &self.video_category_id)]);
                let req = req.query(&[("videoDefinition", &self.video_definition)]);
                let req = req.query(&[("videoDimension", &self.video_dimension)]);
                let req = req.query(&[("videoDuration", &self.video_duration)]);
                let req = req.query(&[("videoEmbeddable", &self.video_embeddable)]);
                let req = req.query(&[("videoLicense", &self.video_license)]);
                let req = req.query(&[("videoSyndicated", &self.video_syndicated)]);
                let req = req.query(&[("videoType", &self.video_type)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod sponsors {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListFilter {
                All,
                Newest,
                SponsorFilterUnknown,
            }
            impl ListFilter {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListFilter::All => "all",
                        ListFilter::Newest => "newest",
                        ListFilter::SponsorFilterUnknown => "sponsorFilterUnknown",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListFilter {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListFilter {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListFilter, ()> {
                    Ok(match s {
                        "all" => ListFilter::All,
                        "newest" => ListFilter::Newest,
                        "sponsorFilterUnknown" => ListFilter::SponsorFilterUnknown,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListFilter {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListFilter {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListFilter {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "all" => ListFilter::All,
                        "newest" => ListFilter::Newest,
                        "sponsorFilterUnknown" => ListFilter::SponsorFilterUnknown,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListFilter {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListFilter {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SponsorsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SponsorsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of sponsors that match the request criteria for a\nchannel."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    filter: None,
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [SponsorsActions::list()](struct.SponsorsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            filter: Option<crate::resources::sponsors::params::ListFilter>,
            max_results: Option<u32>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Parameter that specifies which channel sponsors to return."]
            pub fn filter(mut self, value: crate::resources::sponsors::params::ListFilter) -> Self {
                self.filter = Some(value);
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Sponsor> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Sponsor> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SponsorListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SponsorListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SponsorListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SponsorListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/sponsors");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("filter", &self.filter)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod subscriptions {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListOrder {
                Alphabetical,
                Relevance,
                SubscriptionOrderUnspecified,
                Unread,
            }
            impl ListOrder {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListOrder::Alphabetical => "alphabetical",
                        ListOrder::Relevance => "relevance",
                        ListOrder::SubscriptionOrderUnspecified => "subscriptionOrderUnspecified",
                        ListOrder::Unread => "unread",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListOrder {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListOrder {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListOrder, ()> {
                    Ok(match s {
                        "alphabetical" => ListOrder::Alphabetical,
                        "relevance" => ListOrder::Relevance,
                        "subscriptionOrderUnspecified" => ListOrder::SubscriptionOrderUnspecified,
                        "unread" => ListOrder::Unread,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListOrder {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListOrder {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListOrder {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "alphabetical" => ListOrder::Alphabetical,
                        "relevance" => ListOrder::Relevance,
                        "subscriptionOrderUnspecified" => ListOrder::SubscriptionOrderUnspecified,
                        "unread" => ListOrder::Unread,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListOrder {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListOrder {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct SubscriptionsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SubscriptionsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::Subscription,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    channel_id: None,
                    for_channel_id: None,
                    id: None,
                    max_results: None,
                    mine: None,
                    my_recent_subscribers: None,
                    my_subscribers: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    order: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [SubscriptionsActions::delete()](struct.SubscriptionsActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/subscriptions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubscriptionsActions::insert()](struct.SubscriptionsActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Subscription,
            part: Vec<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Subscription, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::Subscription, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/subscriptions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [SubscriptionsActions::list()](struct.SubscriptionsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            channel_id: Option<String>,
            for_channel_id: Option<String>,
            id: Option<Vec<String>>,
            max_results: Option<u32>,
            mine: Option<bool>,
            my_recent_subscribers: Option<bool>,
            my_subscribers: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            order: Option<crate::resources::subscriptions::params::ListOrder>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return the subscriptions of the given channel owner."]
            pub fn channel_id(mut self, value: impl Into<String>) -> Self {
                self.channel_id = Some(value.into());
                self
            }
            #[doc = "Return the subscriptions to the subset of these channels that the\nauthenticated user is subscribed to."]
            pub fn for_channel_id(mut self, value: impl Into<String>) -> Self {
                self.for_channel_id = Some(value.into());
                self
            }
            #[doc = "Return the subscriptions with the given IDs for Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Flag for returning the subscriptions of the authenticated user."]
            pub fn mine(mut self, value: bool) -> Self {
                self.mine = Some(value);
                self
            }
            #[doc = ""]
            pub fn my_recent_subscribers(mut self, value: bool) -> Self {
                self.my_recent_subscribers = Some(value);
                self
            }
            #[doc = "Return the subscribers of the given channel owner."]
            pub fn my_subscribers(mut self, value: bool) -> Self {
                self.my_subscribers = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "The order of the returned subscriptions"]
            pub fn order(
                mut self,
                value: crate::resources::subscriptions::params::ListOrder,
            ) -> Self {
                self.order = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Subscription> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Subscription> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SubscriptionListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SubscriptionListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SubscriptionListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SubscriptionListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/subscriptions");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req = req.query(&[("forChannelId", &self.for_channel_id)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("mine", &self.mine)]);
                let req = req.query(&[("myRecentSubscribers", &self.my_recent_subscribers)]);
                let req = req.query(&[("mySubscribers", &self.my_subscribers)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("order", &self.order)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod super_chat_events {
        pub mod params {}
        pub struct SuperChatEventsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> SuperChatEventsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    hl: None,
                    max_results: None,
                    page_token: None,
                }
            }
        }
        #[doc = "Created via [SuperChatEventsActions::list()](struct.SuperChatEventsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            hl: Option<String>,
            max_results: Option<u32>,
            page_token: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return rendered funding amounts in specified language."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result set."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SuperChatEvent> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::SuperChatEvent> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SuperChatEventListResponse>
            {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::SuperChatEventListResponse>
            {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::SuperChatEventListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::SuperChatEventListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/superChatEvents");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
    }
    pub mod thumbnails {
        pub mod params {}
        pub struct ThumbnailsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> ThumbnailsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "As this is not an insert in a strict sense (it supports uploading/setting\nof a thumbnail for multiple videos, which doesn't result in creation of a\nsingle resource), I use a custom verb here."]
            pub fn set(&self, video_id: impl Into<String>) -> SetRequestBuilder {
                SetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    video_id: video_id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [ThumbnailsActions::set()](struct.ThumbnailsActions.html#method.set)"]
        #[derive(Debug, Clone)]
        pub struct SetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            video_id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> SetRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The actual\nCMS account that the user authenticates with must be linked to the\nspecified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/thumbnails/set");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::ThumbnailSetResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::ThumbnailSetResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/thumbnails/set");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("videoId", &self.video_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod video_abuse_report_reasons {
        pub mod params {}
        pub struct VideoAbuseReportReasonsActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideoAbuseReportReasonsActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    hl: None,
                }
            }
        }
        #[doc = "Created via [VideoAbuseReportReasonsActions::list()](struct.VideoAbuseReportReasonsActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            hl: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoAbuseReportReasonListResponse, crate::Error>
            {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoAbuseReportReasonListResponse, crate::Error>
            {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videoAbuseReportReasons");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod video_categories {
        pub mod params {}
        pub struct VideoCategoriesActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideoCategoriesActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    hl: None,
                    id: None,
                    region_code: None,
                }
            }
        }
        #[doc = "Created via [VideoCategoriesActions::list()](struct.VideoCategoriesActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            hl: Option<String>,
            id: Option<Vec<String>>,
            region_code: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = ""]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "Returns the video categories with the given IDs for Stubby or Apiary."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoCategoryListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoCategoryListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videoCategories");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod videos {
        pub mod params {
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListChart {
                ChartUnspecified,
                MostPopular,
            }
            impl ListChart {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListChart::ChartUnspecified => "chartUnspecified",
                        ListChart::MostPopular => "mostPopular",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListChart {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListChart {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListChart, ()> {
                    Ok(match s {
                        "chartUnspecified" => ListChart::ChartUnspecified,
                        "mostPopular" => ListChart::MostPopular,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListChart {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListChart {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListChart {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "chartUnspecified" => ListChart::ChartUnspecified,
                        "mostPopular" => ListChart::MostPopular,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListChart {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListChart {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum ListMyRating {
                Dislike,
                Like,
                None,
            }
            impl ListMyRating {
                pub fn as_str(self) -> &'static str {
                    match self {
                        ListMyRating::Dislike => "dislike",
                        ListMyRating::Like => "like",
                        ListMyRating::None => "none",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for ListMyRating {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for ListMyRating {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<ListMyRating, ()> {
                    Ok(match s {
                        "dislike" => ListMyRating::Dislike,
                        "like" => ListMyRating::Like,
                        "none" => ListMyRating::None,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for ListMyRating {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for ListMyRating {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for ListMyRating {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "dislike" => ListMyRating::Dislike,
                        "like" => ListMyRating::Like,
                        "none" => ListMyRating::None,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for ListMyRating {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for ListMyRating {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
            #[derive(Debug, Clone, PartialEq, Hash, PartialOrd, Ord, Eq, Copy)]
            pub enum RateRating {
                Dislike,
                Like,
                None,
            }
            impl RateRating {
                pub fn as_str(self) -> &'static str {
                    match self {
                        RateRating::Dislike => "dislike",
                        RateRating::Like => "like",
                        RateRating::None => "none",
                    }
                }
            }
            impl ::std::convert::AsRef<str> for RateRating {
                fn as_ref(&self) -> &str {
                    self.as_str()
                }
            }
            impl ::std::str::FromStr for RateRating {
                type Err = ();
                fn from_str(s: &str) -> ::std::result::Result<RateRating, ()> {
                    Ok(match s {
                        "dislike" => RateRating::Dislike,
                        "like" => RateRating::Like,
                        "none" => RateRating::None,
                        _ => return Err(()),
                    })
                }
            }
            impl ::std::fmt::Display for RateRating {
                fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.write_str(self.as_str())
                }
            }
            impl ::serde::Serialize for RateRating {
                fn serialize<S>(&self, serializer: S) -> ::std::result::Result<S::Ok, S::Error>
                where
                    S: ::serde::ser::Serializer,
                {
                    serializer.serialize_str(self.as_str())
                }
            }
            impl<'de> ::serde::Deserialize<'de> for RateRating {
                fn deserialize<D>(deserializer: D) -> ::std::result::Result<Self, D::Error>
                where
                    D: ::serde::de::Deserializer<'de>,
                {
                    let value: &'de str = <&str>::deserialize(deserializer)?;
                    Ok(match value {
                        "dislike" => RateRating::Dislike,
                        "like" => RateRating::Like,
                        "none" => RateRating::None,
                        _ => {
                            return Err(::serde::de::Error::custom(format!(
                                "invalid enum for #name: {}",
                                value
                            )))
                        }
                    })
                }
            }
            impl ::google_field_selector::FieldSelector for RateRating {
                fn fields() -> Vec<::google_field_selector::Field> {
                    Vec::new()
                }
            }
            impl ::google_field_selector::ToFieldType for RateRating {
                fn field_type() -> ::google_field_selector::FieldType {
                    ::google_field_selector::FieldType::Leaf
                }
            }
        }
        pub struct VideosActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> VideosActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Deletes a resource."]
            pub fn delete(&self, id: impl Into<String>) -> DeleteRequestBuilder {
                DeleteRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Retrieves the ratings that the authorized user gave to a list of specified\nvideos."]
            pub fn get_rating(&self, id: impl Into<Vec<String>>) -> GetRatingRequestBuilder {
                GetRatingRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Inserts a new resource into this collection."]
            pub fn insert(
                &self,
                request: crate::schemas::Video,
                part: impl Into<Vec<String>>,
            ) -> InsertRequestBuilder {
                InsertRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    auto_levels: None,
                    notify_subscribers: None,
                    on_behalf_of_content_owner: None,
                    on_behalf_of_content_owner_channel: None,
                    stabilize: None,
                }
            }
            #[doc = "Retrieves a list of resources, possibly filtered."]
            pub fn list(&self, part: impl Into<Vec<String>>) -> ListRequestBuilder {
                ListRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    chart: None,
                    hl: None,
                    id: None,
                    locale: None,
                    max_height: None,
                    max_results: None,
                    max_width: None,
                    my_rating: None,
                    on_behalf_of_content_owner: None,
                    page_token: None,
                    region_code: None,
                    video_category_id: None,
                }
            }
            #[doc = "Adds a like or dislike rating to a video or removes a rating from a video."]
            pub fn rate(
                &self,
                id: impl Into<String>,
                rating: crate::resources::videos::params::RateRating,
            ) -> RateRequestBuilder {
                RateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    id: id.into(),
                    rating,
                }
            }
            #[doc = "Report abuse for a video."]
            pub fn report_abuse(
                &self,
                request: crate::schemas::VideoAbuseReport,
            ) -> ReportAbuseRequestBuilder {
                ReportAbuseRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Updates an existing resource."]
            pub fn update(
                &self,
                request: crate::schemas::Video,
                part: impl Into<Vec<String>>,
            ) -> UpdateRequestBuilder {
                UpdateRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    part: part.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [VideosActions::delete()](struct.VideosActions.html#method.delete)"]
        #[derive(Debug, Clone)]
        pub struct DeleteRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> DeleteRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The actual\nCMS account that the user authenticates with must be linked to the\nspecified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::DELETE, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::get_rating()](struct.VideosActions.html#method.get_rating)"]
        #[derive(Debug, Clone)]
        pub struct GetRatingRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> GetRatingRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoRatingListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoRatingListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos/getRating");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("id", &self.id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::insert()](struct.VideosActions.html#method.insert)"]
        #[derive(Debug, Clone)]
        pub struct InsertRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Video,
            part: Vec<String>,
            auto_levels: Option<bool>,
            notify_subscribers: Option<bool>,
            on_behalf_of_content_owner: Option<String>,
            on_behalf_of_content_owner_channel: Option<String>,
            stabilize: Option<bool>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> InsertRequestBuilder<'a> {
            #[doc = "Should auto-levels be applied to the upload."]
            pub fn auto_levels(mut self, value: bool) -> Self {
                self.auto_levels = Some(value);
                self
            }
            #[doc = "Notify the channel subscribers about the new video. As default, the\nnotification is enabled."]
            pub fn notify_subscribers(mut self, value: bool) -> Self {
                self.notify_subscribers = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "This parameter can only be used in a properly <a\nhref=\"/youtube/v3/guides/authentication\">authorized request</a>.\n<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwnerChannel</strong></code> parameter\nspecifies the YouTube channel ID of the channel to which a video is being\nadded. This parameter is required when a request specifies a value for the\n<code>onBehalfOfContentOwner</code> parameter, and it can only be used in\nconjunction with that parameter. In addition, the request must be\nauthorized using a CMS account that is linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies. Finally, the\nchannel that the <code>onBehalfOfContentOwnerChannel</code> parameter value\nspecifies must be linked to the content owner that the\n<code>onBehalfOfContentOwner</code> parameter specifies.<br><br>This\nparameter is intended for YouTube content partners that own and manage many\ndifferent YouTube channels. It allows content owners to authenticate once\nand perform actions on behalf of the channel specified in the parameter\nvalue, without having to provide authentication credentials for each\nseparate channel."]
            pub fn on_behalf_of_content_owner_channel(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner_channel = Some(value.into());
                self
            }
            #[doc = "Should stabilize be applied to the upload."]
            pub fn stabilize(mut self, value: bool) -> Self {
                self.stabilize = Some(value);
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/videos");
                output
            }
            pub fn upload<T, R>(
                mut self,
                content: R,
                mime_type: ::mime::Mime,
            ) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let fields = ::google_field_selector::to_string::<T>();
                self.fields = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("autoLevels", &self.auto_levels)]);
                let req = req.query(&[("notifySubscribers", &self.notify_subscribers)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[(
                    "onBehalfOfContentOwnerChannel",
                    &self.on_behalf_of_content_owner_channel,
                )]);
                let req = req.query(&[("stabilize", &self.stabilize)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::list()](struct.VideosActions.html#method.list)"]
        #[derive(Debug, Clone)]
        pub struct ListRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            part: Vec<String>,
            chart: Option<crate::resources::videos::params::ListChart>,
            hl: Option<String>,
            id: Option<Vec<String>>,
            locale: Option<String>,
            max_height: Option<i32>,
            max_results: Option<u32>,
            max_width: Option<i32>,
            my_rating: Option<crate::resources::videos::params::ListMyRating>,
            on_behalf_of_content_owner: Option<String>,
            page_token: Option<String>,
            region_code: Option<String>,
            video_category_id: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ListRequestBuilder<'a> {
            #[doc = "Return the videos that are in the specified chart."]
            pub fn chart(mut self, value: crate::resources::videos::params::ListChart) -> Self {
                self.chart = Some(value);
                self
            }
            #[doc = "Stands for \"host language\". Specifies the localization language of the\nmetadata to be filled into snippet.localized. The field is filled with the\ndefault metadata if there is no localization in the specified language.\nThe parameter value must be a language code included in the list returned\nby the i18nLanguages.list method (e.g. en_US, es_MX)."]
            pub fn hl(mut self, value: impl Into<String>) -> Self {
                self.hl = Some(value.into());
                self
            }
            #[doc = "Return videos with the given ids."]
            pub fn id(mut self, value: impl Into<Vec<String>>) -> Self {
                self.id = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn locale(mut self, value: impl Into<String>) -> Self {
                self.locale = Some(value.into());
                self
            }
            #[doc = ""]
            pub fn max_height(mut self, value: i32) -> Self {
                self.max_height = Some(value);
                self
            }
            #[doc = "The <code><strong>maxResults</strong></code> parameter specifies the\nmaximum number of items that should be returned in the result\nset.<br><br><strong>Note:</strong> This parameter is supported for use in\nconjunction with the <code><a href=\"#myRating\">myRating</a></code> and\n<code><a href=\"#chart\">chart</a></code> parameters, but it is not supported\nfor use in conjunction with the <code><a href=\"#id\">id</a></code>\nparameter."]
            pub fn max_results(mut self, value: u32) -> Self {
                self.max_results = Some(value);
                self
            }
            #[doc = "Return the player with maximum height specified in"]
            pub fn max_width(mut self, value: i32) -> Self {
                self.max_width = Some(value);
                self
            }
            #[doc = "Return videos liked/disliked by the authenticated user.\nDoes not support RateType.RATED_TYPE_NONE."]
            pub fn my_rating(
                mut self,
                value: crate::resources::videos::params::ListMyRating,
            ) -> Self {
                self.my_rating = Some(value);
                self
            }
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "The <code><strong>pageToken</strong></code> parameter identifies a specific\npage in the result set that should be returned. In an API response, the\n<code>nextPageToken</code> and <code>prevPageToken</code> properties\nidentify other pages that could be retrieved.<br><br><strong>Note:</strong>\nThis parameter is supported for use in conjunction with the <code><a\nhref=\"#myRating\">myRating</a></code> and <code><a\nhref=\"#chart\">chart</a></code> parameters, but it is not supported for use\nin conjunction with the <code><a href=\"#id\">id</a></code> parameter."]
            pub fn page_token(mut self, value: impl Into<String>) -> Self {
                self.page_token = Some(value.into());
                self
            }
            #[doc = "Use a chart that is specific to the specified region"]
            pub fn region_code(mut self, value: impl Into<String>) -> Self {
                self.region_code = Some(value.into());
                self
            }
            #[doc = "Use chart that is specific to the specified video category"]
            pub fn video_category_id(mut self, value: impl Into<String>) -> Self {
                self.video_category_id = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are chosen by the caller of this"]
            #[doc = r" method and must implement `Deserialize` and `FieldSelector`. The"]
            #[doc = r" populated fields in the yielded items will be determined by the"]
            #[doc = r" `FieldSelector` implementation."]
            pub fn iter_items<T>(self) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_items_with_fields(fields)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be the default fields populated by"]
            #[doc = r" the server."]
            pub fn iter_items_with_default_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Video> {
                self.iter_items_with_fields(None::<String>)
            }
            #[doc = r" Return an iterator that iterates over all `#prop_ident`. The"]
            #[doc = r" items yielded by the iterator are `#items_type`. The populated"]
            #[doc = r" fields in `#items_type` will be all fields available. This should"]
            #[doc = r" primarily be used during developement and debugging as fetching"]
            #[doc = r" all fields can be expensive both in bandwidth and server"]
            #[doc = r" resources."]
            pub fn iter_items_with_all_fields(
                self,
            ) -> crate::iter::PageItemIter<Self, crate::schemas::Video> {
                self.iter_items_with_fields(Some("*"))
            }
            pub fn iter_items_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageItemIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                self.fields = Some({
                    let mut selector = concat!("nextPageToken,", "items").to_owned();
                    let items_fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("");
                    if !items_fields.is_empty() {
                        selector.push_str("(");
                        selector.push_str(items_fields);
                        selector.push_str(")");
                    }
                    selector
                });
                crate::iter::PageItemIter::new(self, "items")
            }
            pub fn iter<T>(self) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.iter_with_fields(fields)
            }
            pub fn iter_with_default_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::VideoListResponse> {
                self.iter_with_fields(None::<&str>)
            }
            pub fn iter_with_all_fields(
                self,
            ) -> crate::iter::PageIter<Self, crate::schemas::VideoListResponse> {
                self.iter_with_fields(Some("*"))
            }
            pub fn iter_with_fields<T, F>(
                mut self,
                fields: Option<F>,
            ) -> crate::iter::PageIter<Self, T>
            where
                T: ::serde::de::DeserializeOwned,
                F: AsRef<str>,
            {
                let mut fields = fields.as_ref().map(|x| x.as_ref()).unwrap_or("").to_owned();
                if !fields.is_empty() {
                    match fields.chars().rev().nth(0) {
                        Some(',') | None => {}
                        _ => fields.push_str(","),
                    }
                    fields.push_str("nextPageToken");
                    self.fields = Some(fields);
                }
                crate::iter::PageIter::new(self)
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::VideoListResponse, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(
                self,
            ) -> Result<crate::schemas::VideoListResponse, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::GET, path);
                let req = req.query(&[("part", &self.part)]);
                let req = req.query(&[("chart", &self.chart)]);
                let req = req.query(&[("hl", &self.hl)]);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("locale", &self.locale)]);
                let req = req.query(&[("maxHeight", &self.max_height)]);
                let req = req.query(&[("maxResults", &self.max_results)]);
                let req = req.query(&[("maxWidth", &self.max_width)]);
                let req = req.query(&[("myRating", &self.my_rating)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("pageToken", &self.page_token)]);
                let req = req.query(&[("regionCode", &self.region_code)]);
                let req = req.query(&[("videoCategoryId", &self.video_category_id)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        impl<'a> crate::iter::IterableMethod for ListRequestBuilder<'a> {
            fn set_page_token(&mut self, value: String) {
                self.page_token = value.into();
            }
            fn execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                self._execute()
            }
        }
        #[doc = "Created via [VideosActions::rate()](struct.VideosActions.html#method.rate)"]
        #[derive(Debug, Clone)]
        pub struct RateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            id: String,
            rating: crate::resources::videos::params::RateRating,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> RateRequestBuilder<'a> {
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos/rate");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("id", &self.id)]);
                let req = req.query(&[("rating", &self.rating)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::report_abuse()](struct.VideosActions.html#method.report_abuse)"]
        #[derive(Debug, Clone)]
        pub struct ReportAbuseRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::VideoAbuseReport,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> ReportAbuseRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos/reportAbuse");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [VideosActions::update()](struct.VideosActions.html#method.update)"]
        #[derive(Debug, Clone)]
        pub struct UpdateRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::Video,
            part: Vec<String>,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UpdateRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The actual\nCMS account that the user authenticates with must be linked to the\nspecified YouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            #[doc = r" Execute the given operation. The fields requested are"]
            #[doc = r" determined by the FieldSelector attribute of the return type."]
            #[doc = r" This allows for flexible and ergonomic partial responses. See"]
            #[doc = r" `execute_standard` and `execute_debug` for interfaces that"]
            #[doc = r" are not generic over the return type and deserialize the"]
            #[doc = r" response into an auto-generated struct will all possible"]
            #[doc = r" fields."]
            pub fn execute<T>(self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned + ::google_field_selector::FieldSelector,
            {
                let fields = ::google_field_selector::to_string::<T>();
                let fields: Option<String> = if fields.is_empty() {
                    None
                } else {
                    Some(fields)
                };
                self.execute_with_fields(fields)
            }
            #[doc = r" Execute the given operation. This will not provide any"]
            #[doc = r" `fields` selector indicating that the server will determine"]
            #[doc = r" the fields returned. This typically includes the most common"]
            #[doc = r" fields, but it will not include every possible attribute of"]
            #[doc = r" the response resource."]
            pub fn execute_with_default_fields(
                self,
            ) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(None::<&str>)
            }
            #[doc = r" Execute the given operation. This will provide a `fields`"]
            #[doc = r" selector of `*`. This will include every attribute of the"]
            #[doc = r" response resource and should be limited to use during"]
            #[doc = r" development or debugging."]
            pub fn execute_with_all_fields(self) -> Result<crate::schemas::Video, crate::Error> {
                self.execute_with_fields(Some("*"))
            }
            #[doc = r" Execute the given operation. This will use the `fields`"]
            #[doc = r" selector provided and will deserialize the response into"]
            #[doc = r" whatever return value is provided."]
            pub fn execute_with_fields<T, F>(mut self, fields: Option<F>) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
                F: Into<String>,
            {
                self.fields = fields.map(Into::into);
                self._execute()
            }
            fn _execute<T>(&mut self) -> Result<T, crate::Error>
            where
                T: ::serde::de::DeserializeOwned,
            {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                Ok(crate::error_from_response(req.send()?)?.json()?)
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/videos");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::PUT, path);
                let req = req.query(&[("part", &self.part)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
    pub mod watermarks {
        pub mod params {}
        pub struct WatermarksActions<'a> {
            pub(crate) reqwest: &'a reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
        }
        impl<'a> WatermarksActions<'a> {
            fn auth_ref(&self) -> &dyn ::google_api_auth::GetAccessToken {
                self.auth
            }
            #[doc = "Allows upload of watermark image and setting it for a channel."]
            pub fn set(
                &self,
                request: crate::schemas::InvideoBranding,
                channel_id: impl Into<String>,
            ) -> SetRequestBuilder {
                SetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    request,
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    channel_id: channel_id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
            #[doc = "Allows removal of channel watermark."]
            pub fn unset(&self, channel_id: impl Into<String>) -> UnsetRequestBuilder {
                UnsetRequestBuilder {
                    reqwest: &self.reqwest,
                    auth: self.auth_ref(),
                    access_token: None,
                    alt: None,
                    callback: None,
                    fields: None,
                    key: None,
                    oauth_token: None,
                    pretty_print: None,
                    quota_user: None,
                    upload_protocol: None,
                    upload_type: None,
                    xgafv: None,
                    channel_id: channel_id.into(),
                    on_behalf_of_content_owner: None,
                }
            }
        }
        #[doc = "Created via [WatermarksActions::set()](struct.WatermarksActions.html#method.set)"]
        #[derive(Debug, Clone)]
        pub struct SetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            request: crate::schemas::InvideoBranding,
            channel_id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> SetRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            fn _simple_upload_path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("upload/youtube/v3/watermarks/set");
                output
            }
            pub fn upload<R>(self, content: R, mime_type: ::mime::Mime) -> Result<(), crate::Error>
            where
                R: ::std::io::Read + ::std::io::Seek + Send + 'static,
            {
                let req = self._request(&self._simple_upload_path())?;
                let req = req.query(&[("uploadType", "multipart")]);
                use crate::multipart::{Part, RelatedMultiPart};
                let mut multipart = RelatedMultiPart::new();
                let request_json = ::serde_json::to_vec(&self.request)?;
                multipart.new_part(Part::new(
                    ::mime::APPLICATION_JSON,
                    Box::new(::std::io::Cursor::new(request_json)),
                ));
                multipart.new_part(Part::new(mime_type, Box::new(content)));
                let req = req.header(
                    ::reqwest::header::CONTENT_TYPE,
                    format!("multipart/related; boundary={}", multipart.boundary()),
                );
                let req = req.body(reqwest::blocking::Body::new(multipart.into_reader()));
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                let req = req.json(&self.request);
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/watermarks/set");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
        #[doc = "Created via [WatermarksActions::unset()](struct.WatermarksActions.html#method.unset)"]
        #[derive(Debug, Clone)]
        pub struct UnsetRequestBuilder<'a> {
            pub(crate) reqwest: &'a ::reqwest::blocking::Client,
            pub(crate) auth: &'a dyn ::google_api_auth::GetAccessToken,
            channel_id: String,
            on_behalf_of_content_owner: Option<String>,
            access_token: Option<String>,
            alt: Option<crate::params::Alt>,
            callback: Option<String>,
            fields: Option<String>,
            key: Option<String>,
            oauth_token: Option<String>,
            pretty_print: Option<bool>,
            quota_user: Option<String>,
            upload_protocol: Option<String>,
            upload_type: Option<String>,
            xgafv: Option<crate::params::Xgafv>,
        }
        impl<'a> UnsetRequestBuilder<'a> {
            #[doc = "<strong>Note:</strong> This parameter is intended exclusively for YouTube\ncontent partners.<br><br>The\n<code><strong>onBehalfOfContentOwner</strong></code> parameter indicates\nthat the\nrequest's authorization credentials identify a YouTube CMS user who is\nacting on behalf of the content owner specified in the parameter value.\nThis parameter is intended for YouTube content partners that own and manage\nmany different YouTube channels. It allows content owners to authenticate\nonce and get access to all their video and channel data, without having to\nprovide authentication credentials for each individual channel. The CMS\naccount that the user authenticates with must be linked to the specified\nYouTube content owner."]
            pub fn on_behalf_of_content_owner(mut self, value: impl Into<String>) -> Self {
                self.on_behalf_of_content_owner = Some(value.into());
                self
            }
            #[doc = "OAuth access token."]
            pub fn access_token(mut self, value: impl Into<String>) -> Self {
                self.access_token = Some(value.into());
                self
            }
            #[doc = "JSONP"]
            pub fn callback(mut self, value: impl Into<String>) -> Self {
                self.callback = Some(value.into());
                self
            }
            #[doc = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."]
            pub fn key(mut self, value: impl Into<String>) -> Self {
                self.key = Some(value.into());
                self
            }
            #[doc = "OAuth 2.0 token for the current user."]
            pub fn oauth_token(mut self, value: impl Into<String>) -> Self {
                self.oauth_token = Some(value.into());
                self
            }
            #[doc = "Returns response with indentations and line breaks."]
            pub fn pretty_print(mut self, value: bool) -> Self {
                self.pretty_print = Some(value);
                self
            }
            #[doc = "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."]
            pub fn quota_user(mut self, value: impl Into<String>) -> Self {
                self.quota_user = Some(value.into());
                self
            }
            #[doc = "Upload protocol for media (e.g. \"raw\", \"multipart\")."]
            pub fn upload_protocol(mut self, value: impl Into<String>) -> Self {
                self.upload_protocol = Some(value.into());
                self
            }
            #[doc = "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."]
            pub fn upload_type(mut self, value: impl Into<String>) -> Self {
                self.upload_type = Some(value.into());
                self
            }
            #[doc = "V1 error format."]
            pub fn xgafv(mut self, value: crate::params::Xgafv) -> Self {
                self.xgafv = Some(value);
                self
            }
            pub fn execute(self) -> Result<(), crate::Error> {
                let req = self._request(&self._path())?;
                crate::error_from_response(req.send()?)?;
                Ok(())
            }
            fn _path(&self) -> String {
                let mut output = "https://www.googleapis.com/".to_owned();
                output.push_str("youtube/v3/watermarks/unset");
                output
            }
            fn _request(
                &self,
                path: &str,
            ) -> Result<::reqwest::blocking::RequestBuilder, crate::Error> {
                let req = self.reqwest.request(::reqwest::Method::POST, path);
                let req = req.query(&[("channelId", &self.channel_id)]);
                let req =
                    req.query(&[("onBehalfOfContentOwner", &self.on_behalf_of_content_owner)]);
                let req = req.query(&[("access_token", &self.access_token)]);
                let req = req.query(&[("alt", &self.alt)]);
                let req = req.query(&[("callback", &self.callback)]);
                let req = req.query(&[("fields", &self.fields)]);
                let req = req.query(&[("key", &self.key)]);
                let req = req.query(&[("oauth_token", &self.oauth_token)]);
                let req = req.query(&[("prettyPrint", &self.pretty_print)]);
                let req = req.query(&[("quotaUser", &self.quota_user)]);
                let req = req.query(&[("upload_protocol", &self.upload_protocol)]);
                let req = req.query(&[("uploadType", &self.upload_type)]);
                let req = req.query(&[("$.xgafv", &self.xgafv)]);
                let req = req.bearer_auth(
                    self.auth
                        .access_token()
                        .map_err(|err| crate::Error::OAuth2(err))?,
                );
                Ok(req)
            }
        }
    }
}
#[derive(Debug)]
pub enum Error {
    OAuth2(Box<dyn ::std::error::Error + Send + Sync>),
    JSON(::serde_json::Error),
    Reqwest {
        reqwest_err: ::reqwest::Error,
        body: Option<String>,
    },
    Other(Box<dyn ::std::error::Error + Send + Sync>),
}

impl Error {
    pub fn json_error(&self) -> Option<&::serde_json::Error> {
        match self {
            Error::OAuth2(_) => None,
            Error::JSON(err) => Some(err),
            Error::Reqwest { .. } => None,
            Error::Other(_) => None,
        }
    }
}

impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            Error::OAuth2(err) => write!(f, "OAuth2 Error: {}", err),
            Error::JSON(err) => write!(f, "JSON Error: {}", err),
            Error::Reqwest { reqwest_err, body } => {
                write!(f, "Reqwest Error: {}", reqwest_err)?;
                if let Some(body) = body {
                    write!(f, ": {}", body)?;
                }
                Ok(())
            }
            Error::Other(err) => write!(f, "Uknown Error: {}", err),
        }
    }
}

impl ::std::error::Error for Error {}

impl From<::serde_json::Error> for Error {
    fn from(err: ::serde_json::Error) -> Error {
        Error::JSON(err)
    }
}

impl From<::reqwest::Error> for Error {
    fn from(reqwest_err: ::reqwest::Error) -> Error {
        Error::Reqwest {
            reqwest_err,
            body: None,
        }
    }
}

/// Check the response to see if the status code represents an error. If so
/// convert it into the Reqwest variant of Error.
fn error_from_response(
    response: ::reqwest::blocking::Response,
) -> Result<::reqwest::blocking::Response, Error> {
    match response.error_for_status_ref() {
        Err(reqwest_err) => {
            let body = response.text().ok();
            Err(Error::Reqwest { reqwest_err, body })
        }
        Ok(_) => Ok(response),
    }
}
#[allow(dead_code)]
const SIMPLE: &::percent_encoding::AsciiSet = &::percent_encoding::NON_ALPHANUMERIC
    .remove(b'-')
    .remove(b'.')
    .remove(b'_')
    .remove(b'~');

#[allow(dead_code)]
const RESERVED: &::percent_encoding::AsciiSet = &SIMPLE
    .remove(b'%')
    .remove(b':')
    .remove(b'/')
    .remove(b'?')
    .remove(b'#')
    .remove(b'[')
    .remove(b']')
    .remove(b'@')
    .remove(b'!')
    .remove(b'$')
    .remove(b'&')
    .remove(b'\'')
    .remove(b'(')
    .remove(b')')
    .remove(b'*')
    .remove(b'+')
    .remove(b',')
    .remove(b';')
    .remove(b'=');
#[allow(dead_code)]
mod multipart {
    pub(crate) struct RelatedMultiPart {
        parts: Vec<Part>,
        boundary: String,
    }

    impl RelatedMultiPart {
        pub(crate) fn new() -> Self {
            RelatedMultiPart {
                parts: Vec::new(),
                boundary: ::textnonce::TextNonce::sized(68).unwrap().0,
            }
        }

        pub(crate) fn new_part(&mut self, part: Part) {
            self.parts.push(part);
        }

        pub(crate) fn boundary(&self) -> &str {
            &self.boundary
        }

        pub(crate) fn into_reader(self) -> RelatedMultiPartReader {
            let boundary_marker = boundary_marker(&self.boundary);
            RelatedMultiPartReader {
                state: RelatedMultiPartReaderState::WriteBoundary {
                    start: 0,
                    boundary: format!("{}\r\n", &boundary_marker),
                },
                boundary: boundary_marker,
                next_body: None,
                parts: self.parts.into_iter(),
            }
        }
    }

    pub(crate) struct Part {
        content_type: ::mime::Mime,
        body: Box<dyn ::std::io::Read + Send>,
    }

    impl Part {
        pub(crate) fn new(
            content_type: ::mime::Mime,
            body: Box<dyn ::std::io::Read + Send>,
        ) -> Part {
            Part { content_type, body }
        }
    }

    pub(crate) struct RelatedMultiPartReader {
        state: RelatedMultiPartReaderState,
        boundary: String,
        next_body: Option<Box<dyn ::std::io::Read + Send>>,
        parts: std::vec::IntoIter<Part>,
    }

    enum RelatedMultiPartReaderState {
        WriteBoundary {
            start: usize,
            boundary: String,
        },
        WriteContentType {
            start: usize,
            content_type: Vec<u8>,
        },
        WriteBody {
            body: Box<dyn ::std::io::Read + Send>,
        },
    }

    impl ::std::io::Read for RelatedMultiPartReader {
        fn read(&mut self, buf: &mut [u8]) -> ::std::io::Result<usize> {
            use RelatedMultiPartReaderState::*;
            let mut bytes_written: usize = 0;
            loop {
                let rem_buf = &mut buf[bytes_written..];
                match &mut self.state {
                    WriteBoundary { start, boundary } => {
                        let bytes_to_copy = std::cmp::min(boundary.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&boundary.as_bytes()[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == boundary.len() {
                            let next_part = match self.parts.next() {
                                None => break,
                                Some(part) => part,
                            };
                            self.next_body = Some(next_part.body);
                            self.state = WriteContentType {
                                start: 0,
                                content_type: format!(
                                    "Content-Type: {}\r\n\r\n",
                                    next_part.content_type
                                )
                                .into_bytes(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteContentType {
                        start,
                        content_type,
                    } => {
                        let bytes_to_copy =
                            std::cmp::min(content_type.len() - *start, rem_buf.len());
                        rem_buf[..bytes_to_copy]
                            .copy_from_slice(&content_type[*start..*start + bytes_to_copy]);
                        *start += bytes_to_copy;
                        bytes_written += bytes_to_copy;
                        if *start == content_type.len() {
                            self.state = WriteBody {
                                body: self.next_body.take().unwrap(),
                            };
                        } else {
                            break;
                        }
                    }
                    WriteBody { body } => {
                        let written = body.read(rem_buf)?;
                        bytes_written += written;
                        if written == 0 {
                            self.state = WriteBoundary {
                                start: 0,
                                boundary: format!("\r\n{}\r\n", &self.boundary),
                            };
                        } else {
                            break;
                        }
                    }
                }
            }
            Ok(bytes_written)
        }
    }

    fn boundary_marker(boundary: &str) -> String {
        let mut marker = String::with_capacity(boundary.len() + 2);
        marker.push_str("--");
        marker.push_str(boundary);
        marker
    }
}
// A serde helper module that can be used with the `with` attribute
// to deserialize any string to a FromStr type and serialize any
// Display type to a String. Google API's encode i64, u64 values as
// strings.
#[allow(dead_code)]
mod parsed_string {
    pub fn serialize<T, S>(
        value: &Option<T>,
        serializer: S,
    ) -> ::std::result::Result<S::Ok, S::Error>
    where
        T: ::std::fmt::Display,
        S: ::serde::Serializer,
    {
        use ::serde::Serialize;
        value.as_ref().map(|x| x.to_string()).serialize(serializer)
    }

    pub fn deserialize<'de, T, D>(deserializer: D) -> ::std::result::Result<Option<T>, D::Error>
    where
        T: ::std::str::FromStr,
        T::Err: ::std::fmt::Display,
        D: ::serde::de::Deserializer<'de>,
    {
        use ::serde::Deserialize;
        match Option::<String>::deserialize(deserializer)? {
            Some(x) => Ok(Some(x.parse().map_err(::serde::de::Error::custom)?)),
            None => Ok(None),
        }
    }
}
pub mod iter {
    pub trait IterableMethod {
        fn set_page_token(&mut self, value: String);
        fn execute<T>(&mut self) -> Result<T, crate::Error>
        where
            T: ::serde::de::DeserializeOwned;
    }

    pub struct PageIter<M, T> {
        pub method: M,
        pub finished: bool,
        pub _phantom: ::std::marker::PhantomData<T>,
    }

    impl<M, T> PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M) -> Self {
            PageIter {
                method,
                finished: false,
                _phantom: ::std::marker::PhantomData,
            }
        }
    }

    impl<M, T> Iterator for PageIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            if self.finished {
                return None;
            }
            let paginated_result: ::serde_json::Map<String, ::serde_json::Value> =
                match self.method.execute() {
                    Ok(r) => r,
                    Err(err) => return Some(Err(err)),
                };
            if let Some(next_page_token) = paginated_result
                .get("nextPageToken")
                .and_then(|t| t.as_str())
            {
                self.method.set_page_token(next_page_token.to_owned());
            } else {
                self.finished = true;
            }

            Some(
                match ::serde_json::from_value(::serde_json::Value::Object(paginated_result)) {
                    Ok(resp) => Ok(resp),
                    Err(err) => Err(err.into()),
                },
            )
        }
    }

    pub struct PageItemIter<M, T> {
        items_field: &'static str,
        page_iter: PageIter<M, ::serde_json::Map<String, ::serde_json::Value>>,
        items: ::std::vec::IntoIter<T>,
    }

    impl<M, T> PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        pub(crate) fn new(method: M, items_field: &'static str) -> Self {
            PageItemIter {
                items_field,
                page_iter: PageIter::new(method),
                items: Vec::new().into_iter(),
            }
        }
    }

    impl<M, T> Iterator for PageItemIter<M, T>
    where
        M: IterableMethod,
        T: ::serde::de::DeserializeOwned,
    {
        type Item = Result<T, crate::Error>;

        fn next(&mut self) -> Option<Result<T, crate::Error>> {
            loop {
                if let Some(v) = self.items.next() {
                    return Some(Ok(v));
                }

                let next_page = self.page_iter.next();
                match next_page {
                    None => return None,
                    Some(Err(err)) => return Some(Err(err)),
                    Some(Ok(next_page)) => {
                        let mut next_page: ::serde_json::Map<String, ::serde_json::Value> =
                            next_page;
                        let items_array = match next_page.remove(self.items_field) {
                            Some(items) => items,
                            None => {
                                return Some(Err(crate::Error::Other(
                                    format!("no {} field found in iter response", self.items_field)
                                        .into(),
                                )))
                            }
                        };
                        let items_vec: Result<Vec<T>, _> = ::serde_json::from_value(items_array);
                        match items_vec {
                            Ok(items) => self.items = items.into_iter(),
                            Err(err) => return Some(Err(err.into())),
                        }
                    }
                }
            }
        }
    }
}
